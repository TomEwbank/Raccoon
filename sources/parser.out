Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt
Rule 2     program -> stmt program
Rule 3     program -> END_STATEMENT stmt program
Rule 4     stmt -> simple_stmt
Rule 5     stmt -> compound_stmt
Rule 6     simple_stmt -> small_stmt END_STATEMENT
Rule 7     small_stmt -> assignment
Rule 8     small_stmt -> const_decl
Rule 9     small_stmt -> expr
Rule 10    small_stmt -> return_stmt
Rule 11    small_stmt -> loop_stmt
Rule 12    return_stmt -> RETURN
Rule 13    return_stmt -> RETURN expr
Rule 14    loop_stmt -> BREAK
Rule 15    loop_stmt -> CONTINUE
Rule 16    assignment -> IDENTIFIER ASSIGN expr
Rule 17    assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
Rule 18    assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
Rule 19    const_decl -> IDENTIFIER CONST expr
Rule 20    func_call -> IDENTIFIER LPAREN list_args RPAREN
Rule 21    func_call -> IDENTIFIER LPAREN RPAREN
Rule 22    list_args -> expr
Rule 23    list_args -> expr COMMA list_args
Rule 24    expr -> IDENTIFIER
Rule 25    expr -> IDENTIFIER LSBRACKET expr RSBRACKET
Rule 26    expr -> STRING
Rule 27    expr -> LPAREN expr RPAREN
Rule 28    expr -> func_call
Rule 29    expr -> INTEGER
Rule 30    expr -> DOUBLE
Rule 31    expr -> boolean
Rule 32    boolean -> TRUE
Rule 33    boolean -> FALSE
Rule 34    expr -> expr ADD_OP expr
Rule 35    expr -> expr SUB_OP expr
Rule 36    expr -> expr MUL_OP expr
Rule 37    expr -> expr DIV_OP expr
Rule 38    expr -> expr MOD_OP expr
Rule 39    expr -> expr comb_op expr
Rule 40    expr -> expr comp_op expr
Rule 41    comb_op -> OR
Rule 42    comb_op -> AND
Rule 43    comp_op -> CEQ
Rule 44    comp_op -> CNE
Rule 45    comp_op -> CLT
Rule 46    comp_op -> CLE
Rule 47    comp_op -> CGT
Rule 48    comp_op -> CGE
Rule 49    compound_stmt -> func_def
Rule 50    compound_stmt -> if_stmt
Rule 51    compound_stmt -> while_stmt
Rule 52    compound_stmt -> for_stmt
Rule 53    func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT
Rule 54    head -> IDENTIFIER LPAREN func_def_args RPAREN COLON
Rule 55    head -> IDENTIFIER LPAREN RPAREN COLON
Rule 56    func_def_args -> IDENTIFIER
Rule 57    func_def_args -> IDENTIFIER COMMA func_def_args
Rule 58    body -> stmt
Rule 59    body -> stmt body
Rule 60    while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT
Rule 61    for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
Rule 62    for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
Rule 63    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT
Rule 64    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
Rule 65    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
Rule 66    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
Rule 67    elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT
Rule 68    elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list

Terminals, with rules where they appear

ADD_OP               : 34
AND                  : 42
ASSIGN               : 16 17 18
BREAK                : 14
CEQ                  : 43
CGE                  : 48
CGT                  : 47
CLE                  : 46
CLT                  : 45
CNE                  : 44
COLON                : 54 55 60 61 62 63 64 65 65 66 66 67 68
COMMA                : 23 57 61
CONST                : 19
CONTINUE             : 15
DEDENT               : 53 60 61 62 63 64 65 65 66 66 67 68
DIV_OP               : 37
DOUBLE               : 30
ELSE                 : 65 66
ELSEIF               : 67 68
END_STATEMENT        : 3 6 53 60 61 62 63 64 65 65 66 66 67 68
FALSE                : 33
FOR                  : 61 62
FUNCTION             : 53
IDENTIFIER           : 16 17 18 19 20 21 24 25 54 55 56 57 61 62 62
IF                   : 63 64 65 66
IN                   : 61 62
INDENT               : 53 60 61 62 63 64 65 65 66 66 67 68
INTEGER              : 29
LPAREN               : 20 21 27 54 55 61
LSBRACKET            : 17 18 25
MOD_OP               : 38
MUL_OP               : 36
OR                   : 41
RANGE                : 61
RETURN               : 12 13
RPAREN               : 20 21 27 54 55 61
RSBRACKET            : 17 18 25
STRING               : 26
SUB_OP               : 35
TRUE                 : 32
WHILE                : 60
error                : 

Nonterminals, with rules where they appear

assignment           : 7
body                 : 53 59 60 61 62 63 64 65 65 66 66 67 68
boolean              : 31
comb_op              : 39
comp_op              : 40
compound_stmt        : 5
const_decl           : 8
elseif_list          : 64 65 68
expr                 : 9 13 16 18 18 19 22 23 25 27 34 34 35 35 36 36 37 37 38 38 39 39 40 40 60 61 61 63 64 65 66 67 68
for_stmt             : 52
func_call            : 28
func_def             : 49
func_def_args        : 54 57
head                 : 53
if_stmt              : 50
list_args            : 17 20 23
loop_stmt            : 11
program              : 2 3 0
return_stmt          : 10
simple_stmt          : 4
small_stmt           : 6
stmt                 : 1 2 3 58 59
while_stmt           : 51

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt
    (2) program -> . stmt program
    (3) program -> . END_STATEMENT stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (49) compound_stmt -> . func_def
    (50) compound_stmt -> . if_stmt
    (51) compound_stmt -> . while_stmt
    (52) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . loop_stmt
    (53) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (63) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (60) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (61) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) loop_stmt -> . BREAK
    (15) loop_stmt -> . CONTINUE
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    END_STATEMENT   shift and go to state 14
    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    RETURN          shift and go to state 6
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 30
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 2
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    const_decl                     shift and go to state 10
    program                        shift and go to state 11
    compound_stmt                  shift and go to state 13
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 19
    for_stmt                       shift and go to state 20
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    expr                           shift and go to state 27
    while_stmt                     shift and go to state 29

state 1

    (53) func_def -> FUNCTION . head END_STATEMENT INDENT body DEDENT
    (54) head -> . IDENTIFIER LPAREN func_def_args RPAREN COLON
    (55) head -> . IDENTIFIER LPAREN RPAREN COLON

    IDENTIFIER      shift and go to state 33

    head                           shift and go to state 32

state 2

    (6) simple_stmt -> small_stmt . END_STATEMENT

    END_STATEMENT   shift and go to state 34


state 3

    (60) while_stmt -> WHILE . expr COLON END_STATEMENT INDENT body DEDENT
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 36
    boolean                        shift and go to state 4

state 4

    (31) expr -> boolean .

    COMMA           reduce using rule 31 (expr -> boolean .)
    ADD_OP          reduce using rule 31 (expr -> boolean .)
    SUB_OP          reduce using rule 31 (expr -> boolean .)
    MUL_OP          reduce using rule 31 (expr -> boolean .)
    DIV_OP          reduce using rule 31 (expr -> boolean .)
    MOD_OP          reduce using rule 31 (expr -> boolean .)
    OR              reduce using rule 31 (expr -> boolean .)
    AND             reduce using rule 31 (expr -> boolean .)
    CEQ             reduce using rule 31 (expr -> boolean .)
    CNE             reduce using rule 31 (expr -> boolean .)
    CLT             reduce using rule 31 (expr -> boolean .)
    CLE             reduce using rule 31 (expr -> boolean .)
    CGT             reduce using rule 31 (expr -> boolean .)
    CGE             reduce using rule 31 (expr -> boolean .)
    RPAREN          reduce using rule 31 (expr -> boolean .)
    RSBRACKET       reduce using rule 31 (expr -> boolean .)
    COLON           reduce using rule 31 (expr -> boolean .)
    END_STATEMENT   reduce using rule 31 (expr -> boolean .)


state 5

    (10) small_stmt -> return_stmt .

    END_STATEMENT   reduce using rule 10 (small_stmt -> return_stmt .)


state 6

    (12) return_stmt -> RETURN .
    (13) return_stmt -> RETURN . expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    END_STATEMENT   reduce using rule 12 (return_stmt -> RETURN .)
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 37
    boolean                        shift and go to state 4

state 7

    (29) expr -> INTEGER .

    COMMA           reduce using rule 29 (expr -> INTEGER .)
    ADD_OP          reduce using rule 29 (expr -> INTEGER .)
    SUB_OP          reduce using rule 29 (expr -> INTEGER .)
    MUL_OP          reduce using rule 29 (expr -> INTEGER .)
    DIV_OP          reduce using rule 29 (expr -> INTEGER .)
    MOD_OP          reduce using rule 29 (expr -> INTEGER .)
    OR              reduce using rule 29 (expr -> INTEGER .)
    AND             reduce using rule 29 (expr -> INTEGER .)
    CEQ             reduce using rule 29 (expr -> INTEGER .)
    CNE             reduce using rule 29 (expr -> INTEGER .)
    CLT             reduce using rule 29 (expr -> INTEGER .)
    CLE             reduce using rule 29 (expr -> INTEGER .)
    CGT             reduce using rule 29 (expr -> INTEGER .)
    CGE             reduce using rule 29 (expr -> INTEGER .)
    RPAREN          reduce using rule 29 (expr -> INTEGER .)
    RSBRACKET       reduce using rule 29 (expr -> INTEGER .)
    COLON           reduce using rule 29 (expr -> INTEGER .)
    END_STATEMENT   reduce using rule 29 (expr -> INTEGER .)


state 8

    (32) boolean -> TRUE .

    ADD_OP          reduce using rule 32 (boolean -> TRUE .)
    SUB_OP          reduce using rule 32 (boolean -> TRUE .)
    MUL_OP          reduce using rule 32 (boolean -> TRUE .)
    DIV_OP          reduce using rule 32 (boolean -> TRUE .)
    MOD_OP          reduce using rule 32 (boolean -> TRUE .)
    OR              reduce using rule 32 (boolean -> TRUE .)
    AND             reduce using rule 32 (boolean -> TRUE .)
    CEQ             reduce using rule 32 (boolean -> TRUE .)
    CNE             reduce using rule 32 (boolean -> TRUE .)
    CLT             reduce using rule 32 (boolean -> TRUE .)
    CLE             reduce using rule 32 (boolean -> TRUE .)
    CGT             reduce using rule 32 (boolean -> TRUE .)
    CGE             reduce using rule 32 (boolean -> TRUE .)
    END_STATEMENT   reduce using rule 32 (boolean -> TRUE .)
    COLON           reduce using rule 32 (boolean -> TRUE .)
    RPAREN          reduce using rule 32 (boolean -> TRUE .)
    RSBRACKET       reduce using rule 32 (boolean -> TRUE .)
    COMMA           reduce using rule 32 (boolean -> TRUE .)


state 9

    (61) for_stmt -> FOR . IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> FOR . IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT

    IDENTIFIER      shift and go to state 38


state 10

    (8) small_stmt -> const_decl .

    END_STATEMENT   reduce using rule 8 (small_stmt -> const_decl .)


state 11

    (0) S' -> program .



state 12

    (16) assignment -> IDENTIFIER . ASSIGN expr
    (17) assignment -> IDENTIFIER . ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> IDENTIFIER . LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> IDENTIFIER . CONST expr
    (24) expr -> IDENTIFIER .
    (25) expr -> IDENTIFIER . LSBRACKET expr RSBRACKET
    (20) func_call -> IDENTIFIER . LPAREN list_args RPAREN
    (21) func_call -> IDENTIFIER . LPAREN RPAREN

    ASSIGN          shift and go to state 42
    LSBRACKET       shift and go to state 40
    CONST           shift and go to state 39
    ADD_OP          reduce using rule 24 (expr -> IDENTIFIER .)
    SUB_OP          reduce using rule 24 (expr -> IDENTIFIER .)
    MUL_OP          reduce using rule 24 (expr -> IDENTIFIER .)
    DIV_OP          reduce using rule 24 (expr -> IDENTIFIER .)
    MOD_OP          reduce using rule 24 (expr -> IDENTIFIER .)
    OR              reduce using rule 24 (expr -> IDENTIFIER .)
    AND             reduce using rule 24 (expr -> IDENTIFIER .)
    CEQ             reduce using rule 24 (expr -> IDENTIFIER .)
    CNE             reduce using rule 24 (expr -> IDENTIFIER .)
    CLT             reduce using rule 24 (expr -> IDENTIFIER .)
    CLE             reduce using rule 24 (expr -> IDENTIFIER .)
    CGT             reduce using rule 24 (expr -> IDENTIFIER .)
    CGE             reduce using rule 24 (expr -> IDENTIFIER .)
    END_STATEMENT   reduce using rule 24 (expr -> IDENTIFIER .)
    LPAREN          shift and go to state 41


state 13

    (5) stmt -> compound_stmt .

    FUNCTION        reduce using rule 5 (stmt -> compound_stmt .)
    IF              reduce using rule 5 (stmt -> compound_stmt .)
    WHILE           reduce using rule 5 (stmt -> compound_stmt .)
    FOR             reduce using rule 5 (stmt -> compound_stmt .)
    IDENTIFIER      reduce using rule 5 (stmt -> compound_stmt .)
    STRING          reduce using rule 5 (stmt -> compound_stmt .)
    LPAREN          reduce using rule 5 (stmt -> compound_stmt .)
    INTEGER         reduce using rule 5 (stmt -> compound_stmt .)
    DOUBLE          reduce using rule 5 (stmt -> compound_stmt .)
    RETURN          reduce using rule 5 (stmt -> compound_stmt .)
    BREAK           reduce using rule 5 (stmt -> compound_stmt .)
    CONTINUE        reduce using rule 5 (stmt -> compound_stmt .)
    TRUE            reduce using rule 5 (stmt -> compound_stmt .)
    FALSE           reduce using rule 5 (stmt -> compound_stmt .)
    DEDENT          reduce using rule 5 (stmt -> compound_stmt .)
    END_STATEMENT   reduce using rule 5 (stmt -> compound_stmt .)
    $end            reduce using rule 5 (stmt -> compound_stmt .)


state 14

    (3) program -> END_STATEMENT . stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (49) compound_stmt -> . func_def
    (50) compound_stmt -> . if_stmt
    (51) compound_stmt -> . while_stmt
    (52) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . loop_stmt
    (53) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (63) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (60) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (61) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) loop_stmt -> . BREAK
    (15) loop_stmt -> . CONTINUE
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    RETURN          shift and go to state 6
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 30
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 2
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 13
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 43
    for_stmt                       shift and go to state 20
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    expr                           shift and go to state 27
    while_stmt                     shift and go to state 29

state 15

    (26) expr -> STRING .

    COMMA           reduce using rule 26 (expr -> STRING .)
    ADD_OP          reduce using rule 26 (expr -> STRING .)
    SUB_OP          reduce using rule 26 (expr -> STRING .)
    MUL_OP          reduce using rule 26 (expr -> STRING .)
    DIV_OP          reduce using rule 26 (expr -> STRING .)
    MOD_OP          reduce using rule 26 (expr -> STRING .)
    OR              reduce using rule 26 (expr -> STRING .)
    AND             reduce using rule 26 (expr -> STRING .)
    CEQ             reduce using rule 26 (expr -> STRING .)
    CNE             reduce using rule 26 (expr -> STRING .)
    CLT             reduce using rule 26 (expr -> STRING .)
    CLE             reduce using rule 26 (expr -> STRING .)
    CGT             reduce using rule 26 (expr -> STRING .)
    CGE             reduce using rule 26 (expr -> STRING .)
    RPAREN          reduce using rule 26 (expr -> STRING .)
    RSBRACKET       reduce using rule 26 (expr -> STRING .)
    COLON           reduce using rule 26 (expr -> STRING .)
    END_STATEMENT   reduce using rule 26 (expr -> STRING .)


state 16

    (49) compound_stmt -> func_def .

    FUNCTION        reduce using rule 49 (compound_stmt -> func_def .)
    IF              reduce using rule 49 (compound_stmt -> func_def .)
    WHILE           reduce using rule 49 (compound_stmt -> func_def .)
    FOR             reduce using rule 49 (compound_stmt -> func_def .)
    IDENTIFIER      reduce using rule 49 (compound_stmt -> func_def .)
    STRING          reduce using rule 49 (compound_stmt -> func_def .)
    LPAREN          reduce using rule 49 (compound_stmt -> func_def .)
    INTEGER         reduce using rule 49 (compound_stmt -> func_def .)
    DOUBLE          reduce using rule 49 (compound_stmt -> func_def .)
    RETURN          reduce using rule 49 (compound_stmt -> func_def .)
    BREAK           reduce using rule 49 (compound_stmt -> func_def .)
    CONTINUE        reduce using rule 49 (compound_stmt -> func_def .)
    TRUE            reduce using rule 49 (compound_stmt -> func_def .)
    FALSE           reduce using rule 49 (compound_stmt -> func_def .)
    DEDENT          reduce using rule 49 (compound_stmt -> func_def .)
    END_STATEMENT   reduce using rule 49 (compound_stmt -> func_def .)
    $end            reduce using rule 49 (compound_stmt -> func_def .)


state 17

    (4) stmt -> simple_stmt .

    FUNCTION        reduce using rule 4 (stmt -> simple_stmt .)
    IF              reduce using rule 4 (stmt -> simple_stmt .)
    WHILE           reduce using rule 4 (stmt -> simple_stmt .)
    FOR             reduce using rule 4 (stmt -> simple_stmt .)
    IDENTIFIER      reduce using rule 4 (stmt -> simple_stmt .)
    STRING          reduce using rule 4 (stmt -> simple_stmt .)
    LPAREN          reduce using rule 4 (stmt -> simple_stmt .)
    INTEGER         reduce using rule 4 (stmt -> simple_stmt .)
    DOUBLE          reduce using rule 4 (stmt -> simple_stmt .)
    RETURN          reduce using rule 4 (stmt -> simple_stmt .)
    BREAK           reduce using rule 4 (stmt -> simple_stmt .)
    CONTINUE        reduce using rule 4 (stmt -> simple_stmt .)
    TRUE            reduce using rule 4 (stmt -> simple_stmt .)
    FALSE           reduce using rule 4 (stmt -> simple_stmt .)
    DEDENT          reduce using rule 4 (stmt -> simple_stmt .)
    END_STATEMENT   reduce using rule 4 (stmt -> simple_stmt .)
    $end            reduce using rule 4 (stmt -> simple_stmt .)


state 18

    (7) small_stmt -> assignment .

    END_STATEMENT   reduce using rule 7 (small_stmt -> assignment .)


state 19

    (1) program -> stmt .
    (2) program -> stmt . program
    (1) program -> . stmt
    (2) program -> . stmt program
    (3) program -> . END_STATEMENT stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (49) compound_stmt -> . func_def
    (50) compound_stmt -> . if_stmt
    (51) compound_stmt -> . while_stmt
    (52) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . loop_stmt
    (53) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (63) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (60) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (61) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) loop_stmt -> . BREAK
    (15) loop_stmt -> . CONTINUE
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    $end            reduce using rule 1 (program -> stmt .)
    END_STATEMENT   shift and go to state 14
    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    RETURN          shift and go to state 6
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 30
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 2
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    const_decl                     shift and go to state 10
    program                        shift and go to state 44
    compound_stmt                  shift and go to state 13
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 19
    for_stmt                       shift and go to state 20
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    expr                           shift and go to state 27
    while_stmt                     shift and go to state 29

state 20

    (52) compound_stmt -> for_stmt .

    FUNCTION        reduce using rule 52 (compound_stmt -> for_stmt .)
    IF              reduce using rule 52 (compound_stmt -> for_stmt .)
    WHILE           reduce using rule 52 (compound_stmt -> for_stmt .)
    FOR             reduce using rule 52 (compound_stmt -> for_stmt .)
    IDENTIFIER      reduce using rule 52 (compound_stmt -> for_stmt .)
    STRING          reduce using rule 52 (compound_stmt -> for_stmt .)
    LPAREN          reduce using rule 52 (compound_stmt -> for_stmt .)
    INTEGER         reduce using rule 52 (compound_stmt -> for_stmt .)
    DOUBLE          reduce using rule 52 (compound_stmt -> for_stmt .)
    RETURN          reduce using rule 52 (compound_stmt -> for_stmt .)
    BREAK           reduce using rule 52 (compound_stmt -> for_stmt .)
    CONTINUE        reduce using rule 52 (compound_stmt -> for_stmt .)
    TRUE            reduce using rule 52 (compound_stmt -> for_stmt .)
    FALSE           reduce using rule 52 (compound_stmt -> for_stmt .)
    DEDENT          reduce using rule 52 (compound_stmt -> for_stmt .)
    END_STATEMENT   reduce using rule 52 (compound_stmt -> for_stmt .)
    $end            reduce using rule 52 (compound_stmt -> for_stmt .)


state 21

    (11) small_stmt -> loop_stmt .

    END_STATEMENT   reduce using rule 11 (small_stmt -> loop_stmt .)


state 22

    (27) expr -> LPAREN . expr RPAREN
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 45
    boolean                        shift and go to state 4

state 23

    (33) boolean -> FALSE .

    ADD_OP          reduce using rule 33 (boolean -> FALSE .)
    SUB_OP          reduce using rule 33 (boolean -> FALSE .)
    MUL_OP          reduce using rule 33 (boolean -> FALSE .)
    DIV_OP          reduce using rule 33 (boolean -> FALSE .)
    MOD_OP          reduce using rule 33 (boolean -> FALSE .)
    OR              reduce using rule 33 (boolean -> FALSE .)
    AND             reduce using rule 33 (boolean -> FALSE .)
    CEQ             reduce using rule 33 (boolean -> FALSE .)
    CNE             reduce using rule 33 (boolean -> FALSE .)
    CLT             reduce using rule 33 (boolean -> FALSE .)
    CLE             reduce using rule 33 (boolean -> FALSE .)
    CGT             reduce using rule 33 (boolean -> FALSE .)
    CGE             reduce using rule 33 (boolean -> FALSE .)
    END_STATEMENT   reduce using rule 33 (boolean -> FALSE .)
    COLON           reduce using rule 33 (boolean -> FALSE .)
    RPAREN          reduce using rule 33 (boolean -> FALSE .)
    RSBRACKET       reduce using rule 33 (boolean -> FALSE .)
    COMMA           reduce using rule 33 (boolean -> FALSE .)


state 24

    (63) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 46
    boolean                        shift and go to state 4

state 25

    (28) expr -> func_call .

    COMMA           reduce using rule 28 (expr -> func_call .)
    ADD_OP          reduce using rule 28 (expr -> func_call .)
    SUB_OP          reduce using rule 28 (expr -> func_call .)
    MUL_OP          reduce using rule 28 (expr -> func_call .)
    DIV_OP          reduce using rule 28 (expr -> func_call .)
    MOD_OP          reduce using rule 28 (expr -> func_call .)
    OR              reduce using rule 28 (expr -> func_call .)
    AND             reduce using rule 28 (expr -> func_call .)
    CEQ             reduce using rule 28 (expr -> func_call .)
    CNE             reduce using rule 28 (expr -> func_call .)
    CLT             reduce using rule 28 (expr -> func_call .)
    CLE             reduce using rule 28 (expr -> func_call .)
    CGT             reduce using rule 28 (expr -> func_call .)
    CGE             reduce using rule 28 (expr -> func_call .)
    RPAREN          reduce using rule 28 (expr -> func_call .)
    RSBRACKET       reduce using rule 28 (expr -> func_call .)
    COLON           reduce using rule 28 (expr -> func_call .)
    END_STATEMENT   reduce using rule 28 (expr -> func_call .)


state 26

    (50) compound_stmt -> if_stmt .

    FUNCTION        reduce using rule 50 (compound_stmt -> if_stmt .)
    IF              reduce using rule 50 (compound_stmt -> if_stmt .)
    WHILE           reduce using rule 50 (compound_stmt -> if_stmt .)
    FOR             reduce using rule 50 (compound_stmt -> if_stmt .)
    IDENTIFIER      reduce using rule 50 (compound_stmt -> if_stmt .)
    STRING          reduce using rule 50 (compound_stmt -> if_stmt .)
    LPAREN          reduce using rule 50 (compound_stmt -> if_stmt .)
    INTEGER         reduce using rule 50 (compound_stmt -> if_stmt .)
    DOUBLE          reduce using rule 50 (compound_stmt -> if_stmt .)
    RETURN          reduce using rule 50 (compound_stmt -> if_stmt .)
    BREAK           reduce using rule 50 (compound_stmt -> if_stmt .)
    CONTINUE        reduce using rule 50 (compound_stmt -> if_stmt .)
    TRUE            reduce using rule 50 (compound_stmt -> if_stmt .)
    FALSE           reduce using rule 50 (compound_stmt -> if_stmt .)
    DEDENT          reduce using rule 50 (compound_stmt -> if_stmt .)
    END_STATEMENT   reduce using rule 50 (compound_stmt -> if_stmt .)
    $end            reduce using rule 50 (compound_stmt -> if_stmt .)


state 27

    (9) small_stmt -> expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    END_STATEMENT   reduce using rule 9 (small_stmt -> expr .)
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 28

    (14) loop_stmt -> BREAK .

    END_STATEMENT   reduce using rule 14 (loop_stmt -> BREAK .)


state 29

    (51) compound_stmt -> while_stmt .

    FUNCTION        reduce using rule 51 (compound_stmt -> while_stmt .)
    IF              reduce using rule 51 (compound_stmt -> while_stmt .)
    WHILE           reduce using rule 51 (compound_stmt -> while_stmt .)
    FOR             reduce using rule 51 (compound_stmt -> while_stmt .)
    IDENTIFIER      reduce using rule 51 (compound_stmt -> while_stmt .)
    STRING          reduce using rule 51 (compound_stmt -> while_stmt .)
    LPAREN          reduce using rule 51 (compound_stmt -> while_stmt .)
    INTEGER         reduce using rule 51 (compound_stmt -> while_stmt .)
    DOUBLE          reduce using rule 51 (compound_stmt -> while_stmt .)
    RETURN          reduce using rule 51 (compound_stmt -> while_stmt .)
    BREAK           reduce using rule 51 (compound_stmt -> while_stmt .)
    CONTINUE        reduce using rule 51 (compound_stmt -> while_stmt .)
    TRUE            reduce using rule 51 (compound_stmt -> while_stmt .)
    FALSE           reduce using rule 51 (compound_stmt -> while_stmt .)
    DEDENT          reduce using rule 51 (compound_stmt -> while_stmt .)
    END_STATEMENT   reduce using rule 51 (compound_stmt -> while_stmt .)
    $end            reduce using rule 51 (compound_stmt -> while_stmt .)


state 30

    (15) loop_stmt -> CONTINUE .

    END_STATEMENT   reduce using rule 15 (loop_stmt -> CONTINUE .)


state 31

    (30) expr -> DOUBLE .

    COMMA           reduce using rule 30 (expr -> DOUBLE .)
    ADD_OP          reduce using rule 30 (expr -> DOUBLE .)
    SUB_OP          reduce using rule 30 (expr -> DOUBLE .)
    MUL_OP          reduce using rule 30 (expr -> DOUBLE .)
    DIV_OP          reduce using rule 30 (expr -> DOUBLE .)
    MOD_OP          reduce using rule 30 (expr -> DOUBLE .)
    OR              reduce using rule 30 (expr -> DOUBLE .)
    AND             reduce using rule 30 (expr -> DOUBLE .)
    CEQ             reduce using rule 30 (expr -> DOUBLE .)
    CNE             reduce using rule 30 (expr -> DOUBLE .)
    CLT             reduce using rule 30 (expr -> DOUBLE .)
    CLE             reduce using rule 30 (expr -> DOUBLE .)
    CGT             reduce using rule 30 (expr -> DOUBLE .)
    CGE             reduce using rule 30 (expr -> DOUBLE .)
    RPAREN          reduce using rule 30 (expr -> DOUBLE .)
    RSBRACKET       reduce using rule 30 (expr -> DOUBLE .)
    COLON           reduce using rule 30 (expr -> DOUBLE .)
    END_STATEMENT   reduce using rule 30 (expr -> DOUBLE .)


state 32

    (53) func_def -> FUNCTION head . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 62


state 33

    (54) head -> IDENTIFIER . LPAREN func_def_args RPAREN COLON
    (55) head -> IDENTIFIER . LPAREN RPAREN COLON

    LPAREN          shift and go to state 63


state 34

    (6) simple_stmt -> small_stmt END_STATEMENT .

    FUNCTION        reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    IF              reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    WHILE           reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    FOR             reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    IDENTIFIER      reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    STRING          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    LPAREN          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    INTEGER         reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    DOUBLE          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    RETURN          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    BREAK           reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    CONTINUE        reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    TRUE            reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    FALSE           reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    DEDENT          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    END_STATEMENT   reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    $end            reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)


state 35

    (24) expr -> IDENTIFIER .
    (25) expr -> IDENTIFIER . LSBRACKET expr RSBRACKET
    (20) func_call -> IDENTIFIER . LPAREN list_args RPAREN
    (21) func_call -> IDENTIFIER . LPAREN RPAREN

    COMMA           reduce using rule 24 (expr -> IDENTIFIER .)
    ADD_OP          reduce using rule 24 (expr -> IDENTIFIER .)
    SUB_OP          reduce using rule 24 (expr -> IDENTIFIER .)
    MUL_OP          reduce using rule 24 (expr -> IDENTIFIER .)
    DIV_OP          reduce using rule 24 (expr -> IDENTIFIER .)
    MOD_OP          reduce using rule 24 (expr -> IDENTIFIER .)
    OR              reduce using rule 24 (expr -> IDENTIFIER .)
    AND             reduce using rule 24 (expr -> IDENTIFIER .)
    CEQ             reduce using rule 24 (expr -> IDENTIFIER .)
    CNE             reduce using rule 24 (expr -> IDENTIFIER .)
    CLT             reduce using rule 24 (expr -> IDENTIFIER .)
    CLE             reduce using rule 24 (expr -> IDENTIFIER .)
    CGT             reduce using rule 24 (expr -> IDENTIFIER .)
    CGE             reduce using rule 24 (expr -> IDENTIFIER .)
    RPAREN          reduce using rule 24 (expr -> IDENTIFIER .)
    RSBRACKET       reduce using rule 24 (expr -> IDENTIFIER .)
    COLON           reduce using rule 24 (expr -> IDENTIFIER .)
    END_STATEMENT   reduce using rule 24 (expr -> IDENTIFIER .)
    LSBRACKET       shift and go to state 64
    LPAREN          shift and go to state 41


state 36

    (60) while_stmt -> WHILE expr . COLON END_STATEMENT INDENT body DEDENT
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    COLON           shift and go to state 65
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 37

    (13) return_stmt -> RETURN expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    END_STATEMENT   reduce using rule 13 (return_stmt -> RETURN expr .)
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 38

    (61) for_stmt -> FOR IDENTIFIER . IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> FOR IDENTIFIER . IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT

    IN              shift and go to state 66


state 39

    (19) const_decl -> IDENTIFIER CONST . expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 67
    boolean                        shift and go to state 4

state 40

    (18) assignment -> IDENTIFIER LSBRACKET . expr RSBRACKET ASSIGN expr
    (25) expr -> IDENTIFIER LSBRACKET . expr RSBRACKET
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 68
    boolean                        shift and go to state 4

state 41

    (20) func_call -> IDENTIFIER LPAREN . list_args RPAREN
    (21) func_call -> IDENTIFIER LPAREN . RPAREN
    (22) list_args -> . expr
    (23) list_args -> . expr COMMA list_args
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    RPAREN          shift and go to state 70
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 71
    boolean                        shift and go to state 4
    list_args                      shift and go to state 69

state 42

    (16) assignment -> IDENTIFIER ASSIGN . expr
    (17) assignment -> IDENTIFIER ASSIGN . LSBRACKET list_args RSBRACKET
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    LSBRACKET       shift and go to state 72
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 73
    boolean                        shift and go to state 4

state 43

    (3) program -> END_STATEMENT stmt . program
    (1) program -> . stmt
    (2) program -> . stmt program
    (3) program -> . END_STATEMENT stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (49) compound_stmt -> . func_def
    (50) compound_stmt -> . if_stmt
    (51) compound_stmt -> . while_stmt
    (52) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . loop_stmt
    (53) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (63) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (60) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (61) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) loop_stmt -> . BREAK
    (15) loop_stmt -> . CONTINUE
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    END_STATEMENT   shift and go to state 14
    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    RETURN          shift and go to state 6
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 30
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 2
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    const_decl                     shift and go to state 10
    program                        shift and go to state 74
    compound_stmt                  shift and go to state 13
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 19
    for_stmt                       shift and go to state 20
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    expr                           shift and go to state 27
    while_stmt                     shift and go to state 29

state 44

    (2) program -> stmt program .

    $end            reduce using rule 2 (program -> stmt program .)


state 45

    (27) expr -> LPAREN expr . RPAREN
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    RPAREN          shift and go to state 75
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 46

    (63) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    COLON           shift and go to state 76
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 47

    (42) comb_op -> AND .

    IDENTIFIER      reduce using rule 42 (comb_op -> AND .)
    STRING          reduce using rule 42 (comb_op -> AND .)
    LPAREN          reduce using rule 42 (comb_op -> AND .)
    INTEGER         reduce using rule 42 (comb_op -> AND .)
    DOUBLE          reduce using rule 42 (comb_op -> AND .)
    TRUE            reduce using rule 42 (comb_op -> AND .)
    FALSE           reduce using rule 42 (comb_op -> AND .)


state 48

    (46) comp_op -> CLE .

    IDENTIFIER      reduce using rule 46 (comp_op -> CLE .)
    STRING          reduce using rule 46 (comp_op -> CLE .)
    LPAREN          reduce using rule 46 (comp_op -> CLE .)
    INTEGER         reduce using rule 46 (comp_op -> CLE .)
    DOUBLE          reduce using rule 46 (comp_op -> CLE .)
    TRUE            reduce using rule 46 (comp_op -> CLE .)
    FALSE           reduce using rule 46 (comp_op -> CLE .)


state 49

    (36) expr -> expr MUL_OP . expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 77
    boolean                        shift and go to state 4

state 50

    (47) comp_op -> CGT .

    IDENTIFIER      reduce using rule 47 (comp_op -> CGT .)
    STRING          reduce using rule 47 (comp_op -> CGT .)
    LPAREN          reduce using rule 47 (comp_op -> CGT .)
    INTEGER         reduce using rule 47 (comp_op -> CGT .)
    DOUBLE          reduce using rule 47 (comp_op -> CGT .)
    TRUE            reduce using rule 47 (comp_op -> CGT .)
    FALSE           reduce using rule 47 (comp_op -> CGT .)


state 51

    (48) comp_op -> CGE .

    IDENTIFIER      reduce using rule 48 (comp_op -> CGE .)
    STRING          reduce using rule 48 (comp_op -> CGE .)
    LPAREN          reduce using rule 48 (comp_op -> CGE .)
    INTEGER         reduce using rule 48 (comp_op -> CGE .)
    DOUBLE          reduce using rule 48 (comp_op -> CGE .)
    TRUE            reduce using rule 48 (comp_op -> CGE .)
    FALSE           reduce using rule 48 (comp_op -> CGE .)


state 52

    (39) expr -> expr comb_op . expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 78
    boolean                        shift and go to state 4

state 53

    (40) expr -> expr comp_op . expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 79
    boolean                        shift and go to state 4

state 54

    (35) expr -> expr SUB_OP . expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 80
    boolean                        shift and go to state 4

state 55

    (37) expr -> expr DIV_OP . expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 81
    boolean                        shift and go to state 4

state 56

    (44) comp_op -> CNE .

    IDENTIFIER      reduce using rule 44 (comp_op -> CNE .)
    STRING          reduce using rule 44 (comp_op -> CNE .)
    LPAREN          reduce using rule 44 (comp_op -> CNE .)
    INTEGER         reduce using rule 44 (comp_op -> CNE .)
    DOUBLE          reduce using rule 44 (comp_op -> CNE .)
    TRUE            reduce using rule 44 (comp_op -> CNE .)
    FALSE           reduce using rule 44 (comp_op -> CNE .)


state 57

    (43) comp_op -> CEQ .

    IDENTIFIER      reduce using rule 43 (comp_op -> CEQ .)
    STRING          reduce using rule 43 (comp_op -> CEQ .)
    LPAREN          reduce using rule 43 (comp_op -> CEQ .)
    INTEGER         reduce using rule 43 (comp_op -> CEQ .)
    DOUBLE          reduce using rule 43 (comp_op -> CEQ .)
    TRUE            reduce using rule 43 (comp_op -> CEQ .)
    FALSE           reduce using rule 43 (comp_op -> CEQ .)


state 58

    (34) expr -> expr ADD_OP . expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 82
    boolean                        shift and go to state 4

state 59

    (45) comp_op -> CLT .

    IDENTIFIER      reduce using rule 45 (comp_op -> CLT .)
    STRING          reduce using rule 45 (comp_op -> CLT .)
    LPAREN          reduce using rule 45 (comp_op -> CLT .)
    INTEGER         reduce using rule 45 (comp_op -> CLT .)
    DOUBLE          reduce using rule 45 (comp_op -> CLT .)
    TRUE            reduce using rule 45 (comp_op -> CLT .)
    FALSE           reduce using rule 45 (comp_op -> CLT .)


state 60

    (38) expr -> expr MOD_OP . expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 83
    boolean                        shift and go to state 4

state 61

    (41) comb_op -> OR .

    IDENTIFIER      reduce using rule 41 (comb_op -> OR .)
    STRING          reduce using rule 41 (comb_op -> OR .)
    LPAREN          reduce using rule 41 (comb_op -> OR .)
    INTEGER         reduce using rule 41 (comb_op -> OR .)
    DOUBLE          reduce using rule 41 (comb_op -> OR .)
    TRUE            reduce using rule 41 (comb_op -> OR .)
    FALSE           reduce using rule 41 (comb_op -> OR .)


state 62

    (53) func_def -> FUNCTION head END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 84


state 63

    (54) head -> IDENTIFIER LPAREN . func_def_args RPAREN COLON
    (55) head -> IDENTIFIER LPAREN . RPAREN COLON
    (56) func_def_args -> . IDENTIFIER
    (57) func_def_args -> . IDENTIFIER COMMA func_def_args

    RPAREN          shift and go to state 86
    IDENTIFIER      shift and go to state 87

    func_def_args                  shift and go to state 85

state 64

    (25) expr -> IDENTIFIER LSBRACKET . expr RSBRACKET
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 88
    boolean                        shift and go to state 4

state 65

    (60) while_stmt -> WHILE expr COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 89


state 66

    (61) for_stmt -> FOR IDENTIFIER IN . RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> FOR IDENTIFIER IN . IDENTIFIER COLON END_STATEMENT INDENT body DEDENT

    RANGE           shift and go to state 90
    IDENTIFIER      shift and go to state 91


state 67

    (19) const_decl -> IDENTIFIER CONST expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    END_STATEMENT   reduce using rule 19 (const_decl -> IDENTIFIER CONST expr .)
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 68

    (18) assignment -> IDENTIFIER LSBRACKET expr . RSBRACKET ASSIGN expr
    (25) expr -> IDENTIFIER LSBRACKET expr . RSBRACKET
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    RSBRACKET       shift and go to state 92
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 69

    (20) func_call -> IDENTIFIER LPAREN list_args . RPAREN

    RPAREN          shift and go to state 93


state 70

    (21) func_call -> IDENTIFIER LPAREN RPAREN .

    COMMA           reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    ADD_OP          reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    SUB_OP          reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    MUL_OP          reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    DIV_OP          reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    MOD_OP          reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    OR              reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    AND             reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CEQ             reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CNE             reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CLT             reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CLE             reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CGT             reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CGE             reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    RSBRACKET       reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    END_STATEMENT   reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)
    COLON           reduce using rule 21 (func_call -> IDENTIFIER LPAREN RPAREN .)


state 71

    (22) list_args -> expr .
    (23) list_args -> expr . COMMA list_args
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    RPAREN          reduce using rule 22 (list_args -> expr .)
    RSBRACKET       reduce using rule 22 (list_args -> expr .)
    COMMA           shift and go to state 94
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 72

    (17) assignment -> IDENTIFIER ASSIGN LSBRACKET . list_args RSBRACKET
    (22) list_args -> . expr
    (23) list_args -> . expr COMMA list_args
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 71
    boolean                        shift and go to state 4
    list_args                      shift and go to state 95

state 73

    (16) assignment -> IDENTIFIER ASSIGN expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    END_STATEMENT   reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expr .)
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 74

    (3) program -> END_STATEMENT stmt program .

    $end            reduce using rule 3 (program -> END_STATEMENT stmt program .)


state 75

    (27) expr -> LPAREN expr RPAREN .

    COMMA           reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    ADD_OP          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    SUB_OP          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    MUL_OP          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    DIV_OP          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    MOD_OP          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    CEQ             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    CNE             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    CLT             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    CLE             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    CGT             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    CGE             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    RSBRACKET       reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    END_STATEMENT   reduce using rule 27 (expr -> LPAREN expr RPAREN .)


state 76

    (63) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 96


state 77

    (36) expr -> expr MUL_OP expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    COMMA           reduce using rule 36 (expr -> expr MUL_OP expr .)
    ADD_OP          reduce using rule 36 (expr -> expr MUL_OP expr .)
    SUB_OP          reduce using rule 36 (expr -> expr MUL_OP expr .)
    MUL_OP          reduce using rule 36 (expr -> expr MUL_OP expr .)
    DIV_OP          reduce using rule 36 (expr -> expr MUL_OP expr .)
    MOD_OP          reduce using rule 36 (expr -> expr MUL_OP expr .)
    OR              reduce using rule 36 (expr -> expr MUL_OP expr .)
    AND             reduce using rule 36 (expr -> expr MUL_OP expr .)
    CEQ             reduce using rule 36 (expr -> expr MUL_OP expr .)
    CNE             reduce using rule 36 (expr -> expr MUL_OP expr .)
    CLT             reduce using rule 36 (expr -> expr MUL_OP expr .)
    CLE             reduce using rule 36 (expr -> expr MUL_OP expr .)
    CGT             reduce using rule 36 (expr -> expr MUL_OP expr .)
    CGE             reduce using rule 36 (expr -> expr MUL_OP expr .)
    RPAREN          reduce using rule 36 (expr -> expr MUL_OP expr .)
    RSBRACKET       reduce using rule 36 (expr -> expr MUL_OP expr .)
    COLON           reduce using rule 36 (expr -> expr MUL_OP expr .)
    END_STATEMENT   reduce using rule 36 (expr -> expr MUL_OP expr .)

  ! ADD_OP          [ shift and go to state 58 ]
  ! SUB_OP          [ shift and go to state 54 ]
  ! MUL_OP          [ shift and go to state 49 ]
  ! DIV_OP          [ shift and go to state 55 ]
  ! MOD_OP          [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! AND             [ shift and go to state 47 ]
  ! CEQ             [ shift and go to state 57 ]
  ! CNE             [ shift and go to state 56 ]
  ! CLT             [ shift and go to state 59 ]
  ! CLE             [ shift and go to state 48 ]
  ! CGT             [ shift and go to state 50 ]
  ! CGE             [ shift and go to state 51 ]

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 78

    (39) expr -> expr comb_op expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
  ! shift/reduce conflict for MUL_OP resolved as shift
  ! shift/reduce conflict for DIV_OP resolved as shift
  ! shift/reduce conflict for MOD_OP resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for CEQ resolved as shift
  ! shift/reduce conflict for CNE resolved as shift
  ! shift/reduce conflict for CLT resolved as shift
  ! shift/reduce conflict for CLE resolved as shift
  ! shift/reduce conflict for CGT resolved as shift
  ! shift/reduce conflict for CGE resolved as shift
    COMMA           reduce using rule 39 (expr -> expr comb_op expr .)
    RPAREN          reduce using rule 39 (expr -> expr comb_op expr .)
    RSBRACKET       reduce using rule 39 (expr -> expr comb_op expr .)
    COLON           reduce using rule 39 (expr -> expr comb_op expr .)
    END_STATEMENT   reduce using rule 39 (expr -> expr comb_op expr .)
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

  ! ADD_OP          [ reduce using rule 39 (expr -> expr comb_op expr .) ]
  ! SUB_OP          [ reduce using rule 39 (expr -> expr comb_op expr .) ]
  ! MUL_OP          [ reduce using rule 39 (expr -> expr comb_op expr .) ]
  ! DIV_OP          [ reduce using rule 39 (expr -> expr comb_op expr .) ]
  ! MOD_OP          [ reduce using rule 39 (expr -> expr comb_op expr .) ]
  ! OR              [ reduce using rule 39 (expr -> expr comb_op expr .) ]
  ! AND             [ reduce using rule 39 (expr -> expr comb_op expr .) ]
  ! CEQ             [ reduce using rule 39 (expr -> expr comb_op expr .) ]
  ! CNE             [ reduce using rule 39 (expr -> expr comb_op expr .) ]
  ! CLT             [ reduce using rule 39 (expr -> expr comb_op expr .) ]
  ! CLE             [ reduce using rule 39 (expr -> expr comb_op expr .) ]
  ! CGT             [ reduce using rule 39 (expr -> expr comb_op expr .) ]
  ! CGE             [ reduce using rule 39 (expr -> expr comb_op expr .) ]

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 79

    (40) expr -> expr comp_op expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
  ! shift/reduce conflict for MUL_OP resolved as shift
  ! shift/reduce conflict for DIV_OP resolved as shift
  ! shift/reduce conflict for MOD_OP resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for CEQ resolved as shift
  ! shift/reduce conflict for CNE resolved as shift
  ! shift/reduce conflict for CLT resolved as shift
  ! shift/reduce conflict for CLE resolved as shift
  ! shift/reduce conflict for CGT resolved as shift
  ! shift/reduce conflict for CGE resolved as shift
    COMMA           reduce using rule 40 (expr -> expr comp_op expr .)
    RPAREN          reduce using rule 40 (expr -> expr comp_op expr .)
    RSBRACKET       reduce using rule 40 (expr -> expr comp_op expr .)
    COLON           reduce using rule 40 (expr -> expr comp_op expr .)
    END_STATEMENT   reduce using rule 40 (expr -> expr comp_op expr .)
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

  ! ADD_OP          [ reduce using rule 40 (expr -> expr comp_op expr .) ]
  ! SUB_OP          [ reduce using rule 40 (expr -> expr comp_op expr .) ]
  ! MUL_OP          [ reduce using rule 40 (expr -> expr comp_op expr .) ]
  ! DIV_OP          [ reduce using rule 40 (expr -> expr comp_op expr .) ]
  ! MOD_OP          [ reduce using rule 40 (expr -> expr comp_op expr .) ]
  ! OR              [ reduce using rule 40 (expr -> expr comp_op expr .) ]
  ! AND             [ reduce using rule 40 (expr -> expr comp_op expr .) ]
  ! CEQ             [ reduce using rule 40 (expr -> expr comp_op expr .) ]
  ! CNE             [ reduce using rule 40 (expr -> expr comp_op expr .) ]
  ! CLT             [ reduce using rule 40 (expr -> expr comp_op expr .) ]
  ! CLE             [ reduce using rule 40 (expr -> expr comp_op expr .) ]
  ! CGT             [ reduce using rule 40 (expr -> expr comp_op expr .) ]
  ! CGE             [ reduce using rule 40 (expr -> expr comp_op expr .) ]

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 80

    (35) expr -> expr SUB_OP expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    COMMA           reduce using rule 35 (expr -> expr SUB_OP expr .)
    ADD_OP          reduce using rule 35 (expr -> expr SUB_OP expr .)
    SUB_OP          reduce using rule 35 (expr -> expr SUB_OP expr .)
    OR              reduce using rule 35 (expr -> expr SUB_OP expr .)
    AND             reduce using rule 35 (expr -> expr SUB_OP expr .)
    CEQ             reduce using rule 35 (expr -> expr SUB_OP expr .)
    CNE             reduce using rule 35 (expr -> expr SUB_OP expr .)
    CLT             reduce using rule 35 (expr -> expr SUB_OP expr .)
    CLE             reduce using rule 35 (expr -> expr SUB_OP expr .)
    CGT             reduce using rule 35 (expr -> expr SUB_OP expr .)
    CGE             reduce using rule 35 (expr -> expr SUB_OP expr .)
    RPAREN          reduce using rule 35 (expr -> expr SUB_OP expr .)
    RSBRACKET       reduce using rule 35 (expr -> expr SUB_OP expr .)
    COLON           reduce using rule 35 (expr -> expr SUB_OP expr .)
    END_STATEMENT   reduce using rule 35 (expr -> expr SUB_OP expr .)
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60

  ! MUL_OP          [ reduce using rule 35 (expr -> expr SUB_OP expr .) ]
  ! DIV_OP          [ reduce using rule 35 (expr -> expr SUB_OP expr .) ]
  ! MOD_OP          [ reduce using rule 35 (expr -> expr SUB_OP expr .) ]
  ! ADD_OP          [ shift and go to state 58 ]
  ! SUB_OP          [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]
  ! AND             [ shift and go to state 47 ]
  ! CEQ             [ shift and go to state 57 ]
  ! CNE             [ shift and go to state 56 ]
  ! CLT             [ shift and go to state 59 ]
  ! CLE             [ shift and go to state 48 ]
  ! CGT             [ shift and go to state 50 ]
  ! CGE             [ shift and go to state 51 ]

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 81

    (37) expr -> expr DIV_OP expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    COMMA           reduce using rule 37 (expr -> expr DIV_OP expr .)
    ADD_OP          reduce using rule 37 (expr -> expr DIV_OP expr .)
    SUB_OP          reduce using rule 37 (expr -> expr DIV_OP expr .)
    MUL_OP          reduce using rule 37 (expr -> expr DIV_OP expr .)
    DIV_OP          reduce using rule 37 (expr -> expr DIV_OP expr .)
    MOD_OP          reduce using rule 37 (expr -> expr DIV_OP expr .)
    OR              reduce using rule 37 (expr -> expr DIV_OP expr .)
    AND             reduce using rule 37 (expr -> expr DIV_OP expr .)
    CEQ             reduce using rule 37 (expr -> expr DIV_OP expr .)
    CNE             reduce using rule 37 (expr -> expr DIV_OP expr .)
    CLT             reduce using rule 37 (expr -> expr DIV_OP expr .)
    CLE             reduce using rule 37 (expr -> expr DIV_OP expr .)
    CGT             reduce using rule 37 (expr -> expr DIV_OP expr .)
    CGE             reduce using rule 37 (expr -> expr DIV_OP expr .)
    RPAREN          reduce using rule 37 (expr -> expr DIV_OP expr .)
    RSBRACKET       reduce using rule 37 (expr -> expr DIV_OP expr .)
    COLON           reduce using rule 37 (expr -> expr DIV_OP expr .)
    END_STATEMENT   reduce using rule 37 (expr -> expr DIV_OP expr .)

  ! ADD_OP          [ shift and go to state 58 ]
  ! SUB_OP          [ shift and go to state 54 ]
  ! MUL_OP          [ shift and go to state 49 ]
  ! DIV_OP          [ shift and go to state 55 ]
  ! MOD_OP          [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! AND             [ shift and go to state 47 ]
  ! CEQ             [ shift and go to state 57 ]
  ! CNE             [ shift and go to state 56 ]
  ! CLT             [ shift and go to state 59 ]
  ! CLE             [ shift and go to state 48 ]
  ! CGT             [ shift and go to state 50 ]
  ! CGE             [ shift and go to state 51 ]

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 82

    (34) expr -> expr ADD_OP expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    COMMA           reduce using rule 34 (expr -> expr ADD_OP expr .)
    ADD_OP          reduce using rule 34 (expr -> expr ADD_OP expr .)
    SUB_OP          reduce using rule 34 (expr -> expr ADD_OP expr .)
    OR              reduce using rule 34 (expr -> expr ADD_OP expr .)
    AND             reduce using rule 34 (expr -> expr ADD_OP expr .)
    CEQ             reduce using rule 34 (expr -> expr ADD_OP expr .)
    CNE             reduce using rule 34 (expr -> expr ADD_OP expr .)
    CLT             reduce using rule 34 (expr -> expr ADD_OP expr .)
    CLE             reduce using rule 34 (expr -> expr ADD_OP expr .)
    CGT             reduce using rule 34 (expr -> expr ADD_OP expr .)
    CGE             reduce using rule 34 (expr -> expr ADD_OP expr .)
    RPAREN          reduce using rule 34 (expr -> expr ADD_OP expr .)
    RSBRACKET       reduce using rule 34 (expr -> expr ADD_OP expr .)
    COLON           reduce using rule 34 (expr -> expr ADD_OP expr .)
    END_STATEMENT   reduce using rule 34 (expr -> expr ADD_OP expr .)
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60

  ! MUL_OP          [ reduce using rule 34 (expr -> expr ADD_OP expr .) ]
  ! DIV_OP          [ reduce using rule 34 (expr -> expr ADD_OP expr .) ]
  ! MOD_OP          [ reduce using rule 34 (expr -> expr ADD_OP expr .) ]
  ! ADD_OP          [ shift and go to state 58 ]
  ! SUB_OP          [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]
  ! AND             [ shift and go to state 47 ]
  ! CEQ             [ shift and go to state 57 ]
  ! CNE             [ shift and go to state 56 ]
  ! CLT             [ shift and go to state 59 ]
  ! CLE             [ shift and go to state 48 ]
  ! CGT             [ shift and go to state 50 ]
  ! CGE             [ shift and go to state 51 ]

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 83

    (38) expr -> expr MOD_OP expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    COMMA           reduce using rule 38 (expr -> expr MOD_OP expr .)
    ADD_OP          reduce using rule 38 (expr -> expr MOD_OP expr .)
    SUB_OP          reduce using rule 38 (expr -> expr MOD_OP expr .)
    MUL_OP          reduce using rule 38 (expr -> expr MOD_OP expr .)
    DIV_OP          reduce using rule 38 (expr -> expr MOD_OP expr .)
    MOD_OP          reduce using rule 38 (expr -> expr MOD_OP expr .)
    OR              reduce using rule 38 (expr -> expr MOD_OP expr .)
    AND             reduce using rule 38 (expr -> expr MOD_OP expr .)
    CEQ             reduce using rule 38 (expr -> expr MOD_OP expr .)
    CNE             reduce using rule 38 (expr -> expr MOD_OP expr .)
    CLT             reduce using rule 38 (expr -> expr MOD_OP expr .)
    CLE             reduce using rule 38 (expr -> expr MOD_OP expr .)
    CGT             reduce using rule 38 (expr -> expr MOD_OP expr .)
    CGE             reduce using rule 38 (expr -> expr MOD_OP expr .)
    RPAREN          reduce using rule 38 (expr -> expr MOD_OP expr .)
    RSBRACKET       reduce using rule 38 (expr -> expr MOD_OP expr .)
    COLON           reduce using rule 38 (expr -> expr MOD_OP expr .)
    END_STATEMENT   reduce using rule 38 (expr -> expr MOD_OP expr .)

  ! ADD_OP          [ shift and go to state 58 ]
  ! SUB_OP          [ shift and go to state 54 ]
  ! MUL_OP          [ shift and go to state 49 ]
  ! DIV_OP          [ shift and go to state 55 ]
  ! MOD_OP          [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! AND             [ shift and go to state 47 ]
  ! CEQ             [ shift and go to state 57 ]
  ! CNE             [ shift and go to state 56 ]
  ! CLT             [ shift and go to state 59 ]
  ! CLE             [ shift and go to state 48 ]
  ! CGT             [ shift and go to state 50 ]
  ! CGE             [ shift and go to state 51 ]

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 84

    (53) func_def -> FUNCTION head END_STATEMENT INDENT . body DEDENT
    (58) body -> . stmt
    (59) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (49) compound_stmt -> . func_def
    (50) compound_stmt -> . if_stmt
    (51) compound_stmt -> . while_stmt
    (52) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . loop_stmt
    (53) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (63) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (60) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (61) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) loop_stmt -> . BREAK
    (15) loop_stmt -> . CONTINUE
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    RETURN          shift and go to state 6
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 30
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 97
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 98
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 29
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    expr                           shift and go to state 27
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 13

state 85

    (54) head -> IDENTIFIER LPAREN func_def_args . RPAREN COLON

    RPAREN          shift and go to state 99


state 86

    (55) head -> IDENTIFIER LPAREN RPAREN . COLON

    COLON           shift and go to state 100


state 87

    (56) func_def_args -> IDENTIFIER .
    (57) func_def_args -> IDENTIFIER . COMMA func_def_args

    RPAREN          reduce using rule 56 (func_def_args -> IDENTIFIER .)
    COMMA           shift and go to state 101


state 88

    (25) expr -> IDENTIFIER LSBRACKET expr . RSBRACKET
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    RSBRACKET       shift and go to state 102
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 89

    (60) while_stmt -> WHILE expr COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 103


state 90

    (61) for_stmt -> FOR IDENTIFIER IN RANGE . LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT

    LPAREN          shift and go to state 104


state 91

    (62) for_stmt -> FOR IDENTIFIER IN IDENTIFIER . COLON END_STATEMENT INDENT body DEDENT

    COLON           shift and go to state 105


state 92

    (18) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET . ASSIGN expr
    (25) expr -> IDENTIFIER LSBRACKET expr RSBRACKET .

    ASSIGN          shift and go to state 106
    ADD_OP          reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    SUB_OP          reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MUL_OP          reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    DIV_OP          reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MOD_OP          reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    OR              reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    AND             reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CEQ             reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CNE             reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLT             reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLE             reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGT             reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGE             reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    END_STATEMENT   reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)


state 93

    (20) func_call -> IDENTIFIER LPAREN list_args RPAREN .

    COMMA           reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    ADD_OP          reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    SUB_OP          reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    MUL_OP          reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    DIV_OP          reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    MOD_OP          reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    OR              reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    AND             reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CEQ             reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CNE             reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CLT             reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CLE             reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CGT             reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CGE             reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    RPAREN          reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    RSBRACKET       reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    END_STATEMENT   reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    COLON           reduce using rule 20 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)


state 94

    (23) list_args -> expr COMMA . list_args
    (22) list_args -> . expr
    (23) list_args -> . expr COMMA list_args
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 71
    boolean                        shift and go to state 4
    list_args                      shift and go to state 107

state 95

    (17) assignment -> IDENTIFIER ASSIGN LSBRACKET list_args . RSBRACKET

    RSBRACKET       shift and go to state 108


state 96

    (63) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT
    (64) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT elseif_list
    (65) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    INDENT          shift and go to state 109


state 97

    (53) func_def -> FUNCTION head END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 110


state 98

    (58) body -> stmt .
    (59) body -> stmt . body
    (58) body -> . stmt
    (59) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (49) compound_stmt -> . func_def
    (50) compound_stmt -> . if_stmt
    (51) compound_stmt -> . while_stmt
    (52) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . loop_stmt
    (53) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (63) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (60) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (61) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) loop_stmt -> . BREAK
    (15) loop_stmt -> . CONTINUE
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    DEDENT          reduce using rule 58 (body -> stmt .)
    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    RETURN          shift and go to state 6
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 30
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 111
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 98
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 29
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    expr                           shift and go to state 27
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 13

state 99

    (54) head -> IDENTIFIER LPAREN func_def_args RPAREN . COLON

    COLON           shift and go to state 112


state 100

    (55) head -> IDENTIFIER LPAREN RPAREN COLON .

    END_STATEMENT   reduce using rule 55 (head -> IDENTIFIER LPAREN RPAREN COLON .)


state 101

    (57) func_def_args -> IDENTIFIER COMMA . func_def_args
    (56) func_def_args -> . IDENTIFIER
    (57) func_def_args -> . IDENTIFIER COMMA func_def_args

    IDENTIFIER      shift and go to state 87

    func_def_args                  shift and go to state 113

state 102

    (25) expr -> IDENTIFIER LSBRACKET expr RSBRACKET .

    COMMA           reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    ADD_OP          reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    SUB_OP          reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MUL_OP          reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    DIV_OP          reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MOD_OP          reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    OR              reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    AND             reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CEQ             reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CNE             reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLT             reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLE             reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGT             reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGE             reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    RPAREN          reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    RSBRACKET       reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    COLON           reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    END_STATEMENT   reduce using rule 25 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)


state 103

    (60) while_stmt -> WHILE expr COLON END_STATEMENT INDENT . body DEDENT
    (58) body -> . stmt
    (59) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (49) compound_stmt -> . func_def
    (50) compound_stmt -> . if_stmt
    (51) compound_stmt -> . while_stmt
    (52) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . loop_stmt
    (53) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (63) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (60) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (61) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) loop_stmt -> . BREAK
    (15) loop_stmt -> . CONTINUE
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    RETURN          shift and go to state 6
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 30
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 114
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 27
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 98
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 29
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 13

state 104

    (61) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN . expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 115
    boolean                        shift and go to state 4

state 105

    (62) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 116


state 106

    (18) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN . expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 117
    boolean                        shift and go to state 4

state 107

    (23) list_args -> expr COMMA list_args .

    RPAREN          reduce using rule 23 (list_args -> expr COMMA list_args .)
    RSBRACKET       reduce using rule 23 (list_args -> expr COMMA list_args .)


state 108

    (17) assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET .

    END_STATEMENT   reduce using rule 17 (assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET .)


state 109

    (63) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT
    (64) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT elseif_list
    (65) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (58) body -> . stmt
    (59) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (49) compound_stmt -> . func_def
    (50) compound_stmt -> . if_stmt
    (51) compound_stmt -> . while_stmt
    (52) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . loop_stmt
    (53) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (63) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (60) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (61) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) loop_stmt -> . BREAK
    (15) loop_stmt -> . CONTINUE
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    RETURN          shift and go to state 6
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 30
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 118
    func_call                      shift and go to state 25
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 27
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 98
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 29
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 13
    if_stmt                        shift and go to state 26

state 110

    (53) func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .

    END_STATEMENT   reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 53 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)


state 111

    (59) body -> stmt body .

    DEDENT          reduce using rule 59 (body -> stmt body .)


state 112

    (54) head -> IDENTIFIER LPAREN func_def_args RPAREN COLON .

    END_STATEMENT   reduce using rule 54 (head -> IDENTIFIER LPAREN func_def_args RPAREN COLON .)


state 113

    (57) func_def_args -> IDENTIFIER COMMA func_def_args .

    RPAREN          reduce using rule 57 (func_def_args -> IDENTIFIER COMMA func_def_args .)


state 114

    (60) while_stmt -> WHILE expr COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 119


state 115

    (61) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr . COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    COMMA           shift and go to state 120
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 116

    (62) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 121


state 117

    (18) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    END_STATEMENT   reduce using rule 18 (assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr .)
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 118

    (63) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT
    (64) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT elseif_list
    (65) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    DEDENT          shift and go to state 122


state 119

    (60) while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .

    FUNCTION        reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 60 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)


state 120

    (61) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA . expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 123
    boolean                        shift and go to state 4

state 121

    (62) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT . body DEDENT
    (58) body -> . stmt
    (59) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (49) compound_stmt -> . func_def
    (50) compound_stmt -> . if_stmt
    (51) compound_stmt -> . while_stmt
    (52) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . loop_stmt
    (53) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (63) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (60) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (61) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) loop_stmt -> . BREAK
    (15) loop_stmt -> . CONTINUE
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    RETURN          shift and go to state 6
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 30
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 124
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 98
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 29
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    expr                           shift and go to state 27
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 13

state 122

    (63) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .
    (64) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT . elseif_list
    (65) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT . elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT . ELSE COLON END_STATEMENT INDENT body DEDENT
    (67) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT
    (68) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list

    FUNCTION        reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 63 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            shift and go to state 126
    ELSEIF          shift and go to state 127

    elseif_list                    shift and go to state 125

state 123

    (61) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr . RPAREN COLON END_STATEMENT INDENT body DEDENT
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    RPAREN          shift and go to state 128
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 124

    (62) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 129


state 125

    (64) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .
    (65) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list . ELSE COLON END_STATEMENT INDENT body DEDENT

    FUNCTION        reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    IF              reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    WHILE           reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FOR             reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    IDENTIFIER      reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    STRING          reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    LPAREN          reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    INTEGER         reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DOUBLE          reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    RETURN          reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    BREAK           reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    CONTINUE        reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    TRUE            reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FALSE           reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DEDENT          reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    END_STATEMENT   reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    $end            reduce using rule 64 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    ELSE            shift and go to state 130


state 126

    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE . COLON END_STATEMENT INDENT body DEDENT

    COLON           shift and go to state 131


state 127

    (67) elseif_list -> ELSEIF . expr COLON END_STATEMENT INDENT body DEDENT
    (68) elseif_list -> ELSEIF . expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 132
    boolean                        shift and go to state 4

state 128

    (61) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN . COLON END_STATEMENT INDENT body DEDENT

    COLON           shift and go to state 133


state 129

    (62) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .

    END_STATEMENT   reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 62 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)


state 130

    (65) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE . COLON END_STATEMENT INDENT body DEDENT

    COLON           shift and go to state 134


state 131

    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 135


state 132

    (67) elseif_list -> ELSEIF expr . COLON END_STATEMENT INDENT body DEDENT
    (68) elseif_list -> ELSEIF expr . COLON END_STATEMENT INDENT body DEDENT elseif_list
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . comb_op expr
    (40) expr -> expr . comp_op expr
    (41) comb_op -> . OR
    (42) comb_op -> . AND
    (43) comp_op -> . CEQ
    (44) comp_op -> . CNE
    (45) comp_op -> . CLT
    (46) comp_op -> . CLE
    (47) comp_op -> . CGT
    (48) comp_op -> . CGE

    COLON           shift and go to state 136
    ADD_OP          shift and go to state 58
    SUB_OP          shift and go to state 54
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 55
    MOD_OP          shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 47
    CEQ             shift and go to state 57
    CNE             shift and go to state 56
    CLT             shift and go to state 59
    CLE             shift and go to state 48
    CGT             shift and go to state 50
    CGE             shift and go to state 51

    comp_op                        shift and go to state 53
    comb_op                        shift and go to state 52

state 133

    (61) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 137


state 134

    (65) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 138


state 135

    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 139


state 136

    (67) elseif_list -> ELSEIF expr COLON . END_STATEMENT INDENT body DEDENT
    (68) elseif_list -> ELSEIF expr COLON . END_STATEMENT INDENT body DEDENT elseif_list

    END_STATEMENT   shift and go to state 140


state 137

    (61) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 141


state 138

    (65) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 142


state 139

    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT . body DEDENT
    (58) body -> . stmt
    (59) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (49) compound_stmt -> . func_def
    (50) compound_stmt -> . if_stmt
    (51) compound_stmt -> . while_stmt
    (52) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . loop_stmt
    (53) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (63) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (60) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (61) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) loop_stmt -> . BREAK
    (15) loop_stmt -> . CONTINUE
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    RETURN          shift and go to state 6
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 30
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 143
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 27
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 98
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 29
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 13

state 140

    (67) elseif_list -> ELSEIF expr COLON END_STATEMENT . INDENT body DEDENT
    (68) elseif_list -> ELSEIF expr COLON END_STATEMENT . INDENT body DEDENT elseif_list

    INDENT          shift and go to state 144


state 141

    (61) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT . body DEDENT
    (58) body -> . stmt
    (59) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (49) compound_stmt -> . func_def
    (50) compound_stmt -> . if_stmt
    (51) compound_stmt -> . while_stmt
    (52) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . loop_stmt
    (53) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (63) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (60) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (61) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) loop_stmt -> . BREAK
    (15) loop_stmt -> . CONTINUE
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    RETURN          shift and go to state 6
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 30
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 145
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 27
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 98
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 29
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 13

state 142

    (65) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT . body DEDENT
    (58) body -> . stmt
    (59) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (49) compound_stmt -> . func_def
    (50) compound_stmt -> . if_stmt
    (51) compound_stmt -> . while_stmt
    (52) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . loop_stmt
    (53) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (63) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (60) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (61) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) loop_stmt -> . BREAK
    (15) loop_stmt -> . CONTINUE
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    RETURN          shift and go to state 6
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 30
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 146
    func_call                      shift and go to state 25
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 27
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 98
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 29
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 13
    if_stmt                        shift and go to state 26

state 143

    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 147


state 144

    (67) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT . body DEDENT
    (68) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT . body DEDENT elseif_list
    (58) body -> . stmt
    (59) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (49) compound_stmt -> . func_def
    (50) compound_stmt -> . if_stmt
    (51) compound_stmt -> . while_stmt
    (52) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . loop_stmt
    (53) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (63) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (64) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (60) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (61) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (62) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (24) expr -> . IDENTIFIER
    (25) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (26) expr -> . STRING
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr comb_op expr
    (40) expr -> . expr comp_op expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) loop_stmt -> . BREAK
    (15) loop_stmt -> . CONTINUE
    (20) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (21) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 31
    RETURN          shift and go to state 6
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 30
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 148
    func_call                      shift and go to state 25
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 27
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 98
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 29
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 13
    if_stmt                        shift and go to state 26

state 145

    (61) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 149


state 146

    (65) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 150


state 147

    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .

    FUNCTION        reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)


state 148

    (67) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body . DEDENT
    (68) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body . DEDENT elseif_list

    DEDENT          shift and go to state 151


state 149

    (61) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .

    END_STATEMENT   reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 61 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)


state 150

    (65) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .

    FUNCTION        reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)


state 151

    (67) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .
    (68) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT . elseif_list
    (67) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT
    (68) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list

    ELSE            reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 67 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    ELSEIF          shift and go to state 127

    elseif_list                    shift and go to state 152

state 152

    (68) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .

    ELSE            reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    END_STATEMENT   reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FUNCTION        reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    IF              reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    WHILE           reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FOR             reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    IDENTIFIER      reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    STRING          reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    LPAREN          reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    INTEGER         reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DOUBLE          reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    RETURN          reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    BREAK           reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    CONTINUE        reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    TRUE            reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FALSE           reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    $end            reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DEDENT          reduce using rule 68 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD_OP in state 78 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 78 resolved as shift
WARNING: shift/reduce conflict for MUL_OP in state 78 resolved as shift
WARNING: shift/reduce conflict for DIV_OP in state 78 resolved as shift
WARNING: shift/reduce conflict for MOD_OP in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for CEQ in state 78 resolved as shift
WARNING: shift/reduce conflict for CNE in state 78 resolved as shift
WARNING: shift/reduce conflict for CLT in state 78 resolved as shift
WARNING: shift/reduce conflict for CLE in state 78 resolved as shift
WARNING: shift/reduce conflict for CGT in state 78 resolved as shift
WARNING: shift/reduce conflict for CGE in state 78 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 79 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 79 resolved as shift
WARNING: shift/reduce conflict for MUL_OP in state 79 resolved as shift
WARNING: shift/reduce conflict for DIV_OP in state 79 resolved as shift
WARNING: shift/reduce conflict for MOD_OP in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for CEQ in state 79 resolved as shift
WARNING: shift/reduce conflict for CNE in state 79 resolved as shift
WARNING: shift/reduce conflict for CLT in state 79 resolved as shift
WARNING: shift/reduce conflict for CLE in state 79 resolved as shift
WARNING: shift/reduce conflict for CGT in state 79 resolved as shift
WARNING: shift/reduce conflict for CGE in state 79 resolved as shift
