Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> func_def
Rule 2     program -> func_def program
Rule 3     program -> END_STATEMENT program
Rule 4     stmt -> simple_stmt
Rule 5     stmt -> compound_stmt
Rule 6     simple_stmt -> small_stmt END_STATEMENT
Rule 7     small_stmt -> assignment
Rule 8     small_stmt -> const_decl
Rule 9     small_stmt -> expr
Rule 10    small_stmt -> return_stmt
Rule 11    small_stmt -> display
Rule 12    return_stmt -> RETURN
Rule 13    return_stmt -> RETURN expr
Rule 14    display -> DISPLAY LPAREN IDENTIFIER RPAREN
Rule 15    display -> DISPLAY LPAREN INTEGER RPAREN
Rule 16    assignment -> IDENTIFIER ASSIGN expr
Rule 17    assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
Rule 18    assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
Rule 19    const_decl -> IDENTIFIER CONST expr
Rule 20    const_decl -> IDENTIFIER CONST LSBRACKET list_args RSBRACKET
Rule 21    func_call -> IDENTIFIER LPAREN list_args RPAREN
Rule 22    func_call -> IDENTIFIER LPAREN RPAREN
Rule 23    list_args -> expr
Rule 24    list_args -> expr COMMA list_args
Rule 25    expr -> IDENTIFIER
Rule 26    expr -> IDENTIFIER LSBRACKET expr RSBRACKET
Rule 27    expr -> LPAREN expr RPAREN
Rule 28    expr -> func_call
Rule 29    expr -> INTEGER
Rule 30    expr -> DOUBLE
Rule 31    expr -> boolean
Rule 32    boolean -> TRUE
Rule 33    boolean -> FALSE
Rule 34    expr -> expr ADD_OP expr
Rule 35    expr -> expr SUB_OP expr
Rule 36    expr -> expr MUL_OP expr
Rule 37    expr -> expr DIV_OP expr
Rule 38    expr -> expr MOD_OP expr
Rule 39    expr -> expr OR expr
Rule 40    expr -> expr AND expr
Rule 41    expr -> expr CEQ expr
Rule 42    expr -> expr CNE expr
Rule 43    expr -> expr CLT expr
Rule 44    expr -> expr CLE expr
Rule 45    expr -> expr CGT expr
Rule 46    expr -> expr CGE expr
Rule 47    expr -> SUB_OP expr
Rule 48    compound_stmt -> func_def
Rule 49    compound_stmt -> if_stmt
Rule 50    compound_stmt -> while_stmt
Rule 51    compound_stmt -> for_stmt
Rule 52    func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT
Rule 53    head -> IDENTIFIER LPAREN func_def_args RPAREN COLON
Rule 54    head -> IDENTIFIER LPAREN RPAREN COLON
Rule 55    head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_INT COLON
Rule 56    head -> IDENTIFIER LPAREN RPAREN RETURN T_INT COLON
Rule 57    head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_DOUBLE COLON
Rule 58    head -> IDENTIFIER LPAREN RPAREN RETURN T_DOUBLE COLON
Rule 59    head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_BOOL COLON
Rule 60    head -> IDENTIFIER LPAREN RPAREN RETURN T_BOOL COLON
Rule 61    func_def_args -> argument
Rule 62    func_def_args -> argument COMMA func_def_args
Rule 63    argument -> T_INT IDENTIFIER
Rule 64    argument -> T_DOUBLE IDENTIFIER
Rule 65    argument -> T_BOOL IDENTIFIER
Rule 66    argument -> T_LIST_INT IDENTIFIER
Rule 67    argument -> T_LIST_DOUBLE IDENTIFIER
Rule 68    argument -> T_LIST_BOOL IDENTIFIER
Rule 69    body -> stmt
Rule 70    body -> stmt body
Rule 71    while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT
Rule 72    for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
Rule 73    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT
Rule 74    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

Terminals, with rules where they appear

ADD_OP               : 34
AND                  : 40
ASSIGN               : 16 17 18
CEQ                  : 41
CGE                  : 46
CGT                  : 45
CLE                  : 44
CLT                  : 43
CNE                  : 42
COLON                : 53 54 55 56 57 58 59 60 71 72 73 74 74
COMMA                : 24 62 72
CONST                : 19 20
DEDENT               : 52 71 72 73 74 74
DISPLAY              : 14 15
DIV_OP               : 37
DOUBLE               : 30
ELSE                 : 74
END_STATEMENT        : 3 6 52 71 72 73 74 74
FALSE                : 33
FOR                  : 72
FUNCTION             : 52
IDENTIFIER           : 14 16 17 18 19 20 21 22 25 26 53 54 55 56 57 58 59 60 63 64 65 66 67 68 72
IF                   : 73 74
IN                   : 72
INDENT               : 52 71 72 73 74 74
INTEGER              : 15 29
LPAREN               : 14 15 21 22 27 53 54 55 56 57 58 59 60 72
LSBRACKET            : 17 18 20 26
MOD_OP               : 38
MUL_OP               : 36
OR                   : 39
RANGE                : 72
RETURN               : 12 13 55 56 57 58 59 60
RPAREN               : 14 15 21 22 27 53 54 55 56 57 58 59 60 72
RSBRACKET            : 17 18 20 26
SUB_OP               : 35 47
TRUE                 : 32
T_BOOL               : 59 60 65
T_DOUBLE             : 57 58 64
T_INT                : 55 56 63
T_LIST_BOOL          : 68
T_LIST_DOUBLE        : 67
T_LIST_INT           : 66
WHILE                : 71
error                : 

Nonterminals, with rules where they appear

argument             : 61 62
assignment           : 7
body                 : 52 70 71 72 73 74 74
boolean              : 31
compound_stmt        : 5
const_decl           : 8
display              : 11
expr                 : 9 13 16 18 18 19 23 24 26 27 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 71 72 72 73 74
for_stmt             : 51
func_call            : 28
func_def             : 1 2 48
func_def_args        : 53 55 57 59 62
head                 : 52
if_stmt              : 49
list_args            : 17 20 21 24
program              : 2 3 0
return_stmt          : 10
simple_stmt          : 4
small_stmt           : 6
stmt                 : 69 70
while_stmt           : 50

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . func_def
    (2) program -> . func_def program
    (3) program -> . END_STATEMENT program
    (52) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 1
    FUNCTION        shift and go to state 2

    program                        shift and go to state 4
    func_def                       shift and go to state 3

state 1

    (3) program -> END_STATEMENT . program
    (1) program -> . func_def
    (2) program -> . func_def program
    (3) program -> . END_STATEMENT program
    (52) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 1
    FUNCTION        shift and go to state 2

    program                        shift and go to state 5
    func_def                       shift and go to state 3

state 2

    (52) func_def -> FUNCTION . head END_STATEMENT INDENT body DEDENT
    (53) head -> . IDENTIFIER LPAREN func_def_args RPAREN COLON
    (54) head -> . IDENTIFIER LPAREN RPAREN COLON
    (55) head -> . IDENTIFIER LPAREN func_def_args RPAREN RETURN T_INT COLON
    (56) head -> . IDENTIFIER LPAREN RPAREN RETURN T_INT COLON
    (57) head -> . IDENTIFIER LPAREN func_def_args RPAREN RETURN T_DOUBLE COLON
    (58) head -> . IDENTIFIER LPAREN RPAREN RETURN T_DOUBLE COLON
    (59) head -> . IDENTIFIER LPAREN func_def_args RPAREN RETURN T_BOOL COLON
    (60) head -> . IDENTIFIER LPAREN RPAREN RETURN T_BOOL COLON

    IDENTIFIER      shift and go to state 7

    head                           shift and go to state 6

state 3

    (1) program -> func_def .
    (2) program -> func_def . program
    (1) program -> . func_def
    (2) program -> . func_def program
    (3) program -> . END_STATEMENT program
    (52) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT

    $end            reduce using rule 1 (program -> func_def .)
    END_STATEMENT   shift and go to state 1
    FUNCTION        shift and go to state 2

    program                        shift and go to state 8
    func_def                       shift and go to state 3

state 4

    (0) S' -> program .



state 5

    (3) program -> END_STATEMENT program .

    $end            reduce using rule 3 (program -> END_STATEMENT program .)


state 6

    (52) func_def -> FUNCTION head . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 9


state 7

    (53) head -> IDENTIFIER . LPAREN func_def_args RPAREN COLON
    (54) head -> IDENTIFIER . LPAREN RPAREN COLON
    (55) head -> IDENTIFIER . LPAREN func_def_args RPAREN RETURN T_INT COLON
    (56) head -> IDENTIFIER . LPAREN RPAREN RETURN T_INT COLON
    (57) head -> IDENTIFIER . LPAREN func_def_args RPAREN RETURN T_DOUBLE COLON
    (58) head -> IDENTIFIER . LPAREN RPAREN RETURN T_DOUBLE COLON
    (59) head -> IDENTIFIER . LPAREN func_def_args RPAREN RETURN T_BOOL COLON
    (60) head -> IDENTIFIER . LPAREN RPAREN RETURN T_BOOL COLON

    LPAREN          shift and go to state 10


state 8

    (2) program -> func_def program .

    $end            reduce using rule 2 (program -> func_def program .)


state 9

    (52) func_def -> FUNCTION head END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 11


state 10

    (53) head -> IDENTIFIER LPAREN . func_def_args RPAREN COLON
    (54) head -> IDENTIFIER LPAREN . RPAREN COLON
    (55) head -> IDENTIFIER LPAREN . func_def_args RPAREN RETURN T_INT COLON
    (56) head -> IDENTIFIER LPAREN . RPAREN RETURN T_INT COLON
    (57) head -> IDENTIFIER LPAREN . func_def_args RPAREN RETURN T_DOUBLE COLON
    (58) head -> IDENTIFIER LPAREN . RPAREN RETURN T_DOUBLE COLON
    (59) head -> IDENTIFIER LPAREN . func_def_args RPAREN RETURN T_BOOL COLON
    (60) head -> IDENTIFIER LPAREN . RPAREN RETURN T_BOOL COLON
    (61) func_def_args -> . argument
    (62) func_def_args -> . argument COMMA func_def_args
    (63) argument -> . T_INT IDENTIFIER
    (64) argument -> . T_DOUBLE IDENTIFIER
    (65) argument -> . T_BOOL IDENTIFIER
    (66) argument -> . T_LIST_INT IDENTIFIER
    (67) argument -> . T_LIST_DOUBLE IDENTIFIER
    (68) argument -> . T_LIST_BOOL IDENTIFIER

    RPAREN          shift and go to state 14
    T_INT           shift and go to state 19
    T_DOUBLE        shift and go to state 16
    T_BOOL          shift and go to state 15
    T_LIST_INT      shift and go to state 18
    T_LIST_DOUBLE   shift and go to state 20
    T_LIST_BOOL     shift and go to state 12

    func_def_args                  shift and go to state 13
    argument                       shift and go to state 17

state 11

    (52) func_def -> FUNCTION head END_STATEMENT INDENT . body DEDENT
    (69) body -> . stmt
    (70) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (48) compound_stmt -> . func_def
    (49) compound_stmt -> . if_stmt
    (50) compound_stmt -> . while_stmt
    (51) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (52) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (73) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (74) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (71) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (72) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (20) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) display -> . DISPLAY LPAREN IDENTIFIER RPAREN
    (15) display -> . DISPLAY LPAREN INTEGER RPAREN
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    FUNCTION        shift and go to state 2
    IF              shift and go to state 41
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    IDENTIFIER      shift and go to state 31
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    RETURN          shift and go to state 25
    DISPLAY         shift and go to state 30
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    body                           shift and go to state 36
    func_call                      shift and go to state 42
    if_stmt                        shift and go to state 43
    func_def                       shift and go to state 33
    simple_stmt                    shift and go to state 34
    assignment                     shift and go to state 35
    for_stmt                       shift and go to state 38
    stmt                           shift and go to state 37
    display                        shift and go to state 48
    small_stmt                     shift and go to state 21
    while_stmt                     shift and go to state 46
    boolean                        shift and go to state 23
    return_stmt                    shift and go to state 24
    expr                           shift and go to state 44
    const_decl                     shift and go to state 29
    compound_stmt                  shift and go to state 32

state 12

    (68) argument -> T_LIST_BOOL . IDENTIFIER

    IDENTIFIER      shift and go to state 49


state 13

    (53) head -> IDENTIFIER LPAREN func_def_args . RPAREN COLON
    (55) head -> IDENTIFIER LPAREN func_def_args . RPAREN RETURN T_INT COLON
    (57) head -> IDENTIFIER LPAREN func_def_args . RPAREN RETURN T_DOUBLE COLON
    (59) head -> IDENTIFIER LPAREN func_def_args . RPAREN RETURN T_BOOL COLON

    RPAREN          shift and go to state 50


state 14

    (54) head -> IDENTIFIER LPAREN RPAREN . COLON
    (56) head -> IDENTIFIER LPAREN RPAREN . RETURN T_INT COLON
    (58) head -> IDENTIFIER LPAREN RPAREN . RETURN T_DOUBLE COLON
    (60) head -> IDENTIFIER LPAREN RPAREN . RETURN T_BOOL COLON

    COLON           shift and go to state 52
    RETURN          shift and go to state 51


state 15

    (65) argument -> T_BOOL . IDENTIFIER

    IDENTIFIER      shift and go to state 53


state 16

    (64) argument -> T_DOUBLE . IDENTIFIER

    IDENTIFIER      shift and go to state 54


state 17

    (61) func_def_args -> argument .
    (62) func_def_args -> argument . COMMA func_def_args

    RPAREN          reduce using rule 61 (func_def_args -> argument .)
    COMMA           shift and go to state 55


state 18

    (66) argument -> T_LIST_INT . IDENTIFIER

    IDENTIFIER      shift and go to state 56


state 19

    (63) argument -> T_INT . IDENTIFIER

    IDENTIFIER      shift and go to state 57


state 20

    (67) argument -> T_LIST_DOUBLE . IDENTIFIER

    IDENTIFIER      shift and go to state 58


state 21

    (6) simple_stmt -> small_stmt . END_STATEMENT

    END_STATEMENT   shift and go to state 59


state 22

    (71) while_stmt -> WHILE . expr COLON END_STATEMENT INDENT body DEDENT
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    expr                           shift and go to state 61
    boolean                        shift and go to state 23
    func_call                      shift and go to state 42

state 23

    (31) expr -> boolean .

    ADD_OP          reduce using rule 31 (expr -> boolean .)
    SUB_OP          reduce using rule 31 (expr -> boolean .)
    MUL_OP          reduce using rule 31 (expr -> boolean .)
    DIV_OP          reduce using rule 31 (expr -> boolean .)
    MOD_OP          reduce using rule 31 (expr -> boolean .)
    OR              reduce using rule 31 (expr -> boolean .)
    AND             reduce using rule 31 (expr -> boolean .)
    CEQ             reduce using rule 31 (expr -> boolean .)
    CNE             reduce using rule 31 (expr -> boolean .)
    CLT             reduce using rule 31 (expr -> boolean .)
    CLE             reduce using rule 31 (expr -> boolean .)
    CGT             reduce using rule 31 (expr -> boolean .)
    CGE             reduce using rule 31 (expr -> boolean .)
    END_STATEMENT   reduce using rule 31 (expr -> boolean .)
    COLON           reduce using rule 31 (expr -> boolean .)
    RPAREN          reduce using rule 31 (expr -> boolean .)
    RSBRACKET       reduce using rule 31 (expr -> boolean .)
    COMMA           reduce using rule 31 (expr -> boolean .)


state 24

    (10) small_stmt -> return_stmt .

    END_STATEMENT   reduce using rule 10 (small_stmt -> return_stmt .)


state 25

    (12) return_stmt -> RETURN .
    (13) return_stmt -> RETURN . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    END_STATEMENT   reduce using rule 12 (return_stmt -> RETURN .)
    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 62
    boolean                        shift and go to state 23

state 26

    (29) expr -> INTEGER .

    ADD_OP          reduce using rule 29 (expr -> INTEGER .)
    SUB_OP          reduce using rule 29 (expr -> INTEGER .)
    MUL_OP          reduce using rule 29 (expr -> INTEGER .)
    DIV_OP          reduce using rule 29 (expr -> INTEGER .)
    MOD_OP          reduce using rule 29 (expr -> INTEGER .)
    OR              reduce using rule 29 (expr -> INTEGER .)
    AND             reduce using rule 29 (expr -> INTEGER .)
    CEQ             reduce using rule 29 (expr -> INTEGER .)
    CNE             reduce using rule 29 (expr -> INTEGER .)
    CLT             reduce using rule 29 (expr -> INTEGER .)
    CLE             reduce using rule 29 (expr -> INTEGER .)
    CGT             reduce using rule 29 (expr -> INTEGER .)
    CGE             reduce using rule 29 (expr -> INTEGER .)
    END_STATEMENT   reduce using rule 29 (expr -> INTEGER .)
    COLON           reduce using rule 29 (expr -> INTEGER .)
    RPAREN          reduce using rule 29 (expr -> INTEGER .)
    RSBRACKET       reduce using rule 29 (expr -> INTEGER .)
    COMMA           reduce using rule 29 (expr -> INTEGER .)


state 27

    (32) boolean -> TRUE .

    ADD_OP          reduce using rule 32 (boolean -> TRUE .)
    SUB_OP          reduce using rule 32 (boolean -> TRUE .)
    MUL_OP          reduce using rule 32 (boolean -> TRUE .)
    DIV_OP          reduce using rule 32 (boolean -> TRUE .)
    MOD_OP          reduce using rule 32 (boolean -> TRUE .)
    OR              reduce using rule 32 (boolean -> TRUE .)
    AND             reduce using rule 32 (boolean -> TRUE .)
    CEQ             reduce using rule 32 (boolean -> TRUE .)
    CNE             reduce using rule 32 (boolean -> TRUE .)
    CLT             reduce using rule 32 (boolean -> TRUE .)
    CLE             reduce using rule 32 (boolean -> TRUE .)
    CGT             reduce using rule 32 (boolean -> TRUE .)
    CGE             reduce using rule 32 (boolean -> TRUE .)
    END_STATEMENT   reduce using rule 32 (boolean -> TRUE .)
    COLON           reduce using rule 32 (boolean -> TRUE .)
    RPAREN          reduce using rule 32 (boolean -> TRUE .)
    RSBRACKET       reduce using rule 32 (boolean -> TRUE .)
    COMMA           reduce using rule 32 (boolean -> TRUE .)


state 28

    (72) for_stmt -> FOR . IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT

    IDENTIFIER      shift and go to state 63


state 29

    (8) small_stmt -> const_decl .

    END_STATEMENT   reduce using rule 8 (small_stmt -> const_decl .)


state 30

    (14) display -> DISPLAY . LPAREN IDENTIFIER RPAREN
    (15) display -> DISPLAY . LPAREN INTEGER RPAREN

    LPAREN          shift and go to state 64


state 31

    (16) assignment -> IDENTIFIER . ASSIGN expr
    (17) assignment -> IDENTIFIER . ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> IDENTIFIER . LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> IDENTIFIER . CONST expr
    (20) const_decl -> IDENTIFIER . CONST LSBRACKET list_args RSBRACKET
    (25) expr -> IDENTIFIER .
    (26) expr -> IDENTIFIER . LSBRACKET expr RSBRACKET
    (21) func_call -> IDENTIFIER . LPAREN list_args RPAREN
    (22) func_call -> IDENTIFIER . LPAREN RPAREN

    ASSIGN          shift and go to state 68
    LSBRACKET       shift and go to state 66
    CONST           shift and go to state 65
    ADD_OP          reduce using rule 25 (expr -> IDENTIFIER .)
    SUB_OP          reduce using rule 25 (expr -> IDENTIFIER .)
    MUL_OP          reduce using rule 25 (expr -> IDENTIFIER .)
    DIV_OP          reduce using rule 25 (expr -> IDENTIFIER .)
    MOD_OP          reduce using rule 25 (expr -> IDENTIFIER .)
    OR              reduce using rule 25 (expr -> IDENTIFIER .)
    AND             reduce using rule 25 (expr -> IDENTIFIER .)
    CEQ             reduce using rule 25 (expr -> IDENTIFIER .)
    CNE             reduce using rule 25 (expr -> IDENTIFIER .)
    CLT             reduce using rule 25 (expr -> IDENTIFIER .)
    CLE             reduce using rule 25 (expr -> IDENTIFIER .)
    CGT             reduce using rule 25 (expr -> IDENTIFIER .)
    CGE             reduce using rule 25 (expr -> IDENTIFIER .)
    END_STATEMENT   reduce using rule 25 (expr -> IDENTIFIER .)
    LPAREN          shift and go to state 67


state 32

    (5) stmt -> compound_stmt .

    FUNCTION        reduce using rule 5 (stmt -> compound_stmt .)
    IF              reduce using rule 5 (stmt -> compound_stmt .)
    WHILE           reduce using rule 5 (stmt -> compound_stmt .)
    FOR             reduce using rule 5 (stmt -> compound_stmt .)
    IDENTIFIER      reduce using rule 5 (stmt -> compound_stmt .)
    LPAREN          reduce using rule 5 (stmt -> compound_stmt .)
    INTEGER         reduce using rule 5 (stmt -> compound_stmt .)
    DOUBLE          reduce using rule 5 (stmt -> compound_stmt .)
    SUB_OP          reduce using rule 5 (stmt -> compound_stmt .)
    RETURN          reduce using rule 5 (stmt -> compound_stmt .)
    DISPLAY         reduce using rule 5 (stmt -> compound_stmt .)
    TRUE            reduce using rule 5 (stmt -> compound_stmt .)
    FALSE           reduce using rule 5 (stmt -> compound_stmt .)
    DEDENT          reduce using rule 5 (stmt -> compound_stmt .)


state 33

    (48) compound_stmt -> func_def .

    FUNCTION        reduce using rule 48 (compound_stmt -> func_def .)
    IF              reduce using rule 48 (compound_stmt -> func_def .)
    WHILE           reduce using rule 48 (compound_stmt -> func_def .)
    FOR             reduce using rule 48 (compound_stmt -> func_def .)
    IDENTIFIER      reduce using rule 48 (compound_stmt -> func_def .)
    LPAREN          reduce using rule 48 (compound_stmt -> func_def .)
    INTEGER         reduce using rule 48 (compound_stmt -> func_def .)
    DOUBLE          reduce using rule 48 (compound_stmt -> func_def .)
    SUB_OP          reduce using rule 48 (compound_stmt -> func_def .)
    RETURN          reduce using rule 48 (compound_stmt -> func_def .)
    DISPLAY         reduce using rule 48 (compound_stmt -> func_def .)
    TRUE            reduce using rule 48 (compound_stmt -> func_def .)
    FALSE           reduce using rule 48 (compound_stmt -> func_def .)
    DEDENT          reduce using rule 48 (compound_stmt -> func_def .)


state 34

    (4) stmt -> simple_stmt .

    FUNCTION        reduce using rule 4 (stmt -> simple_stmt .)
    IF              reduce using rule 4 (stmt -> simple_stmt .)
    WHILE           reduce using rule 4 (stmt -> simple_stmt .)
    FOR             reduce using rule 4 (stmt -> simple_stmt .)
    IDENTIFIER      reduce using rule 4 (stmt -> simple_stmt .)
    LPAREN          reduce using rule 4 (stmt -> simple_stmt .)
    INTEGER         reduce using rule 4 (stmt -> simple_stmt .)
    DOUBLE          reduce using rule 4 (stmt -> simple_stmt .)
    SUB_OP          reduce using rule 4 (stmt -> simple_stmt .)
    RETURN          reduce using rule 4 (stmt -> simple_stmt .)
    DISPLAY         reduce using rule 4 (stmt -> simple_stmt .)
    TRUE            reduce using rule 4 (stmt -> simple_stmt .)
    FALSE           reduce using rule 4 (stmt -> simple_stmt .)
    DEDENT          reduce using rule 4 (stmt -> simple_stmt .)


state 35

    (7) small_stmt -> assignment .

    END_STATEMENT   reduce using rule 7 (small_stmt -> assignment .)


state 36

    (52) func_def -> FUNCTION head END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 69


state 37

    (69) body -> stmt .
    (70) body -> stmt . body
    (69) body -> . stmt
    (70) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (48) compound_stmt -> . func_def
    (49) compound_stmt -> . if_stmt
    (50) compound_stmt -> . while_stmt
    (51) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (52) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (73) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (74) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (71) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (72) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (20) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) display -> . DISPLAY LPAREN IDENTIFIER RPAREN
    (15) display -> . DISPLAY LPAREN INTEGER RPAREN
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    DEDENT          reduce using rule 69 (body -> stmt .)
    FUNCTION        shift and go to state 2
    IF              shift and go to state 41
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    IDENTIFIER      shift and go to state 31
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    RETURN          shift and go to state 25
    DISPLAY         shift and go to state 30
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    body                           shift and go to state 70
    func_call                      shift and go to state 42
    if_stmt                        shift and go to state 43
    func_def                       shift and go to state 33
    simple_stmt                    shift and go to state 34
    assignment                     shift and go to state 35
    for_stmt                       shift and go to state 38
    stmt                           shift and go to state 37
    display                        shift and go to state 48
    small_stmt                     shift and go to state 21
    while_stmt                     shift and go to state 46
    boolean                        shift and go to state 23
    return_stmt                    shift and go to state 24
    expr                           shift and go to state 44
    const_decl                     shift and go to state 29
    compound_stmt                  shift and go to state 32

state 38

    (51) compound_stmt -> for_stmt .

    FUNCTION        reduce using rule 51 (compound_stmt -> for_stmt .)
    IF              reduce using rule 51 (compound_stmt -> for_stmt .)
    WHILE           reduce using rule 51 (compound_stmt -> for_stmt .)
    FOR             reduce using rule 51 (compound_stmt -> for_stmt .)
    IDENTIFIER      reduce using rule 51 (compound_stmt -> for_stmt .)
    LPAREN          reduce using rule 51 (compound_stmt -> for_stmt .)
    INTEGER         reduce using rule 51 (compound_stmt -> for_stmt .)
    DOUBLE          reduce using rule 51 (compound_stmt -> for_stmt .)
    SUB_OP          reduce using rule 51 (compound_stmt -> for_stmt .)
    RETURN          reduce using rule 51 (compound_stmt -> for_stmt .)
    DISPLAY         reduce using rule 51 (compound_stmt -> for_stmt .)
    TRUE            reduce using rule 51 (compound_stmt -> for_stmt .)
    FALSE           reduce using rule 51 (compound_stmt -> for_stmt .)
    DEDENT          reduce using rule 51 (compound_stmt -> for_stmt .)


state 39

    (27) expr -> LPAREN . expr RPAREN
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 71
    boolean                        shift and go to state 23

state 40

    (33) boolean -> FALSE .

    ADD_OP          reduce using rule 33 (boolean -> FALSE .)
    SUB_OP          reduce using rule 33 (boolean -> FALSE .)
    MUL_OP          reduce using rule 33 (boolean -> FALSE .)
    DIV_OP          reduce using rule 33 (boolean -> FALSE .)
    MOD_OP          reduce using rule 33 (boolean -> FALSE .)
    OR              reduce using rule 33 (boolean -> FALSE .)
    AND             reduce using rule 33 (boolean -> FALSE .)
    CEQ             reduce using rule 33 (boolean -> FALSE .)
    CNE             reduce using rule 33 (boolean -> FALSE .)
    CLT             reduce using rule 33 (boolean -> FALSE .)
    CLE             reduce using rule 33 (boolean -> FALSE .)
    CGT             reduce using rule 33 (boolean -> FALSE .)
    CGE             reduce using rule 33 (boolean -> FALSE .)
    END_STATEMENT   reduce using rule 33 (boolean -> FALSE .)
    COLON           reduce using rule 33 (boolean -> FALSE .)
    RPAREN          reduce using rule 33 (boolean -> FALSE .)
    RSBRACKET       reduce using rule 33 (boolean -> FALSE .)
    COMMA           reduce using rule 33 (boolean -> FALSE .)


state 41

    (73) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT
    (74) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    expr                           shift and go to state 72
    boolean                        shift and go to state 23
    func_call                      shift and go to state 42

state 42

    (28) expr -> func_call .

    ADD_OP          reduce using rule 28 (expr -> func_call .)
    SUB_OP          reduce using rule 28 (expr -> func_call .)
    MUL_OP          reduce using rule 28 (expr -> func_call .)
    DIV_OP          reduce using rule 28 (expr -> func_call .)
    MOD_OP          reduce using rule 28 (expr -> func_call .)
    OR              reduce using rule 28 (expr -> func_call .)
    AND             reduce using rule 28 (expr -> func_call .)
    CEQ             reduce using rule 28 (expr -> func_call .)
    CNE             reduce using rule 28 (expr -> func_call .)
    CLT             reduce using rule 28 (expr -> func_call .)
    CLE             reduce using rule 28 (expr -> func_call .)
    CGT             reduce using rule 28 (expr -> func_call .)
    CGE             reduce using rule 28 (expr -> func_call .)
    END_STATEMENT   reduce using rule 28 (expr -> func_call .)
    COLON           reduce using rule 28 (expr -> func_call .)
    RPAREN          reduce using rule 28 (expr -> func_call .)
    RSBRACKET       reduce using rule 28 (expr -> func_call .)
    COMMA           reduce using rule 28 (expr -> func_call .)


state 43

    (49) compound_stmt -> if_stmt .

    FUNCTION        reduce using rule 49 (compound_stmt -> if_stmt .)
    IF              reduce using rule 49 (compound_stmt -> if_stmt .)
    WHILE           reduce using rule 49 (compound_stmt -> if_stmt .)
    FOR             reduce using rule 49 (compound_stmt -> if_stmt .)
    IDENTIFIER      reduce using rule 49 (compound_stmt -> if_stmt .)
    LPAREN          reduce using rule 49 (compound_stmt -> if_stmt .)
    INTEGER         reduce using rule 49 (compound_stmt -> if_stmt .)
    DOUBLE          reduce using rule 49 (compound_stmt -> if_stmt .)
    SUB_OP          reduce using rule 49 (compound_stmt -> if_stmt .)
    RETURN          reduce using rule 49 (compound_stmt -> if_stmt .)
    DISPLAY         reduce using rule 49 (compound_stmt -> if_stmt .)
    TRUE            reduce using rule 49 (compound_stmt -> if_stmt .)
    FALSE           reduce using rule 49 (compound_stmt -> if_stmt .)
    DEDENT          reduce using rule 49 (compound_stmt -> if_stmt .)


state 44

    (9) small_stmt -> expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 9 (small_stmt -> expr .)
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 73
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77


state 45

    (47) expr -> SUB_OP . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 86
    boolean                        shift and go to state 23

state 46

    (50) compound_stmt -> while_stmt .

    FUNCTION        reduce using rule 50 (compound_stmt -> while_stmt .)
    IF              reduce using rule 50 (compound_stmt -> while_stmt .)
    WHILE           reduce using rule 50 (compound_stmt -> while_stmt .)
    FOR             reduce using rule 50 (compound_stmt -> while_stmt .)
    IDENTIFIER      reduce using rule 50 (compound_stmt -> while_stmt .)
    LPAREN          reduce using rule 50 (compound_stmt -> while_stmt .)
    INTEGER         reduce using rule 50 (compound_stmt -> while_stmt .)
    DOUBLE          reduce using rule 50 (compound_stmt -> while_stmt .)
    SUB_OP          reduce using rule 50 (compound_stmt -> while_stmt .)
    RETURN          reduce using rule 50 (compound_stmt -> while_stmt .)
    DISPLAY         reduce using rule 50 (compound_stmt -> while_stmt .)
    TRUE            reduce using rule 50 (compound_stmt -> while_stmt .)
    FALSE           reduce using rule 50 (compound_stmt -> while_stmt .)
    DEDENT          reduce using rule 50 (compound_stmt -> while_stmt .)


state 47

    (30) expr -> DOUBLE .

    ADD_OP          reduce using rule 30 (expr -> DOUBLE .)
    SUB_OP          reduce using rule 30 (expr -> DOUBLE .)
    MUL_OP          reduce using rule 30 (expr -> DOUBLE .)
    DIV_OP          reduce using rule 30 (expr -> DOUBLE .)
    MOD_OP          reduce using rule 30 (expr -> DOUBLE .)
    OR              reduce using rule 30 (expr -> DOUBLE .)
    AND             reduce using rule 30 (expr -> DOUBLE .)
    CEQ             reduce using rule 30 (expr -> DOUBLE .)
    CNE             reduce using rule 30 (expr -> DOUBLE .)
    CLT             reduce using rule 30 (expr -> DOUBLE .)
    CLE             reduce using rule 30 (expr -> DOUBLE .)
    CGT             reduce using rule 30 (expr -> DOUBLE .)
    CGE             reduce using rule 30 (expr -> DOUBLE .)
    END_STATEMENT   reduce using rule 30 (expr -> DOUBLE .)
    COLON           reduce using rule 30 (expr -> DOUBLE .)
    RPAREN          reduce using rule 30 (expr -> DOUBLE .)
    RSBRACKET       reduce using rule 30 (expr -> DOUBLE .)
    COMMA           reduce using rule 30 (expr -> DOUBLE .)


state 48

    (11) small_stmt -> display .

    END_STATEMENT   reduce using rule 11 (small_stmt -> display .)


state 49

    (68) argument -> T_LIST_BOOL IDENTIFIER .

    COMMA           reduce using rule 68 (argument -> T_LIST_BOOL IDENTIFIER .)
    RPAREN          reduce using rule 68 (argument -> T_LIST_BOOL IDENTIFIER .)


state 50

    (53) head -> IDENTIFIER LPAREN func_def_args RPAREN . COLON
    (55) head -> IDENTIFIER LPAREN func_def_args RPAREN . RETURN T_INT COLON
    (57) head -> IDENTIFIER LPAREN func_def_args RPAREN . RETURN T_DOUBLE COLON
    (59) head -> IDENTIFIER LPAREN func_def_args RPAREN . RETURN T_BOOL COLON

    COLON           shift and go to state 87
    RETURN          shift and go to state 88


state 51

    (56) head -> IDENTIFIER LPAREN RPAREN RETURN . T_INT COLON
    (58) head -> IDENTIFIER LPAREN RPAREN RETURN . T_DOUBLE COLON
    (60) head -> IDENTIFIER LPAREN RPAREN RETURN . T_BOOL COLON

    T_INT           shift and go to state 91
    T_DOUBLE        shift and go to state 90
    T_BOOL          shift and go to state 89


state 52

    (54) head -> IDENTIFIER LPAREN RPAREN COLON .

    END_STATEMENT   reduce using rule 54 (head -> IDENTIFIER LPAREN RPAREN COLON .)


state 53

    (65) argument -> T_BOOL IDENTIFIER .

    COMMA           reduce using rule 65 (argument -> T_BOOL IDENTIFIER .)
    RPAREN          reduce using rule 65 (argument -> T_BOOL IDENTIFIER .)


state 54

    (64) argument -> T_DOUBLE IDENTIFIER .

    COMMA           reduce using rule 64 (argument -> T_DOUBLE IDENTIFIER .)
    RPAREN          reduce using rule 64 (argument -> T_DOUBLE IDENTIFIER .)


state 55

    (62) func_def_args -> argument COMMA . func_def_args
    (61) func_def_args -> . argument
    (62) func_def_args -> . argument COMMA func_def_args
    (63) argument -> . T_INT IDENTIFIER
    (64) argument -> . T_DOUBLE IDENTIFIER
    (65) argument -> . T_BOOL IDENTIFIER
    (66) argument -> . T_LIST_INT IDENTIFIER
    (67) argument -> . T_LIST_DOUBLE IDENTIFIER
    (68) argument -> . T_LIST_BOOL IDENTIFIER

    T_INT           shift and go to state 19
    T_DOUBLE        shift and go to state 16
    T_BOOL          shift and go to state 15
    T_LIST_INT      shift and go to state 18
    T_LIST_DOUBLE   shift and go to state 20
    T_LIST_BOOL     shift and go to state 12

    func_def_args                  shift and go to state 92
    argument                       shift and go to state 17

state 56

    (66) argument -> T_LIST_INT IDENTIFIER .

    COMMA           reduce using rule 66 (argument -> T_LIST_INT IDENTIFIER .)
    RPAREN          reduce using rule 66 (argument -> T_LIST_INT IDENTIFIER .)


state 57

    (63) argument -> T_INT IDENTIFIER .

    COMMA           reduce using rule 63 (argument -> T_INT IDENTIFIER .)
    RPAREN          reduce using rule 63 (argument -> T_INT IDENTIFIER .)


state 58

    (67) argument -> T_LIST_DOUBLE IDENTIFIER .

    COMMA           reduce using rule 67 (argument -> T_LIST_DOUBLE IDENTIFIER .)
    RPAREN          reduce using rule 67 (argument -> T_LIST_DOUBLE IDENTIFIER .)


state 59

    (6) simple_stmt -> small_stmt END_STATEMENT .

    FUNCTION        reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    IF              reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    WHILE           reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    FOR             reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    IDENTIFIER      reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    LPAREN          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    INTEGER         reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    DOUBLE          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    SUB_OP          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    RETURN          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    DISPLAY         reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    TRUE            reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    FALSE           reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    DEDENT          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)


state 60

    (25) expr -> IDENTIFIER .
    (26) expr -> IDENTIFIER . LSBRACKET expr RSBRACKET
    (21) func_call -> IDENTIFIER . LPAREN list_args RPAREN
    (22) func_call -> IDENTIFIER . LPAREN RPAREN

    ADD_OP          reduce using rule 25 (expr -> IDENTIFIER .)
    SUB_OP          reduce using rule 25 (expr -> IDENTIFIER .)
    MUL_OP          reduce using rule 25 (expr -> IDENTIFIER .)
    DIV_OP          reduce using rule 25 (expr -> IDENTIFIER .)
    MOD_OP          reduce using rule 25 (expr -> IDENTIFIER .)
    OR              reduce using rule 25 (expr -> IDENTIFIER .)
    AND             reduce using rule 25 (expr -> IDENTIFIER .)
    CEQ             reduce using rule 25 (expr -> IDENTIFIER .)
    CNE             reduce using rule 25 (expr -> IDENTIFIER .)
    CLT             reduce using rule 25 (expr -> IDENTIFIER .)
    CLE             reduce using rule 25 (expr -> IDENTIFIER .)
    CGT             reduce using rule 25 (expr -> IDENTIFIER .)
    CGE             reduce using rule 25 (expr -> IDENTIFIER .)
    END_STATEMENT   reduce using rule 25 (expr -> IDENTIFIER .)
    COLON           reduce using rule 25 (expr -> IDENTIFIER .)
    RPAREN          reduce using rule 25 (expr -> IDENTIFIER .)
    RSBRACKET       reduce using rule 25 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 25 (expr -> IDENTIFIER .)
    LSBRACKET       shift and go to state 93
    LPAREN          shift and go to state 67


state 61

    (71) while_stmt -> WHILE expr . COLON END_STATEMENT INDENT body DEDENT
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    COLON           shift and go to state 94
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 73
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77


state 62

    (13) return_stmt -> RETURN expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 13 (return_stmt -> RETURN expr .)
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 73
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77


state 63

    (72) for_stmt -> FOR IDENTIFIER . IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT

    IN              shift and go to state 95


state 64

    (14) display -> DISPLAY LPAREN . IDENTIFIER RPAREN
    (15) display -> DISPLAY LPAREN . INTEGER RPAREN

    IDENTIFIER      shift and go to state 97
    INTEGER         shift and go to state 96


state 65

    (19) const_decl -> IDENTIFIER CONST . expr
    (20) const_decl -> IDENTIFIER CONST . LSBRACKET list_args RSBRACKET
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    LSBRACKET       shift and go to state 98
    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 99
    boolean                        shift and go to state 23

state 66

    (18) assignment -> IDENTIFIER LSBRACKET . expr RSBRACKET ASSIGN expr
    (26) expr -> IDENTIFIER LSBRACKET . expr RSBRACKET
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 100
    boolean                        shift and go to state 23

state 67

    (21) func_call -> IDENTIFIER LPAREN . list_args RPAREN
    (22) func_call -> IDENTIFIER LPAREN . RPAREN
    (23) list_args -> . expr
    (24) list_args -> . expr COMMA list_args
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    RPAREN          shift and go to state 102
    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 103
    boolean                        shift and go to state 23
    list_args                      shift and go to state 101

state 68

    (16) assignment -> IDENTIFIER ASSIGN . expr
    (17) assignment -> IDENTIFIER ASSIGN . LSBRACKET list_args RSBRACKET
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    LSBRACKET       shift and go to state 104
    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 105
    boolean                        shift and go to state 23

state 69

    (52) func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .

    FUNCTION        reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 52 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)


state 70

    (70) body -> stmt body .

    DEDENT          reduce using rule 70 (body -> stmt body .)


state 71

    (27) expr -> LPAREN expr . RPAREN
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    RPAREN          shift and go to state 106
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 73
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77


state 72

    (73) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT
    (74) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    COLON           shift and go to state 107
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 73
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77


state 73

    (40) expr -> expr AND . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 108
    boolean                        shift and go to state 23

state 74

    (44) expr -> expr CLE . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 109
    boolean                        shift and go to state 23

state 75

    (36) expr -> expr MUL_OP . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 110
    boolean                        shift and go to state 23

state 76

    (45) expr -> expr CGT . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 111
    boolean                        shift and go to state 23

state 77

    (46) expr -> expr CGE . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 112
    boolean                        shift and go to state 23

state 78

    (35) expr -> expr SUB_OP . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 113
    boolean                        shift and go to state 23

state 79

    (37) expr -> expr DIV_OP . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 114
    boolean                        shift and go to state 23

state 80

    (42) expr -> expr CNE . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 115
    boolean                        shift and go to state 23

state 81

    (41) expr -> expr CEQ . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 116
    boolean                        shift and go to state 23

state 82

    (34) expr -> expr ADD_OP . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 117
    boolean                        shift and go to state 23

state 83

    (43) expr -> expr CLT . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 118
    boolean                        shift and go to state 23

state 84

    (38) expr -> expr MOD_OP . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 119
    boolean                        shift and go to state 23

state 85

    (39) expr -> expr OR . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 120
    boolean                        shift and go to state 23

state 86

    (47) expr -> SUB_OP expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    ADD_OP          reduce using rule 47 (expr -> SUB_OP expr .)
    SUB_OP          reduce using rule 47 (expr -> SUB_OP expr .)
    MUL_OP          reduce using rule 47 (expr -> SUB_OP expr .)
    DIV_OP          reduce using rule 47 (expr -> SUB_OP expr .)
    MOD_OP          reduce using rule 47 (expr -> SUB_OP expr .)
    OR              reduce using rule 47 (expr -> SUB_OP expr .)
    AND             reduce using rule 47 (expr -> SUB_OP expr .)
    CEQ             reduce using rule 47 (expr -> SUB_OP expr .)
    CNE             reduce using rule 47 (expr -> SUB_OP expr .)
    CLT             reduce using rule 47 (expr -> SUB_OP expr .)
    CLE             reduce using rule 47 (expr -> SUB_OP expr .)
    CGT             reduce using rule 47 (expr -> SUB_OP expr .)
    CGE             reduce using rule 47 (expr -> SUB_OP expr .)
    END_STATEMENT   reduce using rule 47 (expr -> SUB_OP expr .)
    COLON           reduce using rule 47 (expr -> SUB_OP expr .)
    RPAREN          reduce using rule 47 (expr -> SUB_OP expr .)
    RSBRACKET       reduce using rule 47 (expr -> SUB_OP expr .)
    COMMA           reduce using rule 47 (expr -> SUB_OP expr .)

  ! ADD_OP          [ shift and go to state 82 ]
  ! SUB_OP          [ shift and go to state 78 ]
  ! MUL_OP          [ shift and go to state 75 ]
  ! DIV_OP          [ shift and go to state 79 ]
  ! MOD_OP          [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 73 ]
  ! CEQ             [ shift and go to state 81 ]
  ! CNE             [ shift and go to state 80 ]
  ! CLT             [ shift and go to state 83 ]
  ! CLE             [ shift and go to state 74 ]
  ! CGT             [ shift and go to state 76 ]
  ! CGE             [ shift and go to state 77 ]


state 87

    (53) head -> IDENTIFIER LPAREN func_def_args RPAREN COLON .

    END_STATEMENT   reduce using rule 53 (head -> IDENTIFIER LPAREN func_def_args RPAREN COLON .)


state 88

    (55) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN . T_INT COLON
    (57) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN . T_DOUBLE COLON
    (59) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN . T_BOOL COLON

    T_INT           shift and go to state 123
    T_DOUBLE        shift and go to state 122
    T_BOOL          shift and go to state 121


state 89

    (60) head -> IDENTIFIER LPAREN RPAREN RETURN T_BOOL . COLON

    COLON           shift and go to state 124


state 90

    (58) head -> IDENTIFIER LPAREN RPAREN RETURN T_DOUBLE . COLON

    COLON           shift and go to state 125


state 91

    (56) head -> IDENTIFIER LPAREN RPAREN RETURN T_INT . COLON

    COLON           shift and go to state 126


state 92

    (62) func_def_args -> argument COMMA func_def_args .

    RPAREN          reduce using rule 62 (func_def_args -> argument COMMA func_def_args .)


state 93

    (26) expr -> IDENTIFIER LSBRACKET . expr RSBRACKET
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 127
    boolean                        shift and go to state 23

state 94

    (71) while_stmt -> WHILE expr COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 128


state 95

    (72) for_stmt -> FOR IDENTIFIER IN . RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT

    RANGE           shift and go to state 129


state 96

    (15) display -> DISPLAY LPAREN INTEGER . RPAREN

    RPAREN          shift and go to state 130


state 97

    (14) display -> DISPLAY LPAREN IDENTIFIER . RPAREN

    RPAREN          shift and go to state 131


state 98

    (20) const_decl -> IDENTIFIER CONST LSBRACKET . list_args RSBRACKET
    (23) list_args -> . expr
    (24) list_args -> . expr COMMA list_args
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 103
    boolean                        shift and go to state 23
    list_args                      shift and go to state 132

state 99

    (19) const_decl -> IDENTIFIER CONST expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 19 (const_decl -> IDENTIFIER CONST expr .)
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 73
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77


state 100

    (18) assignment -> IDENTIFIER LSBRACKET expr . RSBRACKET ASSIGN expr
    (26) expr -> IDENTIFIER LSBRACKET expr . RSBRACKET
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    RSBRACKET       shift and go to state 133
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 73
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77


state 101

    (21) func_call -> IDENTIFIER LPAREN list_args . RPAREN

    RPAREN          shift and go to state 134


state 102

    (22) func_call -> IDENTIFIER LPAREN RPAREN .

    ADD_OP          reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    SUB_OP          reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    MUL_OP          reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    DIV_OP          reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    MOD_OP          reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    OR              reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    AND             reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CEQ             reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CNE             reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CLT             reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CLE             reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CGT             reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CGE             reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    END_STATEMENT   reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    COLON           reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    RSBRACKET       reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)
    COMMA           reduce using rule 22 (func_call -> IDENTIFIER LPAREN RPAREN .)


state 103

    (23) list_args -> expr .
    (24) list_args -> expr . COMMA list_args
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    RPAREN          reduce using rule 23 (list_args -> expr .)
    RSBRACKET       reduce using rule 23 (list_args -> expr .)
    COMMA           shift and go to state 135
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 73
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77


state 104

    (17) assignment -> IDENTIFIER ASSIGN LSBRACKET . list_args RSBRACKET
    (23) list_args -> . expr
    (24) list_args -> . expr COMMA list_args
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 103
    boolean                        shift and go to state 23
    list_args                      shift and go to state 136

state 105

    (16) assignment -> IDENTIFIER ASSIGN expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expr .)
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 73
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77


state 106

    (27) expr -> LPAREN expr RPAREN .

    ADD_OP          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    SUB_OP          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    MUL_OP          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    DIV_OP          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    MOD_OP          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    CEQ             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    CNE             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    CLT             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    CLE             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    CGT             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    CGE             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    END_STATEMENT   reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    RSBRACKET       reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 27 (expr -> LPAREN expr RPAREN .)


state 107

    (73) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT
    (74) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 137


state 108

    (40) expr -> expr AND expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    OR              reduce using rule 40 (expr -> expr AND expr .)
    AND             reduce using rule 40 (expr -> expr AND expr .)
    END_STATEMENT   reduce using rule 40 (expr -> expr AND expr .)
    COLON           reduce using rule 40 (expr -> expr AND expr .)
    RPAREN          reduce using rule 40 (expr -> expr AND expr .)
    RSBRACKET       reduce using rule 40 (expr -> expr AND expr .)
    COMMA           reduce using rule 40 (expr -> expr AND expr .)
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77

  ! ADD_OP          [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! SUB_OP          [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! MUL_OP          [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! DIV_OP          [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! MOD_OP          [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! CEQ             [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! CNE             [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! CLT             [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! CLE             [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! CGT             [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! CGE             [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 73 ]


state 109

    (44) expr -> expr CLE expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    OR              reduce using rule 44 (expr -> expr CLE expr .)
    AND             reduce using rule 44 (expr -> expr CLE expr .)
    CEQ             reduce using rule 44 (expr -> expr CLE expr .)
    CNE             reduce using rule 44 (expr -> expr CLE expr .)
    CLT             reduce using rule 44 (expr -> expr CLE expr .)
    CLE             reduce using rule 44 (expr -> expr CLE expr .)
    CGT             reduce using rule 44 (expr -> expr CLE expr .)
    CGE             reduce using rule 44 (expr -> expr CLE expr .)
    END_STATEMENT   reduce using rule 44 (expr -> expr CLE expr .)
    COLON           reduce using rule 44 (expr -> expr CLE expr .)
    RPAREN          reduce using rule 44 (expr -> expr CLE expr .)
    RSBRACKET       reduce using rule 44 (expr -> expr CLE expr .)
    COMMA           reduce using rule 44 (expr -> expr CLE expr .)
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84

  ! ADD_OP          [ reduce using rule 44 (expr -> expr CLE expr .) ]
  ! SUB_OP          [ reduce using rule 44 (expr -> expr CLE expr .) ]
  ! MUL_OP          [ reduce using rule 44 (expr -> expr CLE expr .) ]
  ! DIV_OP          [ reduce using rule 44 (expr -> expr CLE expr .) ]
  ! MOD_OP          [ reduce using rule 44 (expr -> expr CLE expr .) ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 73 ]
  ! CEQ             [ shift and go to state 81 ]
  ! CNE             [ shift and go to state 80 ]
  ! CLT             [ shift and go to state 83 ]
  ! CLE             [ shift and go to state 74 ]
  ! CGT             [ shift and go to state 76 ]
  ! CGE             [ shift and go to state 77 ]


state 110

    (36) expr -> expr MUL_OP expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    ADD_OP          reduce using rule 36 (expr -> expr MUL_OP expr .)
    SUB_OP          reduce using rule 36 (expr -> expr MUL_OP expr .)
    MUL_OP          reduce using rule 36 (expr -> expr MUL_OP expr .)
    DIV_OP          reduce using rule 36 (expr -> expr MUL_OP expr .)
    MOD_OP          reduce using rule 36 (expr -> expr MUL_OP expr .)
    OR              reduce using rule 36 (expr -> expr MUL_OP expr .)
    AND             reduce using rule 36 (expr -> expr MUL_OP expr .)
    CEQ             reduce using rule 36 (expr -> expr MUL_OP expr .)
    CNE             reduce using rule 36 (expr -> expr MUL_OP expr .)
    CLT             reduce using rule 36 (expr -> expr MUL_OP expr .)
    CLE             reduce using rule 36 (expr -> expr MUL_OP expr .)
    CGT             reduce using rule 36 (expr -> expr MUL_OP expr .)
    CGE             reduce using rule 36 (expr -> expr MUL_OP expr .)
    END_STATEMENT   reduce using rule 36 (expr -> expr MUL_OP expr .)
    COLON           reduce using rule 36 (expr -> expr MUL_OP expr .)
    RPAREN          reduce using rule 36 (expr -> expr MUL_OP expr .)
    RSBRACKET       reduce using rule 36 (expr -> expr MUL_OP expr .)
    COMMA           reduce using rule 36 (expr -> expr MUL_OP expr .)

  ! ADD_OP          [ shift and go to state 82 ]
  ! SUB_OP          [ shift and go to state 78 ]
  ! MUL_OP          [ shift and go to state 75 ]
  ! DIV_OP          [ shift and go to state 79 ]
  ! MOD_OP          [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 73 ]
  ! CEQ             [ shift and go to state 81 ]
  ! CNE             [ shift and go to state 80 ]
  ! CLT             [ shift and go to state 83 ]
  ! CLE             [ shift and go to state 74 ]
  ! CGT             [ shift and go to state 76 ]
  ! CGE             [ shift and go to state 77 ]


state 111

    (45) expr -> expr CGT expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    OR              reduce using rule 45 (expr -> expr CGT expr .)
    AND             reduce using rule 45 (expr -> expr CGT expr .)
    CEQ             reduce using rule 45 (expr -> expr CGT expr .)
    CNE             reduce using rule 45 (expr -> expr CGT expr .)
    CLT             reduce using rule 45 (expr -> expr CGT expr .)
    CLE             reduce using rule 45 (expr -> expr CGT expr .)
    CGT             reduce using rule 45 (expr -> expr CGT expr .)
    CGE             reduce using rule 45 (expr -> expr CGT expr .)
    END_STATEMENT   reduce using rule 45 (expr -> expr CGT expr .)
    COLON           reduce using rule 45 (expr -> expr CGT expr .)
    RPAREN          reduce using rule 45 (expr -> expr CGT expr .)
    RSBRACKET       reduce using rule 45 (expr -> expr CGT expr .)
    COMMA           reduce using rule 45 (expr -> expr CGT expr .)
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84

  ! ADD_OP          [ reduce using rule 45 (expr -> expr CGT expr .) ]
  ! SUB_OP          [ reduce using rule 45 (expr -> expr CGT expr .) ]
  ! MUL_OP          [ reduce using rule 45 (expr -> expr CGT expr .) ]
  ! DIV_OP          [ reduce using rule 45 (expr -> expr CGT expr .) ]
  ! MOD_OP          [ reduce using rule 45 (expr -> expr CGT expr .) ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 73 ]
  ! CEQ             [ shift and go to state 81 ]
  ! CNE             [ shift and go to state 80 ]
  ! CLT             [ shift and go to state 83 ]
  ! CLE             [ shift and go to state 74 ]
  ! CGT             [ shift and go to state 76 ]
  ! CGE             [ shift and go to state 77 ]


state 112

    (46) expr -> expr CGE expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    OR              reduce using rule 46 (expr -> expr CGE expr .)
    AND             reduce using rule 46 (expr -> expr CGE expr .)
    CEQ             reduce using rule 46 (expr -> expr CGE expr .)
    CNE             reduce using rule 46 (expr -> expr CGE expr .)
    CLT             reduce using rule 46 (expr -> expr CGE expr .)
    CLE             reduce using rule 46 (expr -> expr CGE expr .)
    CGT             reduce using rule 46 (expr -> expr CGE expr .)
    CGE             reduce using rule 46 (expr -> expr CGE expr .)
    END_STATEMENT   reduce using rule 46 (expr -> expr CGE expr .)
    COLON           reduce using rule 46 (expr -> expr CGE expr .)
    RPAREN          reduce using rule 46 (expr -> expr CGE expr .)
    RSBRACKET       reduce using rule 46 (expr -> expr CGE expr .)
    COMMA           reduce using rule 46 (expr -> expr CGE expr .)
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84

  ! ADD_OP          [ reduce using rule 46 (expr -> expr CGE expr .) ]
  ! SUB_OP          [ reduce using rule 46 (expr -> expr CGE expr .) ]
  ! MUL_OP          [ reduce using rule 46 (expr -> expr CGE expr .) ]
  ! DIV_OP          [ reduce using rule 46 (expr -> expr CGE expr .) ]
  ! MOD_OP          [ reduce using rule 46 (expr -> expr CGE expr .) ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 73 ]
  ! CEQ             [ shift and go to state 81 ]
  ! CNE             [ shift and go to state 80 ]
  ! CLT             [ shift and go to state 83 ]
  ! CLE             [ shift and go to state 74 ]
  ! CGT             [ shift and go to state 76 ]
  ! CGE             [ shift and go to state 77 ]


state 113

    (35) expr -> expr SUB_OP expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    ADD_OP          reduce using rule 35 (expr -> expr SUB_OP expr .)
    SUB_OP          reduce using rule 35 (expr -> expr SUB_OP expr .)
    OR              reduce using rule 35 (expr -> expr SUB_OP expr .)
    AND             reduce using rule 35 (expr -> expr SUB_OP expr .)
    CEQ             reduce using rule 35 (expr -> expr SUB_OP expr .)
    CNE             reduce using rule 35 (expr -> expr SUB_OP expr .)
    CLT             reduce using rule 35 (expr -> expr SUB_OP expr .)
    CLE             reduce using rule 35 (expr -> expr SUB_OP expr .)
    CGT             reduce using rule 35 (expr -> expr SUB_OP expr .)
    CGE             reduce using rule 35 (expr -> expr SUB_OP expr .)
    END_STATEMENT   reduce using rule 35 (expr -> expr SUB_OP expr .)
    COLON           reduce using rule 35 (expr -> expr SUB_OP expr .)
    RPAREN          reduce using rule 35 (expr -> expr SUB_OP expr .)
    RSBRACKET       reduce using rule 35 (expr -> expr SUB_OP expr .)
    COMMA           reduce using rule 35 (expr -> expr SUB_OP expr .)
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84

  ! MUL_OP          [ reduce using rule 35 (expr -> expr SUB_OP expr .) ]
  ! DIV_OP          [ reduce using rule 35 (expr -> expr SUB_OP expr .) ]
  ! MOD_OP          [ reduce using rule 35 (expr -> expr SUB_OP expr .) ]
  ! ADD_OP          [ shift and go to state 82 ]
  ! SUB_OP          [ shift and go to state 78 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 73 ]
  ! CEQ             [ shift and go to state 81 ]
  ! CNE             [ shift and go to state 80 ]
  ! CLT             [ shift and go to state 83 ]
  ! CLE             [ shift and go to state 74 ]
  ! CGT             [ shift and go to state 76 ]
  ! CGE             [ shift and go to state 77 ]


state 114

    (37) expr -> expr DIV_OP expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    ADD_OP          reduce using rule 37 (expr -> expr DIV_OP expr .)
    SUB_OP          reduce using rule 37 (expr -> expr DIV_OP expr .)
    MUL_OP          reduce using rule 37 (expr -> expr DIV_OP expr .)
    DIV_OP          reduce using rule 37 (expr -> expr DIV_OP expr .)
    MOD_OP          reduce using rule 37 (expr -> expr DIV_OP expr .)
    OR              reduce using rule 37 (expr -> expr DIV_OP expr .)
    AND             reduce using rule 37 (expr -> expr DIV_OP expr .)
    CEQ             reduce using rule 37 (expr -> expr DIV_OP expr .)
    CNE             reduce using rule 37 (expr -> expr DIV_OP expr .)
    CLT             reduce using rule 37 (expr -> expr DIV_OP expr .)
    CLE             reduce using rule 37 (expr -> expr DIV_OP expr .)
    CGT             reduce using rule 37 (expr -> expr DIV_OP expr .)
    CGE             reduce using rule 37 (expr -> expr DIV_OP expr .)
    END_STATEMENT   reduce using rule 37 (expr -> expr DIV_OP expr .)
    COLON           reduce using rule 37 (expr -> expr DIV_OP expr .)
    RPAREN          reduce using rule 37 (expr -> expr DIV_OP expr .)
    RSBRACKET       reduce using rule 37 (expr -> expr DIV_OP expr .)
    COMMA           reduce using rule 37 (expr -> expr DIV_OP expr .)

  ! ADD_OP          [ shift and go to state 82 ]
  ! SUB_OP          [ shift and go to state 78 ]
  ! MUL_OP          [ shift and go to state 75 ]
  ! DIV_OP          [ shift and go to state 79 ]
  ! MOD_OP          [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 73 ]
  ! CEQ             [ shift and go to state 81 ]
  ! CNE             [ shift and go to state 80 ]
  ! CLT             [ shift and go to state 83 ]
  ! CLE             [ shift and go to state 74 ]
  ! CGT             [ shift and go to state 76 ]
  ! CGE             [ shift and go to state 77 ]


state 115

    (42) expr -> expr CNE expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    OR              reduce using rule 42 (expr -> expr CNE expr .)
    AND             reduce using rule 42 (expr -> expr CNE expr .)
    CEQ             reduce using rule 42 (expr -> expr CNE expr .)
    CNE             reduce using rule 42 (expr -> expr CNE expr .)
    CLT             reduce using rule 42 (expr -> expr CNE expr .)
    CLE             reduce using rule 42 (expr -> expr CNE expr .)
    CGT             reduce using rule 42 (expr -> expr CNE expr .)
    CGE             reduce using rule 42 (expr -> expr CNE expr .)
    END_STATEMENT   reduce using rule 42 (expr -> expr CNE expr .)
    COLON           reduce using rule 42 (expr -> expr CNE expr .)
    RPAREN          reduce using rule 42 (expr -> expr CNE expr .)
    RSBRACKET       reduce using rule 42 (expr -> expr CNE expr .)
    COMMA           reduce using rule 42 (expr -> expr CNE expr .)
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84

  ! ADD_OP          [ reduce using rule 42 (expr -> expr CNE expr .) ]
  ! SUB_OP          [ reduce using rule 42 (expr -> expr CNE expr .) ]
  ! MUL_OP          [ reduce using rule 42 (expr -> expr CNE expr .) ]
  ! DIV_OP          [ reduce using rule 42 (expr -> expr CNE expr .) ]
  ! MOD_OP          [ reduce using rule 42 (expr -> expr CNE expr .) ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 73 ]
  ! CEQ             [ shift and go to state 81 ]
  ! CNE             [ shift and go to state 80 ]
  ! CLT             [ shift and go to state 83 ]
  ! CLE             [ shift and go to state 74 ]
  ! CGT             [ shift and go to state 76 ]
  ! CGE             [ shift and go to state 77 ]


state 116

    (41) expr -> expr CEQ expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    OR              reduce using rule 41 (expr -> expr CEQ expr .)
    AND             reduce using rule 41 (expr -> expr CEQ expr .)
    CEQ             reduce using rule 41 (expr -> expr CEQ expr .)
    CNE             reduce using rule 41 (expr -> expr CEQ expr .)
    CLT             reduce using rule 41 (expr -> expr CEQ expr .)
    CLE             reduce using rule 41 (expr -> expr CEQ expr .)
    CGT             reduce using rule 41 (expr -> expr CEQ expr .)
    CGE             reduce using rule 41 (expr -> expr CEQ expr .)
    END_STATEMENT   reduce using rule 41 (expr -> expr CEQ expr .)
    COLON           reduce using rule 41 (expr -> expr CEQ expr .)
    RPAREN          reduce using rule 41 (expr -> expr CEQ expr .)
    RSBRACKET       reduce using rule 41 (expr -> expr CEQ expr .)
    COMMA           reduce using rule 41 (expr -> expr CEQ expr .)
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84

  ! ADD_OP          [ reduce using rule 41 (expr -> expr CEQ expr .) ]
  ! SUB_OP          [ reduce using rule 41 (expr -> expr CEQ expr .) ]
  ! MUL_OP          [ reduce using rule 41 (expr -> expr CEQ expr .) ]
  ! DIV_OP          [ reduce using rule 41 (expr -> expr CEQ expr .) ]
  ! MOD_OP          [ reduce using rule 41 (expr -> expr CEQ expr .) ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 73 ]
  ! CEQ             [ shift and go to state 81 ]
  ! CNE             [ shift and go to state 80 ]
  ! CLT             [ shift and go to state 83 ]
  ! CLE             [ shift and go to state 74 ]
  ! CGT             [ shift and go to state 76 ]
  ! CGE             [ shift and go to state 77 ]


state 117

    (34) expr -> expr ADD_OP expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    ADD_OP          reduce using rule 34 (expr -> expr ADD_OP expr .)
    SUB_OP          reduce using rule 34 (expr -> expr ADD_OP expr .)
    OR              reduce using rule 34 (expr -> expr ADD_OP expr .)
    AND             reduce using rule 34 (expr -> expr ADD_OP expr .)
    CEQ             reduce using rule 34 (expr -> expr ADD_OP expr .)
    CNE             reduce using rule 34 (expr -> expr ADD_OP expr .)
    CLT             reduce using rule 34 (expr -> expr ADD_OP expr .)
    CLE             reduce using rule 34 (expr -> expr ADD_OP expr .)
    CGT             reduce using rule 34 (expr -> expr ADD_OP expr .)
    CGE             reduce using rule 34 (expr -> expr ADD_OP expr .)
    END_STATEMENT   reduce using rule 34 (expr -> expr ADD_OP expr .)
    COLON           reduce using rule 34 (expr -> expr ADD_OP expr .)
    RPAREN          reduce using rule 34 (expr -> expr ADD_OP expr .)
    RSBRACKET       reduce using rule 34 (expr -> expr ADD_OP expr .)
    COMMA           reduce using rule 34 (expr -> expr ADD_OP expr .)
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84

  ! MUL_OP          [ reduce using rule 34 (expr -> expr ADD_OP expr .) ]
  ! DIV_OP          [ reduce using rule 34 (expr -> expr ADD_OP expr .) ]
  ! MOD_OP          [ reduce using rule 34 (expr -> expr ADD_OP expr .) ]
  ! ADD_OP          [ shift and go to state 82 ]
  ! SUB_OP          [ shift and go to state 78 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 73 ]
  ! CEQ             [ shift and go to state 81 ]
  ! CNE             [ shift and go to state 80 ]
  ! CLT             [ shift and go to state 83 ]
  ! CLE             [ shift and go to state 74 ]
  ! CGT             [ shift and go to state 76 ]
  ! CGE             [ shift and go to state 77 ]


state 118

    (43) expr -> expr CLT expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    OR              reduce using rule 43 (expr -> expr CLT expr .)
    AND             reduce using rule 43 (expr -> expr CLT expr .)
    CEQ             reduce using rule 43 (expr -> expr CLT expr .)
    CNE             reduce using rule 43 (expr -> expr CLT expr .)
    CLT             reduce using rule 43 (expr -> expr CLT expr .)
    CLE             reduce using rule 43 (expr -> expr CLT expr .)
    CGT             reduce using rule 43 (expr -> expr CLT expr .)
    CGE             reduce using rule 43 (expr -> expr CLT expr .)
    END_STATEMENT   reduce using rule 43 (expr -> expr CLT expr .)
    COLON           reduce using rule 43 (expr -> expr CLT expr .)
    RPAREN          reduce using rule 43 (expr -> expr CLT expr .)
    RSBRACKET       reduce using rule 43 (expr -> expr CLT expr .)
    COMMA           reduce using rule 43 (expr -> expr CLT expr .)
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84

  ! ADD_OP          [ reduce using rule 43 (expr -> expr CLT expr .) ]
  ! SUB_OP          [ reduce using rule 43 (expr -> expr CLT expr .) ]
  ! MUL_OP          [ reduce using rule 43 (expr -> expr CLT expr .) ]
  ! DIV_OP          [ reduce using rule 43 (expr -> expr CLT expr .) ]
  ! MOD_OP          [ reduce using rule 43 (expr -> expr CLT expr .) ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 73 ]
  ! CEQ             [ shift and go to state 81 ]
  ! CNE             [ shift and go to state 80 ]
  ! CLT             [ shift and go to state 83 ]
  ! CLE             [ shift and go to state 74 ]
  ! CGT             [ shift and go to state 76 ]
  ! CGE             [ shift and go to state 77 ]


state 119

    (38) expr -> expr MOD_OP expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    ADD_OP          reduce using rule 38 (expr -> expr MOD_OP expr .)
    SUB_OP          reduce using rule 38 (expr -> expr MOD_OP expr .)
    MUL_OP          reduce using rule 38 (expr -> expr MOD_OP expr .)
    DIV_OP          reduce using rule 38 (expr -> expr MOD_OP expr .)
    MOD_OP          reduce using rule 38 (expr -> expr MOD_OP expr .)
    OR              reduce using rule 38 (expr -> expr MOD_OP expr .)
    AND             reduce using rule 38 (expr -> expr MOD_OP expr .)
    CEQ             reduce using rule 38 (expr -> expr MOD_OP expr .)
    CNE             reduce using rule 38 (expr -> expr MOD_OP expr .)
    CLT             reduce using rule 38 (expr -> expr MOD_OP expr .)
    CLE             reduce using rule 38 (expr -> expr MOD_OP expr .)
    CGT             reduce using rule 38 (expr -> expr MOD_OP expr .)
    CGE             reduce using rule 38 (expr -> expr MOD_OP expr .)
    END_STATEMENT   reduce using rule 38 (expr -> expr MOD_OP expr .)
    COLON           reduce using rule 38 (expr -> expr MOD_OP expr .)
    RPAREN          reduce using rule 38 (expr -> expr MOD_OP expr .)
    RSBRACKET       reduce using rule 38 (expr -> expr MOD_OP expr .)
    COMMA           reduce using rule 38 (expr -> expr MOD_OP expr .)

  ! ADD_OP          [ shift and go to state 82 ]
  ! SUB_OP          [ shift and go to state 78 ]
  ! MUL_OP          [ shift and go to state 75 ]
  ! DIV_OP          [ shift and go to state 79 ]
  ! MOD_OP          [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 73 ]
  ! CEQ             [ shift and go to state 81 ]
  ! CNE             [ shift and go to state 80 ]
  ! CLT             [ shift and go to state 83 ]
  ! CLE             [ shift and go to state 74 ]
  ! CGT             [ shift and go to state 76 ]
  ! CGE             [ shift and go to state 77 ]


state 120

    (39) expr -> expr OR expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    OR              reduce using rule 39 (expr -> expr OR expr .)
    AND             reduce using rule 39 (expr -> expr OR expr .)
    END_STATEMENT   reduce using rule 39 (expr -> expr OR expr .)
    COLON           reduce using rule 39 (expr -> expr OR expr .)
    RPAREN          reduce using rule 39 (expr -> expr OR expr .)
    RSBRACKET       reduce using rule 39 (expr -> expr OR expr .)
    COMMA           reduce using rule 39 (expr -> expr OR expr .)
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77

  ! ADD_OP          [ reduce using rule 39 (expr -> expr OR expr .) ]
  ! SUB_OP          [ reduce using rule 39 (expr -> expr OR expr .) ]
  ! MUL_OP          [ reduce using rule 39 (expr -> expr OR expr .) ]
  ! DIV_OP          [ reduce using rule 39 (expr -> expr OR expr .) ]
  ! MOD_OP          [ reduce using rule 39 (expr -> expr OR expr .) ]
  ! CEQ             [ reduce using rule 39 (expr -> expr OR expr .) ]
  ! CNE             [ reduce using rule 39 (expr -> expr OR expr .) ]
  ! CLT             [ reduce using rule 39 (expr -> expr OR expr .) ]
  ! CLE             [ reduce using rule 39 (expr -> expr OR expr .) ]
  ! CGT             [ reduce using rule 39 (expr -> expr OR expr .) ]
  ! CGE             [ reduce using rule 39 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 73 ]


state 121

    (59) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_BOOL . COLON

    COLON           shift and go to state 138


state 122

    (57) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_DOUBLE . COLON

    COLON           shift and go to state 139


state 123

    (55) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_INT . COLON

    COLON           shift and go to state 140


state 124

    (60) head -> IDENTIFIER LPAREN RPAREN RETURN T_BOOL COLON .

    END_STATEMENT   reduce using rule 60 (head -> IDENTIFIER LPAREN RPAREN RETURN T_BOOL COLON .)


state 125

    (58) head -> IDENTIFIER LPAREN RPAREN RETURN T_DOUBLE COLON .

    END_STATEMENT   reduce using rule 58 (head -> IDENTIFIER LPAREN RPAREN RETURN T_DOUBLE COLON .)


state 126

    (56) head -> IDENTIFIER LPAREN RPAREN RETURN T_INT COLON .

    END_STATEMENT   reduce using rule 56 (head -> IDENTIFIER LPAREN RPAREN RETURN T_INT COLON .)


state 127

    (26) expr -> IDENTIFIER LSBRACKET expr . RSBRACKET
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    RSBRACKET       shift and go to state 141
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 73
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77


state 128

    (71) while_stmt -> WHILE expr COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 142


state 129

    (72) for_stmt -> FOR IDENTIFIER IN RANGE . LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT

    LPAREN          shift and go to state 143


state 130

    (15) display -> DISPLAY LPAREN INTEGER RPAREN .

    END_STATEMENT   reduce using rule 15 (display -> DISPLAY LPAREN INTEGER RPAREN .)


state 131

    (14) display -> DISPLAY LPAREN IDENTIFIER RPAREN .

    END_STATEMENT   reduce using rule 14 (display -> DISPLAY LPAREN IDENTIFIER RPAREN .)


state 132

    (20) const_decl -> IDENTIFIER CONST LSBRACKET list_args . RSBRACKET

    RSBRACKET       shift and go to state 144


state 133

    (18) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET . ASSIGN expr
    (26) expr -> IDENTIFIER LSBRACKET expr RSBRACKET .

    ASSIGN          shift and go to state 145
    ADD_OP          reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    SUB_OP          reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MUL_OP          reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    DIV_OP          reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MOD_OP          reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    OR              reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    AND             reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CEQ             reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CNE             reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLT             reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLE             reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGT             reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGE             reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    END_STATEMENT   reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)


state 134

    (21) func_call -> IDENTIFIER LPAREN list_args RPAREN .

    ADD_OP          reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    SUB_OP          reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    MUL_OP          reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    DIV_OP          reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    MOD_OP          reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    OR              reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    AND             reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CEQ             reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CNE             reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CLT             reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CLE             reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CGT             reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CGE             reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    END_STATEMENT   reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    COLON           reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    RPAREN          reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    RSBRACKET       reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    COMMA           reduce using rule 21 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)


state 135

    (24) list_args -> expr COMMA . list_args
    (23) list_args -> . expr
    (24) list_args -> . expr COMMA list_args
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 103
    boolean                        shift and go to state 23
    list_args                      shift and go to state 146

state 136

    (17) assignment -> IDENTIFIER ASSIGN LSBRACKET list_args . RSBRACKET

    RSBRACKET       shift and go to state 147


state 137

    (73) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT
    (74) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    INDENT          shift and go to state 148


state 138

    (59) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_BOOL COLON .

    END_STATEMENT   reduce using rule 59 (head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_BOOL COLON .)


state 139

    (57) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_DOUBLE COLON .

    END_STATEMENT   reduce using rule 57 (head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_DOUBLE COLON .)


state 140

    (55) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_INT COLON .

    END_STATEMENT   reduce using rule 55 (head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_INT COLON .)


state 141

    (26) expr -> IDENTIFIER LSBRACKET expr RSBRACKET .

    ADD_OP          reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    SUB_OP          reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MUL_OP          reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    DIV_OP          reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MOD_OP          reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    OR              reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    AND             reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CEQ             reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CNE             reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLT             reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLE             reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGT             reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGE             reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    END_STATEMENT   reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    COLON           reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    RPAREN          reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    RSBRACKET       reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    COMMA           reduce using rule 26 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)


state 142

    (71) while_stmt -> WHILE expr COLON END_STATEMENT INDENT . body DEDENT
    (69) body -> . stmt
    (70) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (48) compound_stmt -> . func_def
    (49) compound_stmt -> . if_stmt
    (50) compound_stmt -> . while_stmt
    (51) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (52) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (73) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (74) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (71) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (72) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (20) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) display -> . DISPLAY LPAREN IDENTIFIER RPAREN
    (15) display -> . DISPLAY LPAREN INTEGER RPAREN
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    FUNCTION        shift and go to state 2
    IF              shift and go to state 41
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    IDENTIFIER      shift and go to state 31
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    RETURN          shift and go to state 25
    DISPLAY         shift and go to state 30
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    body                           shift and go to state 149
    func_call                      shift and go to state 42
    if_stmt                        shift and go to state 43
    func_def                       shift and go to state 33
    simple_stmt                    shift and go to state 34
    expr                           shift and go to state 44
    for_stmt                       shift and go to state 38
    stmt                           shift and go to state 37
    display                        shift and go to state 48
    small_stmt                     shift and go to state 21
    while_stmt                     shift and go to state 46
    boolean                        shift and go to state 23
    return_stmt                    shift and go to state 24
    assignment                     shift and go to state 35
    const_decl                     shift and go to state 29
    compound_stmt                  shift and go to state 32

state 143

    (72) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN . expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    expr                           shift and go to state 150
    boolean                        shift and go to state 23
    func_call                      shift and go to state 42

state 144

    (20) const_decl -> IDENTIFIER CONST LSBRACKET list_args RSBRACKET .

    END_STATEMENT   reduce using rule 20 (const_decl -> IDENTIFIER CONST LSBRACKET list_args RSBRACKET .)


state 145

    (18) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN . expr
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    func_call                      shift and go to state 42
    expr                           shift and go to state 151
    boolean                        shift and go to state 23

state 146

    (24) list_args -> expr COMMA list_args .

    RPAREN          reduce using rule 24 (list_args -> expr COMMA list_args .)
    RSBRACKET       reduce using rule 24 (list_args -> expr COMMA list_args .)


state 147

    (17) assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET .

    END_STATEMENT   reduce using rule 17 (assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET .)


state 148

    (73) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT
    (74) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) body -> . stmt
    (70) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (48) compound_stmt -> . func_def
    (49) compound_stmt -> . if_stmt
    (50) compound_stmt -> . while_stmt
    (51) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (52) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (73) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (74) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (71) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (72) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (20) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) display -> . DISPLAY LPAREN IDENTIFIER RPAREN
    (15) display -> . DISPLAY LPAREN INTEGER RPAREN
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    FUNCTION        shift and go to state 2
    IF              shift and go to state 41
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    IDENTIFIER      shift and go to state 31
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    RETURN          shift and go to state 25
    DISPLAY         shift and go to state 30
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    body                           shift and go to state 152
    func_call                      shift and go to state 42
    if_stmt                        shift and go to state 43
    func_def                       shift and go to state 33
    simple_stmt                    shift and go to state 34
    expr                           shift and go to state 44
    for_stmt                       shift and go to state 38
    stmt                           shift and go to state 37
    display                        shift and go to state 48
    small_stmt                     shift and go to state 21
    while_stmt                     shift and go to state 46
    boolean                        shift and go to state 23
    return_stmt                    shift and go to state 24
    assignment                     shift and go to state 35
    const_decl                     shift and go to state 29
    compound_stmt                  shift and go to state 32

state 149

    (71) while_stmt -> WHILE expr COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 153


state 150

    (72) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr . COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    COMMA           shift and go to state 154
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 73
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77


state 151

    (18) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr .
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 18 (assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr .)
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 73
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77


state 152

    (73) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT
    (74) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    DEDENT          shift and go to state 155


state 153

    (71) while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .

    FUNCTION        reduce using rule 71 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 71 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 71 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 71 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 71 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 71 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 71 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 71 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 71 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 71 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 71 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 71 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 71 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 71 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)


state 154

    (72) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA . expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    IDENTIFIER      shift and go to state 60
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    expr                           shift and go to state 156
    boolean                        shift and go to state 23
    func_call                      shift and go to state 42

state 155

    (73) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .
    (74) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT . ELSE COLON END_STATEMENT INDENT body DEDENT

    FUNCTION        reduce using rule 73 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 73 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 73 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 73 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 73 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 73 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 73 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 73 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 73 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 73 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 73 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 73 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 73 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 73 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            shift and go to state 157


state 156

    (72) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr . RPAREN COLON END_STATEMENT INDENT body DEDENT
    (34) expr -> expr . ADD_OP expr
    (35) expr -> expr . SUB_OP expr
    (36) expr -> expr . MUL_OP expr
    (37) expr -> expr . DIV_OP expr
    (38) expr -> expr . MOD_OP expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . CEQ expr
    (42) expr -> expr . CNE expr
    (43) expr -> expr . CLT expr
    (44) expr -> expr . CLE expr
    (45) expr -> expr . CGT expr
    (46) expr -> expr . CGE expr

    RPAREN          shift and go to state 158
    ADD_OP          shift and go to state 82
    SUB_OP          shift and go to state 78
    MUL_OP          shift and go to state 75
    DIV_OP          shift and go to state 79
    MOD_OP          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 73
    CEQ             shift and go to state 81
    CNE             shift and go to state 80
    CLT             shift and go to state 83
    CLE             shift and go to state 74
    CGT             shift and go to state 76
    CGE             shift and go to state 77


state 157

    (74) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE . COLON END_STATEMENT INDENT body DEDENT

    COLON           shift and go to state 159


state 158

    (72) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN . COLON END_STATEMENT INDENT body DEDENT

    COLON           shift and go to state 160


state 159

    (74) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 161


state 160

    (72) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 162


state 161

    (74) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 163


state 162

    (72) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 164


state 163

    (74) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT . body DEDENT
    (69) body -> . stmt
    (70) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (48) compound_stmt -> . func_def
    (49) compound_stmt -> . if_stmt
    (50) compound_stmt -> . while_stmt
    (51) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (52) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (73) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (74) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (71) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (72) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (20) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) display -> . DISPLAY LPAREN IDENTIFIER RPAREN
    (15) display -> . DISPLAY LPAREN INTEGER RPAREN
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    FUNCTION        shift and go to state 2
    IF              shift and go to state 41
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    IDENTIFIER      shift and go to state 31
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    RETURN          shift and go to state 25
    DISPLAY         shift and go to state 30
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    body                           shift and go to state 165
    func_call                      shift and go to state 42
    if_stmt                        shift and go to state 43
    func_def                       shift and go to state 33
    simple_stmt                    shift and go to state 34
    expr                           shift and go to state 44
    for_stmt                       shift and go to state 38
    stmt                           shift and go to state 37
    display                        shift and go to state 48
    small_stmt                     shift and go to state 21
    while_stmt                     shift and go to state 46
    boolean                        shift and go to state 23
    return_stmt                    shift and go to state 24
    assignment                     shift and go to state 35
    const_decl                     shift and go to state 29
    compound_stmt                  shift and go to state 32

state 164

    (72) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT . body DEDENT
    (69) body -> . stmt
    (70) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (48) compound_stmt -> . func_def
    (49) compound_stmt -> . if_stmt
    (50) compound_stmt -> . while_stmt
    (51) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (52) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (73) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (74) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (71) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (72) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (16) assignment -> . IDENTIFIER ASSIGN expr
    (17) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (18) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (19) const_decl -> . IDENTIFIER CONST expr
    (20) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (25) expr -> . IDENTIFIER
    (26) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (27) expr -> . LPAREN expr RPAREN
    (28) expr -> . func_call
    (29) expr -> . INTEGER
    (30) expr -> . DOUBLE
    (31) expr -> . boolean
    (34) expr -> . expr ADD_OP expr
    (35) expr -> . expr SUB_OP expr
    (36) expr -> . expr MUL_OP expr
    (37) expr -> . expr DIV_OP expr
    (38) expr -> . expr MOD_OP expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr CEQ expr
    (42) expr -> . expr CNE expr
    (43) expr -> . expr CLT expr
    (44) expr -> . expr CLE expr
    (45) expr -> . expr CGT expr
    (46) expr -> . expr CGE expr
    (47) expr -> . SUB_OP expr
    (12) return_stmt -> . RETURN
    (13) return_stmt -> . RETURN expr
    (14) display -> . DISPLAY LPAREN IDENTIFIER RPAREN
    (15) display -> . DISPLAY LPAREN INTEGER RPAREN
    (21) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (22) func_call -> . IDENTIFIER LPAREN RPAREN
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    FUNCTION        shift and go to state 2
    IF              shift and go to state 41
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    IDENTIFIER      shift and go to state 31
    LPAREN          shift and go to state 39
    INTEGER         shift and go to state 26
    DOUBLE          shift and go to state 47
    SUB_OP          shift and go to state 45
    RETURN          shift and go to state 25
    DISPLAY         shift and go to state 30
    TRUE            shift and go to state 27
    FALSE           shift and go to state 40

    body                           shift and go to state 166
    func_call                      shift and go to state 42
    if_stmt                        shift and go to state 43
    func_def                       shift and go to state 33
    simple_stmt                    shift and go to state 34
    expr                           shift and go to state 44
    for_stmt                       shift and go to state 38
    stmt                           shift and go to state 37
    display                        shift and go to state 48
    small_stmt                     shift and go to state 21
    while_stmt                     shift and go to state 46
    boolean                        shift and go to state 23
    return_stmt                    shift and go to state 24
    assignment                     shift and go to state 35
    const_decl                     shift and go to state 29
    compound_stmt                  shift and go to state 32

state 165

    (74) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 167


state 166

    (72) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 168


state 167

    (74) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .

    FUNCTION        reduce using rule 74 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 74 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 74 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 74 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 74 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 74 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 74 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 74 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 74 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 74 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 74 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 74 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 74 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 74 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)


state 168

    (72) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .

    FUNCTION        reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)

