Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    FUNCTION
    IN
    WHILE
    TRUE
    COLON
    COMMA
    END
    FOR
    ELSE
    RANGE
    IF
    FALSE
    ELSEIF

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt
Rule 2     program -> stmt program
Rule 3     stmt -> simple_stmt
Rule 4     simple_stmt -> small_stmt END_STATEMENT
Rule 5     small_stmt -> assignment
Rule 6     small_stmt -> const_decl
Rule 7     small_stmt -> expr
Rule 8     small_stmt -> return_stmt
Rule 9     small_stmt -> loop_stmt
Rule 10    return_stmt -> RETURN
Rule 11    return_stmt -> RETURN expr
Rule 12    loop_stmt -> BREAK
Rule 13    loop_stmt -> CONTINUE
Rule 14    assignment -> IDENTIFIER ASSIGN expr
Rule 15    const_decl -> IDENTIFIER CONST expr
Rule 16    expr -> IDENTIFIER
Rule 17    expr -> ARRAY_CELL
Rule 18    expr -> LPAREN expr RPAREN
Rule 19    expr -> arithmetic
Rule 20    expr -> cond_list
Rule 21    expr -> INTEGER
Rule 22    expr -> DOUBLE
Rule 23    arithmetic -> expr ADD_OP expr
Rule 24    arithmetic -> expr SUB_OP expr
Rule 25    arithmetic -> expr MUL_OP expr
Rule 26    arithmetic -> expr DIV_OP expr
Rule 27    arithmetic -> expr MOD_OP expr
Rule 28    comb_op -> OR
Rule 29    comb_op -> AND
Rule 30    comp_op -> CEQ
Rule 31    comp_op -> CNE
Rule 32    comp_op -> CLT
Rule 33    comp_op -> CLE
Rule 34    comp_op -> CGT
Rule 35    comp_op -> CGE
Rule 36    cond_list -> condition
Rule 37    cond_list -> condition comb_op cond_list
Rule 38    cond_list -> LPAREN cond_list RPAREN
Rule 39    condition -> expr comp_op expr

Terminals, with rules where they appear

ADD_OP               : 23
AND                  : 29
ARRAY_CELL           : 17
ASSIGN               : 14
BREAK                : 12
CEQ                  : 30
CGE                  : 35
CGT                  : 34
CLE                  : 33
CLT                  : 32
CNE                  : 31
COLON                : 
COMMA                : 
CONST                : 15
CONTINUE             : 13
DIV_OP               : 26
DOUBLE               : 22
ELSE                 : 
ELSEIF               : 
END                  : 
END_STATEMENT        : 4
FALSE                : 
FOR                  : 
FUNCTION             : 
IDENTIFIER           : 14 15 16
IF                   : 
IN                   : 
INTEGER              : 21
LPAREN               : 18 38
MOD_OP               : 27
MUL_OP               : 25
OR                   : 28
RANGE                : 
RETURN               : 10 11
RPAREN               : 18 38
SUB_OP               : 24
TRUE                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

arithmetic           : 19
assignment           : 5
comb_op              : 37
comp_op              : 39
cond_list            : 20 37 38
condition            : 36 37
const_decl           : 6
expr                 : 7 11 14 15 18 23 23 24 24 25 25 26 26 27 27 39 39
loop_stmt            : 9
program              : 2 0
return_stmt          : 8
simple_stmt          : 3
small_stmt           : 4
stmt                 : 1 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt
    (2) program -> . stmt program
    (3) stmt -> . simple_stmt
    (4) simple_stmt -> . small_stmt END_STATEMENT
    (5) small_stmt -> . assignment
    (6) small_stmt -> . const_decl
    (7) small_stmt -> . expr
    (8) small_stmt -> . return_stmt
    (9) small_stmt -> . loop_stmt
    (14) assignment -> . IDENTIFIER ASSIGN expr
    (15) const_decl -> . IDENTIFIER CONST expr
    (16) expr -> . IDENTIFIER
    (17) expr -> . ARRAY_CELL
    (18) expr -> . LPAREN expr RPAREN
    (19) expr -> . arithmetic
    (20) expr -> . cond_list
    (21) expr -> . INTEGER
    (22) expr -> . DOUBLE
    (10) return_stmt -> . RETURN
    (11) return_stmt -> . RETURN expr
    (12) loop_stmt -> . BREAK
    (13) loop_stmt -> . CONTINUE
    (23) arithmetic -> . expr ADD_OP expr
    (24) arithmetic -> . expr SUB_OP expr
    (25) arithmetic -> . expr MUL_OP expr
    (26) arithmetic -> . expr DIV_OP expr
    (27) arithmetic -> . expr MOD_OP expr
    (36) cond_list -> . condition
    (37) cond_list -> . condition comb_op cond_list
    (38) cond_list -> . LPAREN cond_list RPAREN
    (39) condition -> . expr comp_op expr

    IDENTIFIER      shift and go to state 7
    ARRAY_CELL      shift and go to state 3
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 15
    RETURN          shift and go to state 1
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 18

    simple_stmt                    shift and go to state 9
    assignment                     shift and go to state 10
    condition                      shift and go to state 14
    stmt                           shift and go to state 11
    small_stmt                     shift and go to state 2
    const_decl                     shift and go to state 17
    program                        shift and go to state 5
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 12
    expr                           shift and go to state 19
    cond_list                      shift and go to state 20
    arithmetic                     shift and go to state 8

state 1

    (10) return_stmt -> RETURN .
    (11) return_stmt -> RETURN . expr
    (16) expr -> . IDENTIFIER
    (17) expr -> . ARRAY_CELL
    (18) expr -> . LPAREN expr RPAREN
    (19) expr -> . arithmetic
    (20) expr -> . cond_list
    (21) expr -> . INTEGER
    (22) expr -> . DOUBLE
    (23) arithmetic -> . expr ADD_OP expr
    (24) arithmetic -> . expr SUB_OP expr
    (25) arithmetic -> . expr MUL_OP expr
    (26) arithmetic -> . expr DIV_OP expr
    (27) arithmetic -> . expr MOD_OP expr
    (36) cond_list -> . condition
    (37) cond_list -> . condition comb_op cond_list
    (38) cond_list -> . LPAREN cond_list RPAREN
    (39) condition -> . expr comp_op expr

    END_STATEMENT   reduce using rule 10 (return_stmt -> RETURN .)
    IDENTIFIER      shift and go to state 22
    ARRAY_CELL      shift and go to state 3
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 15

    expr                           shift and go to state 21
    arithmetic                     shift and go to state 8
    cond_list                      shift and go to state 20
    condition                      shift and go to state 14

state 2

    (4) simple_stmt -> small_stmt . END_STATEMENT

    END_STATEMENT   shift and go to state 23


state 3

    (17) expr -> ARRAY_CELL .

    ADD_OP          reduce using rule 17 (expr -> ARRAY_CELL .)
    SUB_OP          reduce using rule 17 (expr -> ARRAY_CELL .)
    MUL_OP          reduce using rule 17 (expr -> ARRAY_CELL .)
    DIV_OP          reduce using rule 17 (expr -> ARRAY_CELL .)
    MOD_OP          reduce using rule 17 (expr -> ARRAY_CELL .)
    CEQ             reduce using rule 17 (expr -> ARRAY_CELL .)
    CNE             reduce using rule 17 (expr -> ARRAY_CELL .)
    CLT             reduce using rule 17 (expr -> ARRAY_CELL .)
    CLE             reduce using rule 17 (expr -> ARRAY_CELL .)
    CGT             reduce using rule 17 (expr -> ARRAY_CELL .)
    CGE             reduce using rule 17 (expr -> ARRAY_CELL .)
    END_STATEMENT   reduce using rule 17 (expr -> ARRAY_CELL .)
    RPAREN          reduce using rule 17 (expr -> ARRAY_CELL .)
    OR              reduce using rule 17 (expr -> ARRAY_CELL .)
    AND             reduce using rule 17 (expr -> ARRAY_CELL .)


state 4

    (8) small_stmt -> return_stmt .

    END_STATEMENT   reduce using rule 8 (small_stmt -> return_stmt .)


state 5

    (0) S' -> program .



state 6

    (21) expr -> INTEGER .

    ADD_OP          reduce using rule 21 (expr -> INTEGER .)
    SUB_OP          reduce using rule 21 (expr -> INTEGER .)
    MUL_OP          reduce using rule 21 (expr -> INTEGER .)
    DIV_OP          reduce using rule 21 (expr -> INTEGER .)
    MOD_OP          reduce using rule 21 (expr -> INTEGER .)
    CEQ             reduce using rule 21 (expr -> INTEGER .)
    CNE             reduce using rule 21 (expr -> INTEGER .)
    CLT             reduce using rule 21 (expr -> INTEGER .)
    CLE             reduce using rule 21 (expr -> INTEGER .)
    CGT             reduce using rule 21 (expr -> INTEGER .)
    CGE             reduce using rule 21 (expr -> INTEGER .)
    END_STATEMENT   reduce using rule 21 (expr -> INTEGER .)
    RPAREN          reduce using rule 21 (expr -> INTEGER .)
    OR              reduce using rule 21 (expr -> INTEGER .)
    AND             reduce using rule 21 (expr -> INTEGER .)


state 7

    (14) assignment -> IDENTIFIER . ASSIGN expr
    (15) const_decl -> IDENTIFIER . CONST expr
    (16) expr -> IDENTIFIER .

    ASSIGN          shift and go to state 25
    CONST           shift and go to state 24
    ADD_OP          reduce using rule 16 (expr -> IDENTIFIER .)
    SUB_OP          reduce using rule 16 (expr -> IDENTIFIER .)
    MUL_OP          reduce using rule 16 (expr -> IDENTIFIER .)
    DIV_OP          reduce using rule 16 (expr -> IDENTIFIER .)
    MOD_OP          reduce using rule 16 (expr -> IDENTIFIER .)
    CEQ             reduce using rule 16 (expr -> IDENTIFIER .)
    CNE             reduce using rule 16 (expr -> IDENTIFIER .)
    CLT             reduce using rule 16 (expr -> IDENTIFIER .)
    CLE             reduce using rule 16 (expr -> IDENTIFIER .)
    CGT             reduce using rule 16 (expr -> IDENTIFIER .)
    CGE             reduce using rule 16 (expr -> IDENTIFIER .)
    END_STATEMENT   reduce using rule 16 (expr -> IDENTIFIER .)


state 8

    (19) expr -> arithmetic .

    ADD_OP          reduce using rule 19 (expr -> arithmetic .)
    SUB_OP          reduce using rule 19 (expr -> arithmetic .)
    MUL_OP          reduce using rule 19 (expr -> arithmetic .)
    DIV_OP          reduce using rule 19 (expr -> arithmetic .)
    MOD_OP          reduce using rule 19 (expr -> arithmetic .)
    CEQ             reduce using rule 19 (expr -> arithmetic .)
    CNE             reduce using rule 19 (expr -> arithmetic .)
    CLT             reduce using rule 19 (expr -> arithmetic .)
    CLE             reduce using rule 19 (expr -> arithmetic .)
    CGT             reduce using rule 19 (expr -> arithmetic .)
    CGE             reduce using rule 19 (expr -> arithmetic .)
    END_STATEMENT   reduce using rule 19 (expr -> arithmetic .)
    RPAREN          reduce using rule 19 (expr -> arithmetic .)
    OR              reduce using rule 19 (expr -> arithmetic .)
    AND             reduce using rule 19 (expr -> arithmetic .)


state 9

    (3) stmt -> simple_stmt .

    IDENTIFIER      reduce using rule 3 (stmt -> simple_stmt .)
    ARRAY_CELL      reduce using rule 3 (stmt -> simple_stmt .)
    LPAREN          reduce using rule 3 (stmt -> simple_stmt .)
    INTEGER         reduce using rule 3 (stmt -> simple_stmt .)
    DOUBLE          reduce using rule 3 (stmt -> simple_stmt .)
    RETURN          reduce using rule 3 (stmt -> simple_stmt .)
    BREAK           reduce using rule 3 (stmt -> simple_stmt .)
    CONTINUE        reduce using rule 3 (stmt -> simple_stmt .)
    $end            reduce using rule 3 (stmt -> simple_stmt .)


state 10

    (5) small_stmt -> assignment .

    END_STATEMENT   reduce using rule 5 (small_stmt -> assignment .)


state 11

    (1) program -> stmt .
    (2) program -> stmt . program
    (1) program -> . stmt
    (2) program -> . stmt program
    (3) stmt -> . simple_stmt
    (4) simple_stmt -> . small_stmt END_STATEMENT
    (5) small_stmt -> . assignment
    (6) small_stmt -> . const_decl
    (7) small_stmt -> . expr
    (8) small_stmt -> . return_stmt
    (9) small_stmt -> . loop_stmt
    (14) assignment -> . IDENTIFIER ASSIGN expr
    (15) const_decl -> . IDENTIFIER CONST expr
    (16) expr -> . IDENTIFIER
    (17) expr -> . ARRAY_CELL
    (18) expr -> . LPAREN expr RPAREN
    (19) expr -> . arithmetic
    (20) expr -> . cond_list
    (21) expr -> . INTEGER
    (22) expr -> . DOUBLE
    (10) return_stmt -> . RETURN
    (11) return_stmt -> . RETURN expr
    (12) loop_stmt -> . BREAK
    (13) loop_stmt -> . CONTINUE
    (23) arithmetic -> . expr ADD_OP expr
    (24) arithmetic -> . expr SUB_OP expr
    (25) arithmetic -> . expr MUL_OP expr
    (26) arithmetic -> . expr DIV_OP expr
    (27) arithmetic -> . expr MOD_OP expr
    (36) cond_list -> . condition
    (37) cond_list -> . condition comb_op cond_list
    (38) cond_list -> . LPAREN cond_list RPAREN
    (39) condition -> . expr comp_op expr

    $end            reduce using rule 1 (program -> stmt .)
    IDENTIFIER      shift and go to state 7
    ARRAY_CELL      shift and go to state 3
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 15
    RETURN          shift and go to state 1
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 18

    simple_stmt                    shift and go to state 9
    assignment                     shift and go to state 10
    condition                      shift and go to state 14
    stmt                           shift and go to state 11
    small_stmt                     shift and go to state 2
    const_decl                     shift and go to state 17
    program                        shift and go to state 26
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 12
    expr                           shift and go to state 19
    cond_list                      shift and go to state 20
    arithmetic                     shift and go to state 8

state 12

    (9) small_stmt -> loop_stmt .

    END_STATEMENT   reduce using rule 9 (small_stmt -> loop_stmt .)


state 13

    (18) expr -> LPAREN . expr RPAREN
    (38) cond_list -> LPAREN . cond_list RPAREN
    (16) expr -> . IDENTIFIER
    (17) expr -> . ARRAY_CELL
    (18) expr -> . LPAREN expr RPAREN
    (19) expr -> . arithmetic
    (20) expr -> . cond_list
    (21) expr -> . INTEGER
    (22) expr -> . DOUBLE
    (36) cond_list -> . condition
    (37) cond_list -> . condition comb_op cond_list
    (38) cond_list -> . LPAREN cond_list RPAREN
    (23) arithmetic -> . expr ADD_OP expr
    (24) arithmetic -> . expr SUB_OP expr
    (25) arithmetic -> . expr MUL_OP expr
    (26) arithmetic -> . expr DIV_OP expr
    (27) arithmetic -> . expr MOD_OP expr
    (39) condition -> . expr comp_op expr

    IDENTIFIER      shift and go to state 22
    ARRAY_CELL      shift and go to state 3
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 15

    expr                           shift and go to state 27
    arithmetic                     shift and go to state 8
    cond_list                      shift and go to state 28
    condition                      shift and go to state 14

state 14

    (36) cond_list -> condition .
    (37) cond_list -> condition . comb_op cond_list
    (28) comb_op -> . OR
    (29) comb_op -> . AND

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    ADD_OP          reduce using rule 36 (cond_list -> condition .)
    SUB_OP          reduce using rule 36 (cond_list -> condition .)
    MUL_OP          reduce using rule 36 (cond_list -> condition .)
    DIV_OP          reduce using rule 36 (cond_list -> condition .)
    MOD_OP          reduce using rule 36 (cond_list -> condition .)
    CEQ             reduce using rule 36 (cond_list -> condition .)
    CNE             reduce using rule 36 (cond_list -> condition .)
    CLT             reduce using rule 36 (cond_list -> condition .)
    CLE             reduce using rule 36 (cond_list -> condition .)
    CGT             reduce using rule 36 (cond_list -> condition .)
    CGE             reduce using rule 36 (cond_list -> condition .)
    END_STATEMENT   reduce using rule 36 (cond_list -> condition .)
    RPAREN          reduce using rule 36 (cond_list -> condition .)
    OR              shift and go to state 31
    AND             shift and go to state 29

  ! OR              [ reduce using rule 36 (cond_list -> condition .) ]
  ! AND             [ reduce using rule 36 (cond_list -> condition .) ]

    comb_op                        shift and go to state 30

state 15

    (22) expr -> DOUBLE .

    ADD_OP          reduce using rule 22 (expr -> DOUBLE .)
    SUB_OP          reduce using rule 22 (expr -> DOUBLE .)
    MUL_OP          reduce using rule 22 (expr -> DOUBLE .)
    DIV_OP          reduce using rule 22 (expr -> DOUBLE .)
    MOD_OP          reduce using rule 22 (expr -> DOUBLE .)
    CEQ             reduce using rule 22 (expr -> DOUBLE .)
    CNE             reduce using rule 22 (expr -> DOUBLE .)
    CLT             reduce using rule 22 (expr -> DOUBLE .)
    CLE             reduce using rule 22 (expr -> DOUBLE .)
    CGT             reduce using rule 22 (expr -> DOUBLE .)
    CGE             reduce using rule 22 (expr -> DOUBLE .)
    END_STATEMENT   reduce using rule 22 (expr -> DOUBLE .)
    RPAREN          reduce using rule 22 (expr -> DOUBLE .)
    OR              reduce using rule 22 (expr -> DOUBLE .)
    AND             reduce using rule 22 (expr -> DOUBLE .)


state 16

    (12) loop_stmt -> BREAK .

    END_STATEMENT   reduce using rule 12 (loop_stmt -> BREAK .)


state 17

    (6) small_stmt -> const_decl .

    END_STATEMENT   reduce using rule 6 (small_stmt -> const_decl .)


state 18

    (13) loop_stmt -> CONTINUE .

    END_STATEMENT   reduce using rule 13 (loop_stmt -> CONTINUE .)


state 19

    (7) small_stmt -> expr .
    (23) arithmetic -> expr . ADD_OP expr
    (24) arithmetic -> expr . SUB_OP expr
    (25) arithmetic -> expr . MUL_OP expr
    (26) arithmetic -> expr . DIV_OP expr
    (27) arithmetic -> expr . MOD_OP expr
    (39) condition -> expr . comp_op expr
    (30) comp_op -> . CEQ
    (31) comp_op -> . CNE
    (32) comp_op -> . CLT
    (33) comp_op -> . CLE
    (34) comp_op -> . CGT
    (35) comp_op -> . CGE

    END_STATEMENT   reduce using rule 7 (small_stmt -> expr .)
    ADD_OP          shift and go to state 40
    SUB_OP          shift and go to state 36
    MUL_OP          shift and go to state 33
    DIV_OP          shift and go to state 37
    MOD_OP          shift and go to state 42
    CEQ             shift and go to state 39
    CNE             shift and go to state 38
    CLT             shift and go to state 41
    CLE             shift and go to state 32
    CGT             shift and go to state 43
    CGE             shift and go to state 34

    comp_op                        shift and go to state 35

state 20

    (20) expr -> cond_list .

    ADD_OP          reduce using rule 20 (expr -> cond_list .)
    SUB_OP          reduce using rule 20 (expr -> cond_list .)
    MUL_OP          reduce using rule 20 (expr -> cond_list .)
    DIV_OP          reduce using rule 20 (expr -> cond_list .)
    MOD_OP          reduce using rule 20 (expr -> cond_list .)
    CEQ             reduce using rule 20 (expr -> cond_list .)
    CNE             reduce using rule 20 (expr -> cond_list .)
    CLT             reduce using rule 20 (expr -> cond_list .)
    CLE             reduce using rule 20 (expr -> cond_list .)
    CGT             reduce using rule 20 (expr -> cond_list .)
    CGE             reduce using rule 20 (expr -> cond_list .)
    END_STATEMENT   reduce using rule 20 (expr -> cond_list .)
    RPAREN          reduce using rule 20 (expr -> cond_list .)
    OR              reduce using rule 20 (expr -> cond_list .)
    AND             reduce using rule 20 (expr -> cond_list .)


state 21

    (11) return_stmt -> RETURN expr .
    (23) arithmetic -> expr . ADD_OP expr
    (24) arithmetic -> expr . SUB_OP expr
    (25) arithmetic -> expr . MUL_OP expr
    (26) arithmetic -> expr . DIV_OP expr
    (27) arithmetic -> expr . MOD_OP expr
    (39) condition -> expr . comp_op expr
    (30) comp_op -> . CEQ
    (31) comp_op -> . CNE
    (32) comp_op -> . CLT
    (33) comp_op -> . CLE
    (34) comp_op -> . CGT
    (35) comp_op -> . CGE

    END_STATEMENT   reduce using rule 11 (return_stmt -> RETURN expr .)
    ADD_OP          shift and go to state 40
    SUB_OP          shift and go to state 36
    MUL_OP          shift and go to state 33
    DIV_OP          shift and go to state 37
    MOD_OP          shift and go to state 42
    CEQ             shift and go to state 39
    CNE             shift and go to state 38
    CLT             shift and go to state 41
    CLE             shift and go to state 32
    CGT             shift and go to state 43
    CGE             shift and go to state 34

    comp_op                        shift and go to state 35

state 22

    (16) expr -> IDENTIFIER .

    ADD_OP          reduce using rule 16 (expr -> IDENTIFIER .)
    SUB_OP          reduce using rule 16 (expr -> IDENTIFIER .)
    MUL_OP          reduce using rule 16 (expr -> IDENTIFIER .)
    DIV_OP          reduce using rule 16 (expr -> IDENTIFIER .)
    MOD_OP          reduce using rule 16 (expr -> IDENTIFIER .)
    CEQ             reduce using rule 16 (expr -> IDENTIFIER .)
    CNE             reduce using rule 16 (expr -> IDENTIFIER .)
    CLT             reduce using rule 16 (expr -> IDENTIFIER .)
    CLE             reduce using rule 16 (expr -> IDENTIFIER .)
    CGT             reduce using rule 16 (expr -> IDENTIFIER .)
    CGE             reduce using rule 16 (expr -> IDENTIFIER .)
    END_STATEMENT   reduce using rule 16 (expr -> IDENTIFIER .)
    RPAREN          reduce using rule 16 (expr -> IDENTIFIER .)
    OR              reduce using rule 16 (expr -> IDENTIFIER .)
    AND             reduce using rule 16 (expr -> IDENTIFIER .)


state 23

    (4) simple_stmt -> small_stmt END_STATEMENT .

    IDENTIFIER      reduce using rule 4 (simple_stmt -> small_stmt END_STATEMENT .)
    ARRAY_CELL      reduce using rule 4 (simple_stmt -> small_stmt END_STATEMENT .)
    LPAREN          reduce using rule 4 (simple_stmt -> small_stmt END_STATEMENT .)
    INTEGER         reduce using rule 4 (simple_stmt -> small_stmt END_STATEMENT .)
    DOUBLE          reduce using rule 4 (simple_stmt -> small_stmt END_STATEMENT .)
    RETURN          reduce using rule 4 (simple_stmt -> small_stmt END_STATEMENT .)
    BREAK           reduce using rule 4 (simple_stmt -> small_stmt END_STATEMENT .)
    CONTINUE        reduce using rule 4 (simple_stmt -> small_stmt END_STATEMENT .)
    $end            reduce using rule 4 (simple_stmt -> small_stmt END_STATEMENT .)


state 24

    (15) const_decl -> IDENTIFIER CONST . expr
    (16) expr -> . IDENTIFIER
    (17) expr -> . ARRAY_CELL
    (18) expr -> . LPAREN expr RPAREN
    (19) expr -> . arithmetic
    (20) expr -> . cond_list
    (21) expr -> . INTEGER
    (22) expr -> . DOUBLE
    (23) arithmetic -> . expr ADD_OP expr
    (24) arithmetic -> . expr SUB_OP expr
    (25) arithmetic -> . expr MUL_OP expr
    (26) arithmetic -> . expr DIV_OP expr
    (27) arithmetic -> . expr MOD_OP expr
    (36) cond_list -> . condition
    (37) cond_list -> . condition comb_op cond_list
    (38) cond_list -> . LPAREN cond_list RPAREN
    (39) condition -> . expr comp_op expr

    IDENTIFIER      shift and go to state 22
    ARRAY_CELL      shift and go to state 3
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 15

    expr                           shift and go to state 44
    arithmetic                     shift and go to state 8
    cond_list                      shift and go to state 20
    condition                      shift and go to state 14

state 25

    (14) assignment -> IDENTIFIER ASSIGN . expr
    (16) expr -> . IDENTIFIER
    (17) expr -> . ARRAY_CELL
    (18) expr -> . LPAREN expr RPAREN
    (19) expr -> . arithmetic
    (20) expr -> . cond_list
    (21) expr -> . INTEGER
    (22) expr -> . DOUBLE
    (23) arithmetic -> . expr ADD_OP expr
    (24) arithmetic -> . expr SUB_OP expr
    (25) arithmetic -> . expr MUL_OP expr
    (26) arithmetic -> . expr DIV_OP expr
    (27) arithmetic -> . expr MOD_OP expr
    (36) cond_list -> . condition
    (37) cond_list -> . condition comb_op cond_list
    (38) cond_list -> . LPAREN cond_list RPAREN
    (39) condition -> . expr comp_op expr

    IDENTIFIER      shift and go to state 22
    ARRAY_CELL      shift and go to state 3
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 15

    expr                           shift and go to state 45
    arithmetic                     shift and go to state 8
    cond_list                      shift and go to state 20
    condition                      shift and go to state 14

state 26

    (2) program -> stmt program .

    $end            reduce using rule 2 (program -> stmt program .)


state 27

    (18) expr -> LPAREN expr . RPAREN
    (23) arithmetic -> expr . ADD_OP expr
    (24) arithmetic -> expr . SUB_OP expr
    (25) arithmetic -> expr . MUL_OP expr
    (26) arithmetic -> expr . DIV_OP expr
    (27) arithmetic -> expr . MOD_OP expr
    (39) condition -> expr . comp_op expr
    (30) comp_op -> . CEQ
    (31) comp_op -> . CNE
    (32) comp_op -> . CLT
    (33) comp_op -> . CLE
    (34) comp_op -> . CGT
    (35) comp_op -> . CGE

    RPAREN          shift and go to state 46
    ADD_OP          shift and go to state 40
    SUB_OP          shift and go to state 36
    MUL_OP          shift and go to state 33
    DIV_OP          shift and go to state 37
    MOD_OP          shift and go to state 42
    CEQ             shift and go to state 39
    CNE             shift and go to state 38
    CLT             shift and go to state 41
    CLE             shift and go to state 32
    CGT             shift and go to state 43
    CGE             shift and go to state 34

    comp_op                        shift and go to state 35

state 28

    (38) cond_list -> LPAREN cond_list . RPAREN
    (20) expr -> cond_list .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 47
    ADD_OP          reduce using rule 20 (expr -> cond_list .)
    SUB_OP          reduce using rule 20 (expr -> cond_list .)
    MUL_OP          reduce using rule 20 (expr -> cond_list .)
    DIV_OP          reduce using rule 20 (expr -> cond_list .)
    MOD_OP          reduce using rule 20 (expr -> cond_list .)
    CEQ             reduce using rule 20 (expr -> cond_list .)
    CNE             reduce using rule 20 (expr -> cond_list .)
    CLT             reduce using rule 20 (expr -> cond_list .)
    CLE             reduce using rule 20 (expr -> cond_list .)
    CGT             reduce using rule 20 (expr -> cond_list .)
    CGE             reduce using rule 20 (expr -> cond_list .)

  ! RPAREN          [ reduce using rule 20 (expr -> cond_list .) ]


state 29

    (29) comb_op -> AND .

    LPAREN          reduce using rule 29 (comb_op -> AND .)
    IDENTIFIER      reduce using rule 29 (comb_op -> AND .)
    ARRAY_CELL      reduce using rule 29 (comb_op -> AND .)
    INTEGER         reduce using rule 29 (comb_op -> AND .)
    DOUBLE          reduce using rule 29 (comb_op -> AND .)


state 30

    (37) cond_list -> condition comb_op . cond_list
    (36) cond_list -> . condition
    (37) cond_list -> . condition comb_op cond_list
    (38) cond_list -> . LPAREN cond_list RPAREN
    (39) condition -> . expr comp_op expr
    (16) expr -> . IDENTIFIER
    (17) expr -> . ARRAY_CELL
    (18) expr -> . LPAREN expr RPAREN
    (19) expr -> . arithmetic
    (20) expr -> . cond_list
    (21) expr -> . INTEGER
    (22) expr -> . DOUBLE
    (23) arithmetic -> . expr ADD_OP expr
    (24) arithmetic -> . expr SUB_OP expr
    (25) arithmetic -> . expr MUL_OP expr
    (26) arithmetic -> . expr DIV_OP expr
    (27) arithmetic -> . expr MOD_OP expr

    LPAREN          shift and go to state 49
    IDENTIFIER      shift and go to state 22
    ARRAY_CELL      shift and go to state 3
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 15

    expr                           shift and go to state 48
    arithmetic                     shift and go to state 8
    cond_list                      shift and go to state 50
    condition                      shift and go to state 14

state 31

    (28) comb_op -> OR .

    LPAREN          reduce using rule 28 (comb_op -> OR .)
    IDENTIFIER      reduce using rule 28 (comb_op -> OR .)
    ARRAY_CELL      reduce using rule 28 (comb_op -> OR .)
    INTEGER         reduce using rule 28 (comb_op -> OR .)
    DOUBLE          reduce using rule 28 (comb_op -> OR .)


state 32

    (33) comp_op -> CLE .

    IDENTIFIER      reduce using rule 33 (comp_op -> CLE .)
    ARRAY_CELL      reduce using rule 33 (comp_op -> CLE .)
    LPAREN          reduce using rule 33 (comp_op -> CLE .)
    INTEGER         reduce using rule 33 (comp_op -> CLE .)
    DOUBLE          reduce using rule 33 (comp_op -> CLE .)


state 33

    (25) arithmetic -> expr MUL_OP . expr
    (16) expr -> . IDENTIFIER
    (17) expr -> . ARRAY_CELL
    (18) expr -> . LPAREN expr RPAREN
    (19) expr -> . arithmetic
    (20) expr -> . cond_list
    (21) expr -> . INTEGER
    (22) expr -> . DOUBLE
    (23) arithmetic -> . expr ADD_OP expr
    (24) arithmetic -> . expr SUB_OP expr
    (25) arithmetic -> . expr MUL_OP expr
    (26) arithmetic -> . expr DIV_OP expr
    (27) arithmetic -> . expr MOD_OP expr
    (36) cond_list -> . condition
    (37) cond_list -> . condition comb_op cond_list
    (38) cond_list -> . LPAREN cond_list RPAREN
    (39) condition -> . expr comp_op expr

    IDENTIFIER      shift and go to state 22
    ARRAY_CELL      shift and go to state 3
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 15

    expr                           shift and go to state 51
    arithmetic                     shift and go to state 8
    cond_list                      shift and go to state 20
    condition                      shift and go to state 14

state 34

    (35) comp_op -> CGE .

    IDENTIFIER      reduce using rule 35 (comp_op -> CGE .)
    ARRAY_CELL      reduce using rule 35 (comp_op -> CGE .)
    LPAREN          reduce using rule 35 (comp_op -> CGE .)
    INTEGER         reduce using rule 35 (comp_op -> CGE .)
    DOUBLE          reduce using rule 35 (comp_op -> CGE .)


state 35

    (39) condition -> expr comp_op . expr
    (16) expr -> . IDENTIFIER
    (17) expr -> . ARRAY_CELL
    (18) expr -> . LPAREN expr RPAREN
    (19) expr -> . arithmetic
    (20) expr -> . cond_list
    (21) expr -> . INTEGER
    (22) expr -> . DOUBLE
    (23) arithmetic -> . expr ADD_OP expr
    (24) arithmetic -> . expr SUB_OP expr
    (25) arithmetic -> . expr MUL_OP expr
    (26) arithmetic -> . expr DIV_OP expr
    (27) arithmetic -> . expr MOD_OP expr
    (36) cond_list -> . condition
    (37) cond_list -> . condition comb_op cond_list
    (38) cond_list -> . LPAREN cond_list RPAREN
    (39) condition -> . expr comp_op expr

    IDENTIFIER      shift and go to state 22
    ARRAY_CELL      shift and go to state 3
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 15

    expr                           shift and go to state 52
    arithmetic                     shift and go to state 8
    cond_list                      shift and go to state 20
    condition                      shift and go to state 14

state 36

    (24) arithmetic -> expr SUB_OP . expr
    (16) expr -> . IDENTIFIER
    (17) expr -> . ARRAY_CELL
    (18) expr -> . LPAREN expr RPAREN
    (19) expr -> . arithmetic
    (20) expr -> . cond_list
    (21) expr -> . INTEGER
    (22) expr -> . DOUBLE
    (23) arithmetic -> . expr ADD_OP expr
    (24) arithmetic -> . expr SUB_OP expr
    (25) arithmetic -> . expr MUL_OP expr
    (26) arithmetic -> . expr DIV_OP expr
    (27) arithmetic -> . expr MOD_OP expr
    (36) cond_list -> . condition
    (37) cond_list -> . condition comb_op cond_list
    (38) cond_list -> . LPAREN cond_list RPAREN
    (39) condition -> . expr comp_op expr

    IDENTIFIER      shift and go to state 22
    ARRAY_CELL      shift and go to state 3
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 15

    expr                           shift and go to state 53
    arithmetic                     shift and go to state 8
    cond_list                      shift and go to state 20
    condition                      shift and go to state 14

state 37

    (26) arithmetic -> expr DIV_OP . expr
    (16) expr -> . IDENTIFIER
    (17) expr -> . ARRAY_CELL
    (18) expr -> . LPAREN expr RPAREN
    (19) expr -> . arithmetic
    (20) expr -> . cond_list
    (21) expr -> . INTEGER
    (22) expr -> . DOUBLE
    (23) arithmetic -> . expr ADD_OP expr
    (24) arithmetic -> . expr SUB_OP expr
    (25) arithmetic -> . expr MUL_OP expr
    (26) arithmetic -> . expr DIV_OP expr
    (27) arithmetic -> . expr MOD_OP expr
    (36) cond_list -> . condition
    (37) cond_list -> . condition comb_op cond_list
    (38) cond_list -> . LPAREN cond_list RPAREN
    (39) condition -> . expr comp_op expr

    IDENTIFIER      shift and go to state 22
    ARRAY_CELL      shift and go to state 3
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 15

    expr                           shift and go to state 54
    arithmetic                     shift and go to state 8
    cond_list                      shift and go to state 20
    condition                      shift and go to state 14

state 38

    (31) comp_op -> CNE .

    IDENTIFIER      reduce using rule 31 (comp_op -> CNE .)
    ARRAY_CELL      reduce using rule 31 (comp_op -> CNE .)
    LPAREN          reduce using rule 31 (comp_op -> CNE .)
    INTEGER         reduce using rule 31 (comp_op -> CNE .)
    DOUBLE          reduce using rule 31 (comp_op -> CNE .)


state 39

    (30) comp_op -> CEQ .

    IDENTIFIER      reduce using rule 30 (comp_op -> CEQ .)
    ARRAY_CELL      reduce using rule 30 (comp_op -> CEQ .)
    LPAREN          reduce using rule 30 (comp_op -> CEQ .)
    INTEGER         reduce using rule 30 (comp_op -> CEQ .)
    DOUBLE          reduce using rule 30 (comp_op -> CEQ .)


state 40

    (23) arithmetic -> expr ADD_OP . expr
    (16) expr -> . IDENTIFIER
    (17) expr -> . ARRAY_CELL
    (18) expr -> . LPAREN expr RPAREN
    (19) expr -> . arithmetic
    (20) expr -> . cond_list
    (21) expr -> . INTEGER
    (22) expr -> . DOUBLE
    (23) arithmetic -> . expr ADD_OP expr
    (24) arithmetic -> . expr SUB_OP expr
    (25) arithmetic -> . expr MUL_OP expr
    (26) arithmetic -> . expr DIV_OP expr
    (27) arithmetic -> . expr MOD_OP expr
    (36) cond_list -> . condition
    (37) cond_list -> . condition comb_op cond_list
    (38) cond_list -> . LPAREN cond_list RPAREN
    (39) condition -> . expr comp_op expr

    IDENTIFIER      shift and go to state 22
    ARRAY_CELL      shift and go to state 3
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 15

    expr                           shift and go to state 55
    arithmetic                     shift and go to state 8
    cond_list                      shift and go to state 20
    condition                      shift and go to state 14

state 41

    (32) comp_op -> CLT .

    IDENTIFIER      reduce using rule 32 (comp_op -> CLT .)
    ARRAY_CELL      reduce using rule 32 (comp_op -> CLT .)
    LPAREN          reduce using rule 32 (comp_op -> CLT .)
    INTEGER         reduce using rule 32 (comp_op -> CLT .)
    DOUBLE          reduce using rule 32 (comp_op -> CLT .)


state 42

    (27) arithmetic -> expr MOD_OP . expr
    (16) expr -> . IDENTIFIER
    (17) expr -> . ARRAY_CELL
    (18) expr -> . LPAREN expr RPAREN
    (19) expr -> . arithmetic
    (20) expr -> . cond_list
    (21) expr -> . INTEGER
    (22) expr -> . DOUBLE
    (23) arithmetic -> . expr ADD_OP expr
    (24) arithmetic -> . expr SUB_OP expr
    (25) arithmetic -> . expr MUL_OP expr
    (26) arithmetic -> . expr DIV_OP expr
    (27) arithmetic -> . expr MOD_OP expr
    (36) cond_list -> . condition
    (37) cond_list -> . condition comb_op cond_list
    (38) cond_list -> . LPAREN cond_list RPAREN
    (39) condition -> . expr comp_op expr

    IDENTIFIER      shift and go to state 22
    ARRAY_CELL      shift and go to state 3
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 15

    expr                           shift and go to state 56
    arithmetic                     shift and go to state 8
    cond_list                      shift and go to state 20
    condition                      shift and go to state 14

state 43

    (34) comp_op -> CGT .

    IDENTIFIER      reduce using rule 34 (comp_op -> CGT .)
    ARRAY_CELL      reduce using rule 34 (comp_op -> CGT .)
    LPAREN          reduce using rule 34 (comp_op -> CGT .)
    INTEGER         reduce using rule 34 (comp_op -> CGT .)
    DOUBLE          reduce using rule 34 (comp_op -> CGT .)


state 44

    (15) const_decl -> IDENTIFIER CONST expr .
    (23) arithmetic -> expr . ADD_OP expr
    (24) arithmetic -> expr . SUB_OP expr
    (25) arithmetic -> expr . MUL_OP expr
    (26) arithmetic -> expr . DIV_OP expr
    (27) arithmetic -> expr . MOD_OP expr
    (39) condition -> expr . comp_op expr
    (30) comp_op -> . CEQ
    (31) comp_op -> . CNE
    (32) comp_op -> . CLT
    (33) comp_op -> . CLE
    (34) comp_op -> . CGT
    (35) comp_op -> . CGE

    END_STATEMENT   reduce using rule 15 (const_decl -> IDENTIFIER CONST expr .)
    ADD_OP          shift and go to state 40
    SUB_OP          shift and go to state 36
    MUL_OP          shift and go to state 33
    DIV_OP          shift and go to state 37
    MOD_OP          shift and go to state 42
    CEQ             shift and go to state 39
    CNE             shift and go to state 38
    CLT             shift and go to state 41
    CLE             shift and go to state 32
    CGT             shift and go to state 43
    CGE             shift and go to state 34

    comp_op                        shift and go to state 35

state 45

    (14) assignment -> IDENTIFIER ASSIGN expr .
    (23) arithmetic -> expr . ADD_OP expr
    (24) arithmetic -> expr . SUB_OP expr
    (25) arithmetic -> expr . MUL_OP expr
    (26) arithmetic -> expr . DIV_OP expr
    (27) arithmetic -> expr . MOD_OP expr
    (39) condition -> expr . comp_op expr
    (30) comp_op -> . CEQ
    (31) comp_op -> . CNE
    (32) comp_op -> . CLT
    (33) comp_op -> . CLE
    (34) comp_op -> . CGT
    (35) comp_op -> . CGE

    END_STATEMENT   reduce using rule 14 (assignment -> IDENTIFIER ASSIGN expr .)
    ADD_OP          shift and go to state 40
    SUB_OP          shift and go to state 36
    MUL_OP          shift and go to state 33
    DIV_OP          shift and go to state 37
    MOD_OP          shift and go to state 42
    CEQ             shift and go to state 39
    CNE             shift and go to state 38
    CLT             shift and go to state 41
    CLE             shift and go to state 32
    CGT             shift and go to state 43
    CGE             shift and go to state 34

    comp_op                        shift and go to state 35

state 46

    (18) expr -> LPAREN expr RPAREN .

    ADD_OP          reduce using rule 18 (expr -> LPAREN expr RPAREN .)
    SUB_OP          reduce using rule 18 (expr -> LPAREN expr RPAREN .)
    MUL_OP          reduce using rule 18 (expr -> LPAREN expr RPAREN .)
    DIV_OP          reduce using rule 18 (expr -> LPAREN expr RPAREN .)
    MOD_OP          reduce using rule 18 (expr -> LPAREN expr RPAREN .)
    CEQ             reduce using rule 18 (expr -> LPAREN expr RPAREN .)
    CNE             reduce using rule 18 (expr -> LPAREN expr RPAREN .)
    CLT             reduce using rule 18 (expr -> LPAREN expr RPAREN .)
    CLE             reduce using rule 18 (expr -> LPAREN expr RPAREN .)
    CGT             reduce using rule 18 (expr -> LPAREN expr RPAREN .)
    CGE             reduce using rule 18 (expr -> LPAREN expr RPAREN .)
    END_STATEMENT   reduce using rule 18 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 18 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 18 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 18 (expr -> LPAREN expr RPAREN .)


state 47

    (38) cond_list -> LPAREN cond_list RPAREN .

    ADD_OP          reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)
    SUB_OP          reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)
    MUL_OP          reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)
    DIV_OP          reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)
    MOD_OP          reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)
    CEQ             reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)
    CNE             reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)
    CLT             reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)
    CLE             reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)
    CGT             reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)
    CGE             reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)
    END_STATEMENT   reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)
    RPAREN          reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)
    OR              reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)
    AND             reduce using rule 38 (cond_list -> LPAREN cond_list RPAREN .)


state 48

    (39) condition -> expr . comp_op expr
    (23) arithmetic -> expr . ADD_OP expr
    (24) arithmetic -> expr . SUB_OP expr
    (25) arithmetic -> expr . MUL_OP expr
    (26) arithmetic -> expr . DIV_OP expr
    (27) arithmetic -> expr . MOD_OP expr
    (30) comp_op -> . CEQ
    (31) comp_op -> . CNE
    (32) comp_op -> . CLT
    (33) comp_op -> . CLE
    (34) comp_op -> . CGT
    (35) comp_op -> . CGE

    ADD_OP          shift and go to state 40
    SUB_OP          shift and go to state 36
    MUL_OP          shift and go to state 33
    DIV_OP          shift and go to state 37
    MOD_OP          shift and go to state 42
    CEQ             shift and go to state 39
    CNE             shift and go to state 38
    CLT             shift and go to state 41
    CLE             shift and go to state 32
    CGT             shift and go to state 43
    CGE             shift and go to state 34

    comp_op                        shift and go to state 35

state 49

    (38) cond_list -> LPAREN . cond_list RPAREN
    (18) expr -> LPAREN . expr RPAREN
    (36) cond_list -> . condition
    (37) cond_list -> . condition comb_op cond_list
    (38) cond_list -> . LPAREN cond_list RPAREN
    (16) expr -> . IDENTIFIER
    (17) expr -> . ARRAY_CELL
    (18) expr -> . LPAREN expr RPAREN
    (19) expr -> . arithmetic
    (20) expr -> . cond_list
    (21) expr -> . INTEGER
    (22) expr -> . DOUBLE
    (39) condition -> . expr comp_op expr
    (23) arithmetic -> . expr ADD_OP expr
    (24) arithmetic -> . expr SUB_OP expr
    (25) arithmetic -> . expr MUL_OP expr
    (26) arithmetic -> . expr DIV_OP expr
    (27) arithmetic -> . expr MOD_OP expr

    LPAREN          shift and go to state 49
    IDENTIFIER      shift and go to state 22
    ARRAY_CELL      shift and go to state 3
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 15

    expr                           shift and go to state 57
    condition                      shift and go to state 14
    cond_list                      shift and go to state 28
    arithmetic                     shift and go to state 8

state 50

    (37) cond_list -> condition comb_op cond_list .
    (20) expr -> cond_list .

  ! reduce/reduce conflict for ADD_OP resolved using rule 20 (expr -> cond_list .)
  ! reduce/reduce conflict for SUB_OP resolved using rule 20 (expr -> cond_list .)
  ! reduce/reduce conflict for MUL_OP resolved using rule 20 (expr -> cond_list .)
  ! reduce/reduce conflict for DIV_OP resolved using rule 20 (expr -> cond_list .)
  ! reduce/reduce conflict for MOD_OP resolved using rule 20 (expr -> cond_list .)
  ! reduce/reduce conflict for CEQ resolved using rule 20 (expr -> cond_list .)
  ! reduce/reduce conflict for CNE resolved using rule 20 (expr -> cond_list .)
  ! reduce/reduce conflict for CLT resolved using rule 20 (expr -> cond_list .)
  ! reduce/reduce conflict for CLE resolved using rule 20 (expr -> cond_list .)
  ! reduce/reduce conflict for CGT resolved using rule 20 (expr -> cond_list .)
  ! reduce/reduce conflict for CGE resolved using rule 20 (expr -> cond_list .)
    END_STATEMENT   reduce using rule 37 (cond_list -> condition comb_op cond_list .)
    RPAREN          reduce using rule 37 (cond_list -> condition comb_op cond_list .)
    OR              reduce using rule 37 (cond_list -> condition comb_op cond_list .)
    AND             reduce using rule 37 (cond_list -> condition comb_op cond_list .)
    ADD_OP          reduce using rule 20 (expr -> cond_list .)
    SUB_OP          reduce using rule 20 (expr -> cond_list .)
    MUL_OP          reduce using rule 20 (expr -> cond_list .)
    DIV_OP          reduce using rule 20 (expr -> cond_list .)
    MOD_OP          reduce using rule 20 (expr -> cond_list .)
    CEQ             reduce using rule 20 (expr -> cond_list .)
    CNE             reduce using rule 20 (expr -> cond_list .)
    CLT             reduce using rule 20 (expr -> cond_list .)
    CLE             reduce using rule 20 (expr -> cond_list .)
    CGT             reduce using rule 20 (expr -> cond_list .)
    CGE             reduce using rule 20 (expr -> cond_list .)

  ! ADD_OP          [ reduce using rule 37 (cond_list -> condition comb_op cond_list .) ]
  ! SUB_OP          [ reduce using rule 37 (cond_list -> condition comb_op cond_list .) ]
  ! MUL_OP          [ reduce using rule 37 (cond_list -> condition comb_op cond_list .) ]
  ! DIV_OP          [ reduce using rule 37 (cond_list -> condition comb_op cond_list .) ]
  ! MOD_OP          [ reduce using rule 37 (cond_list -> condition comb_op cond_list .) ]
  ! CEQ             [ reduce using rule 37 (cond_list -> condition comb_op cond_list .) ]
  ! CNE             [ reduce using rule 37 (cond_list -> condition comb_op cond_list .) ]
  ! CLT             [ reduce using rule 37 (cond_list -> condition comb_op cond_list .) ]
  ! CLE             [ reduce using rule 37 (cond_list -> condition comb_op cond_list .) ]
  ! CGT             [ reduce using rule 37 (cond_list -> condition comb_op cond_list .) ]
  ! CGE             [ reduce using rule 37 (cond_list -> condition comb_op cond_list .) ]


state 51

    (25) arithmetic -> expr MUL_OP expr .
    (23) arithmetic -> expr . ADD_OP expr
    (24) arithmetic -> expr . SUB_OP expr
    (25) arithmetic -> expr . MUL_OP expr
    (26) arithmetic -> expr . DIV_OP expr
    (27) arithmetic -> expr . MOD_OP expr
    (39) condition -> expr . comp_op expr
    (30) comp_op -> . CEQ
    (31) comp_op -> . CNE
    (32) comp_op -> . CLT
    (33) comp_op -> . CLE
    (34) comp_op -> . CGT
    (35) comp_op -> . CGE

    RPAREN          reduce using rule 25 (arithmetic -> expr MUL_OP expr .)
    ADD_OP          reduce using rule 25 (arithmetic -> expr MUL_OP expr .)
    SUB_OP          reduce using rule 25 (arithmetic -> expr MUL_OP expr .)
    MUL_OP          reduce using rule 25 (arithmetic -> expr MUL_OP expr .)
    DIV_OP          reduce using rule 25 (arithmetic -> expr MUL_OP expr .)
    MOD_OP          reduce using rule 25 (arithmetic -> expr MUL_OP expr .)
    CEQ             reduce using rule 25 (arithmetic -> expr MUL_OP expr .)
    CNE             reduce using rule 25 (arithmetic -> expr MUL_OP expr .)
    CLT             reduce using rule 25 (arithmetic -> expr MUL_OP expr .)
    CLE             reduce using rule 25 (arithmetic -> expr MUL_OP expr .)
    CGT             reduce using rule 25 (arithmetic -> expr MUL_OP expr .)
    CGE             reduce using rule 25 (arithmetic -> expr MUL_OP expr .)
    END_STATEMENT   reduce using rule 25 (arithmetic -> expr MUL_OP expr .)
    OR              reduce using rule 25 (arithmetic -> expr MUL_OP expr .)
    AND             reduce using rule 25 (arithmetic -> expr MUL_OP expr .)

  ! ADD_OP          [ shift and go to state 40 ]
  ! SUB_OP          [ shift and go to state 36 ]
  ! MUL_OP          [ shift and go to state 33 ]
  ! DIV_OP          [ shift and go to state 37 ]
  ! MOD_OP          [ shift and go to state 42 ]
  ! CEQ             [ shift and go to state 39 ]
  ! CNE             [ shift and go to state 38 ]
  ! CLT             [ shift and go to state 41 ]
  ! CLE             [ shift and go to state 32 ]
  ! CGT             [ shift and go to state 43 ]
  ! CGE             [ shift and go to state 34 ]

    comp_op                        shift and go to state 35

state 52

    (39) condition -> expr comp_op expr .
    (23) arithmetic -> expr . ADD_OP expr
    (24) arithmetic -> expr . SUB_OP expr
    (25) arithmetic -> expr . MUL_OP expr
    (26) arithmetic -> expr . DIV_OP expr
    (27) arithmetic -> expr . MOD_OP expr
    (39) condition -> expr . comp_op expr
    (30) comp_op -> . CEQ
    (31) comp_op -> . CNE
    (32) comp_op -> . CLT
    (33) comp_op -> . CLE
    (34) comp_op -> . CGT
    (35) comp_op -> . CGE

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
  ! shift/reduce conflict for MUL_OP resolved as shift
  ! shift/reduce conflict for DIV_OP resolved as shift
  ! shift/reduce conflict for MOD_OP resolved as shift
  ! shift/reduce conflict for CEQ resolved as shift
  ! shift/reduce conflict for CNE resolved as shift
  ! shift/reduce conflict for CLT resolved as shift
  ! shift/reduce conflict for CLE resolved as shift
  ! shift/reduce conflict for CGT resolved as shift
  ! shift/reduce conflict for CGE resolved as shift
    OR              reduce using rule 39 (condition -> expr comp_op expr .)
    AND             reduce using rule 39 (condition -> expr comp_op expr .)
    END_STATEMENT   reduce using rule 39 (condition -> expr comp_op expr .)
    RPAREN          reduce using rule 39 (condition -> expr comp_op expr .)
    ADD_OP          shift and go to state 40
    SUB_OP          shift and go to state 36
    MUL_OP          shift and go to state 33
    DIV_OP          shift and go to state 37
    MOD_OP          shift and go to state 42
    CEQ             shift and go to state 39
    CNE             shift and go to state 38
    CLT             shift and go to state 41
    CLE             shift and go to state 32
    CGT             shift and go to state 43
    CGE             shift and go to state 34

  ! ADD_OP          [ reduce using rule 39 (condition -> expr comp_op expr .) ]
  ! SUB_OP          [ reduce using rule 39 (condition -> expr comp_op expr .) ]
  ! MUL_OP          [ reduce using rule 39 (condition -> expr comp_op expr .) ]
  ! DIV_OP          [ reduce using rule 39 (condition -> expr comp_op expr .) ]
  ! MOD_OP          [ reduce using rule 39 (condition -> expr comp_op expr .) ]
  ! CEQ             [ reduce using rule 39 (condition -> expr comp_op expr .) ]
  ! CNE             [ reduce using rule 39 (condition -> expr comp_op expr .) ]
  ! CLT             [ reduce using rule 39 (condition -> expr comp_op expr .) ]
  ! CLE             [ reduce using rule 39 (condition -> expr comp_op expr .) ]
  ! CGT             [ reduce using rule 39 (condition -> expr comp_op expr .) ]
  ! CGE             [ reduce using rule 39 (condition -> expr comp_op expr .) ]

    comp_op                        shift and go to state 35

state 53

    (24) arithmetic -> expr SUB_OP expr .
    (23) arithmetic -> expr . ADD_OP expr
    (24) arithmetic -> expr . SUB_OP expr
    (25) arithmetic -> expr . MUL_OP expr
    (26) arithmetic -> expr . DIV_OP expr
    (27) arithmetic -> expr . MOD_OP expr
    (39) condition -> expr . comp_op expr
    (30) comp_op -> . CEQ
    (31) comp_op -> . CNE
    (32) comp_op -> . CLT
    (33) comp_op -> . CLE
    (34) comp_op -> . CGT
    (35) comp_op -> . CGE

    RPAREN          reduce using rule 24 (arithmetic -> expr SUB_OP expr .)
    ADD_OP          reduce using rule 24 (arithmetic -> expr SUB_OP expr .)
    SUB_OP          reduce using rule 24 (arithmetic -> expr SUB_OP expr .)
    CEQ             reduce using rule 24 (arithmetic -> expr SUB_OP expr .)
    CNE             reduce using rule 24 (arithmetic -> expr SUB_OP expr .)
    CLT             reduce using rule 24 (arithmetic -> expr SUB_OP expr .)
    CLE             reduce using rule 24 (arithmetic -> expr SUB_OP expr .)
    CGT             reduce using rule 24 (arithmetic -> expr SUB_OP expr .)
    CGE             reduce using rule 24 (arithmetic -> expr SUB_OP expr .)
    END_STATEMENT   reduce using rule 24 (arithmetic -> expr SUB_OP expr .)
    OR              reduce using rule 24 (arithmetic -> expr SUB_OP expr .)
    AND             reduce using rule 24 (arithmetic -> expr SUB_OP expr .)
    MUL_OP          shift and go to state 33
    DIV_OP          shift and go to state 37
    MOD_OP          shift and go to state 42

  ! MUL_OP          [ reduce using rule 24 (arithmetic -> expr SUB_OP expr .) ]
  ! DIV_OP          [ reduce using rule 24 (arithmetic -> expr SUB_OP expr .) ]
  ! MOD_OP          [ reduce using rule 24 (arithmetic -> expr SUB_OP expr .) ]
  ! ADD_OP          [ shift and go to state 40 ]
  ! SUB_OP          [ shift and go to state 36 ]
  ! CEQ             [ shift and go to state 39 ]
  ! CNE             [ shift and go to state 38 ]
  ! CLT             [ shift and go to state 41 ]
  ! CLE             [ shift and go to state 32 ]
  ! CGT             [ shift and go to state 43 ]
  ! CGE             [ shift and go to state 34 ]

    comp_op                        shift and go to state 35

state 54

    (26) arithmetic -> expr DIV_OP expr .
    (23) arithmetic -> expr . ADD_OP expr
    (24) arithmetic -> expr . SUB_OP expr
    (25) arithmetic -> expr . MUL_OP expr
    (26) arithmetic -> expr . DIV_OP expr
    (27) arithmetic -> expr . MOD_OP expr
    (39) condition -> expr . comp_op expr
    (30) comp_op -> . CEQ
    (31) comp_op -> . CNE
    (32) comp_op -> . CLT
    (33) comp_op -> . CLE
    (34) comp_op -> . CGT
    (35) comp_op -> . CGE

    RPAREN          reduce using rule 26 (arithmetic -> expr DIV_OP expr .)
    ADD_OP          reduce using rule 26 (arithmetic -> expr DIV_OP expr .)
    SUB_OP          reduce using rule 26 (arithmetic -> expr DIV_OP expr .)
    MUL_OP          reduce using rule 26 (arithmetic -> expr DIV_OP expr .)
    DIV_OP          reduce using rule 26 (arithmetic -> expr DIV_OP expr .)
    MOD_OP          reduce using rule 26 (arithmetic -> expr DIV_OP expr .)
    CEQ             reduce using rule 26 (arithmetic -> expr DIV_OP expr .)
    CNE             reduce using rule 26 (arithmetic -> expr DIV_OP expr .)
    CLT             reduce using rule 26 (arithmetic -> expr DIV_OP expr .)
    CLE             reduce using rule 26 (arithmetic -> expr DIV_OP expr .)
    CGT             reduce using rule 26 (arithmetic -> expr DIV_OP expr .)
    CGE             reduce using rule 26 (arithmetic -> expr DIV_OP expr .)
    END_STATEMENT   reduce using rule 26 (arithmetic -> expr DIV_OP expr .)
    OR              reduce using rule 26 (arithmetic -> expr DIV_OP expr .)
    AND             reduce using rule 26 (arithmetic -> expr DIV_OP expr .)

  ! ADD_OP          [ shift and go to state 40 ]
  ! SUB_OP          [ shift and go to state 36 ]
  ! MUL_OP          [ shift and go to state 33 ]
  ! DIV_OP          [ shift and go to state 37 ]
  ! MOD_OP          [ shift and go to state 42 ]
  ! CEQ             [ shift and go to state 39 ]
  ! CNE             [ shift and go to state 38 ]
  ! CLT             [ shift and go to state 41 ]
  ! CLE             [ shift and go to state 32 ]
  ! CGT             [ shift and go to state 43 ]
  ! CGE             [ shift and go to state 34 ]

    comp_op                        shift and go to state 35

state 55

    (23) arithmetic -> expr ADD_OP expr .
    (23) arithmetic -> expr . ADD_OP expr
    (24) arithmetic -> expr . SUB_OP expr
    (25) arithmetic -> expr . MUL_OP expr
    (26) arithmetic -> expr . DIV_OP expr
    (27) arithmetic -> expr . MOD_OP expr
    (39) condition -> expr . comp_op expr
    (30) comp_op -> . CEQ
    (31) comp_op -> . CNE
    (32) comp_op -> . CLT
    (33) comp_op -> . CLE
    (34) comp_op -> . CGT
    (35) comp_op -> . CGE

    RPAREN          reduce using rule 23 (arithmetic -> expr ADD_OP expr .)
    ADD_OP          reduce using rule 23 (arithmetic -> expr ADD_OP expr .)
    SUB_OP          reduce using rule 23 (arithmetic -> expr ADD_OP expr .)
    CEQ             reduce using rule 23 (arithmetic -> expr ADD_OP expr .)
    CNE             reduce using rule 23 (arithmetic -> expr ADD_OP expr .)
    CLT             reduce using rule 23 (arithmetic -> expr ADD_OP expr .)
    CLE             reduce using rule 23 (arithmetic -> expr ADD_OP expr .)
    CGT             reduce using rule 23 (arithmetic -> expr ADD_OP expr .)
    CGE             reduce using rule 23 (arithmetic -> expr ADD_OP expr .)
    END_STATEMENT   reduce using rule 23 (arithmetic -> expr ADD_OP expr .)
    OR              reduce using rule 23 (arithmetic -> expr ADD_OP expr .)
    AND             reduce using rule 23 (arithmetic -> expr ADD_OP expr .)
    MUL_OP          shift and go to state 33
    DIV_OP          shift and go to state 37
    MOD_OP          shift and go to state 42

  ! MUL_OP          [ reduce using rule 23 (arithmetic -> expr ADD_OP expr .) ]
  ! DIV_OP          [ reduce using rule 23 (arithmetic -> expr ADD_OP expr .) ]
  ! MOD_OP          [ reduce using rule 23 (arithmetic -> expr ADD_OP expr .) ]
  ! ADD_OP          [ shift and go to state 40 ]
  ! SUB_OP          [ shift and go to state 36 ]
  ! CEQ             [ shift and go to state 39 ]
  ! CNE             [ shift and go to state 38 ]
  ! CLT             [ shift and go to state 41 ]
  ! CLE             [ shift and go to state 32 ]
  ! CGT             [ shift and go to state 43 ]
  ! CGE             [ shift and go to state 34 ]

    comp_op                        shift and go to state 35

state 56

    (27) arithmetic -> expr MOD_OP expr .
    (23) arithmetic -> expr . ADD_OP expr
    (24) arithmetic -> expr . SUB_OP expr
    (25) arithmetic -> expr . MUL_OP expr
    (26) arithmetic -> expr . DIV_OP expr
    (27) arithmetic -> expr . MOD_OP expr
    (39) condition -> expr . comp_op expr
    (30) comp_op -> . CEQ
    (31) comp_op -> . CNE
    (32) comp_op -> . CLT
    (33) comp_op -> . CLE
    (34) comp_op -> . CGT
    (35) comp_op -> . CGE

    RPAREN          reduce using rule 27 (arithmetic -> expr MOD_OP expr .)
    ADD_OP          reduce using rule 27 (arithmetic -> expr MOD_OP expr .)
    SUB_OP          reduce using rule 27 (arithmetic -> expr MOD_OP expr .)
    MUL_OP          reduce using rule 27 (arithmetic -> expr MOD_OP expr .)
    DIV_OP          reduce using rule 27 (arithmetic -> expr MOD_OP expr .)
    MOD_OP          reduce using rule 27 (arithmetic -> expr MOD_OP expr .)
    CEQ             reduce using rule 27 (arithmetic -> expr MOD_OP expr .)
    CNE             reduce using rule 27 (arithmetic -> expr MOD_OP expr .)
    CLT             reduce using rule 27 (arithmetic -> expr MOD_OP expr .)
    CLE             reduce using rule 27 (arithmetic -> expr MOD_OP expr .)
    CGT             reduce using rule 27 (arithmetic -> expr MOD_OP expr .)
    CGE             reduce using rule 27 (arithmetic -> expr MOD_OP expr .)
    END_STATEMENT   reduce using rule 27 (arithmetic -> expr MOD_OP expr .)
    OR              reduce using rule 27 (arithmetic -> expr MOD_OP expr .)
    AND             reduce using rule 27 (arithmetic -> expr MOD_OP expr .)

  ! ADD_OP          [ shift and go to state 40 ]
  ! SUB_OP          [ shift and go to state 36 ]
  ! MUL_OP          [ shift and go to state 33 ]
  ! DIV_OP          [ shift and go to state 37 ]
  ! MOD_OP          [ shift and go to state 42 ]
  ! CEQ             [ shift and go to state 39 ]
  ! CNE             [ shift and go to state 38 ]
  ! CLT             [ shift and go to state 41 ]
  ! CLE             [ shift and go to state 32 ]
  ! CGT             [ shift and go to state 43 ]
  ! CGE             [ shift and go to state 34 ]

    comp_op                        shift and go to state 35

state 57

    (18) expr -> LPAREN expr . RPAREN
    (39) condition -> expr . comp_op expr
    (23) arithmetic -> expr . ADD_OP expr
    (24) arithmetic -> expr . SUB_OP expr
    (25) arithmetic -> expr . MUL_OP expr
    (26) arithmetic -> expr . DIV_OP expr
    (27) arithmetic -> expr . MOD_OP expr
    (30) comp_op -> . CEQ
    (31) comp_op -> . CNE
    (32) comp_op -> . CLT
    (33) comp_op -> . CLE
    (34) comp_op -> . CGT
    (35) comp_op -> . CGE

    RPAREN          shift and go to state 46
    ADD_OP          shift and go to state 40
    SUB_OP          shift and go to state 36
    MUL_OP          shift and go to state 33
    DIV_OP          shift and go to state 37
    MOD_OP          shift and go to state 42
    CEQ             shift and go to state 39
    CNE             shift and go to state 38
    CLT             shift and go to state 41
    CLE             shift and go to state 32
    CGT             shift and go to state 43
    CGE             shift and go to state 34

    comp_op                        shift and go to state 35
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OR in state 14 resolved as shift
WARNING: shift/reduce conflict for AND in state 14 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 28 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for MUL_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for DIV_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for MOD_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for CEQ in state 52 resolved as shift
WARNING: shift/reduce conflict for CNE in state 52 resolved as shift
WARNING: shift/reduce conflict for CLT in state 52 resolved as shift
WARNING: shift/reduce conflict for CLE in state 52 resolved as shift
WARNING: shift/reduce conflict for CGT in state 52 resolved as shift
WARNING: shift/reduce conflict for CGE in state 52 resolved as shift
WARNING: reduce/reduce conflict in state 50 resolved using rule (expr -> cond_list)
WARNING: rejected rule (cond_list -> condition comb_op cond_list) in state 50
