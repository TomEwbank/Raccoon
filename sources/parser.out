Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt
Rule 2     program -> stmt program
Rule 3     program -> END_STATEMENT stmt program
Rule 4     stmt -> simple_stmt
Rule 5     stmt -> compound_stmt
Rule 6     simple_stmt -> small_stmt END_STATEMENT
Rule 7     small_stmt -> assignment
Rule 8     small_stmt -> const_decl
Rule 9     small_stmt -> expr
Rule 10    small_stmt -> return_stmt
Rule 11    small_stmt -> display
Rule 12    small_stmt -> loop_stmt
Rule 13    return_stmt -> RETURN
Rule 14    return_stmt -> RETURN expr
Rule 15    loop_stmt -> BREAK
Rule 16    loop_stmt -> CONTINUE
Rule 17    display -> DISPLAY LPAREN expr RPAREN
Rule 18    assignment -> IDENTIFIER ASSIGN expr
Rule 19    assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
Rule 20    assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
Rule 21    const_decl -> IDENTIFIER CONST expr
Rule 22    func_call -> IDENTIFIER LPAREN list_args RPAREN
Rule 23    func_call -> IDENTIFIER LPAREN RPAREN
Rule 24    list_args -> expr
Rule 25    list_args -> expr COMMA list_args
Rule 26    expr -> IDENTIFIER
Rule 27    expr -> IDENTIFIER LSBRACKET expr RSBRACKET
Rule 28    expr -> STRING
Rule 29    expr -> LPAREN expr RPAREN
Rule 30    expr -> func_call
Rule 31    expr -> INTEGER
Rule 32    expr -> DOUBLE
Rule 33    expr -> boolean
Rule 34    boolean -> TRUE
Rule 35    boolean -> FALSE
Rule 36    expr -> expr ADD_OP expr
Rule 37    expr -> expr SUB_OP expr
Rule 38    expr -> expr MUL_OP expr
Rule 39    expr -> expr DIV_OP expr
Rule 40    expr -> expr MOD_OP expr
Rule 41    expr -> expr comb_op expr
Rule 42    expr -> expr comp_op expr
Rule 43    expr -> SUB_OP expr
Rule 44    comb_op -> OR
Rule 45    comb_op -> AND
Rule 46    comp_op -> CEQ
Rule 47    comp_op -> CNE
Rule 48    comp_op -> CLT
Rule 49    comp_op -> CLE
Rule 50    comp_op -> CGT
Rule 51    comp_op -> CGE
Rule 52    compound_stmt -> func_def
Rule 53    compound_stmt -> if_stmt
Rule 54    compound_stmt -> while_stmt
Rule 55    compound_stmt -> for_stmt
Rule 56    func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT
Rule 57    head -> IDENTIFIER LPAREN func_def_args RPAREN COLON
Rule 58    head -> IDENTIFIER LPAREN RPAREN COLON
Rule 59    func_def_args -> IDENTIFIER
Rule 60    func_def_args -> IDENTIFIER COMMA func_def_args
Rule 61    body -> stmt
Rule 62    body -> stmt body
Rule 63    while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT
Rule 64    for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
Rule 65    for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
Rule 66    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT
Rule 67    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
Rule 68    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
Rule 69    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
Rule 70    elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT
Rule 71    elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
Rule 72    stmt -> IF expr END_STATEMENT INDENT body DEDENT
Rule 73    stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT
Rule 74    stmt -> ELSE expr END_STATEMENT INDENT body DEDENT
Rule 75    stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
Rule 76    stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
Rule 77    stmt -> WHILE expr END_STATEMENT INDENT body DEDENT
Rule 78    stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
Rule 79    stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT

Terminals, with rules where they appear

ADD_OP               : 36
AND                  : 45
ASSIGN               : 18 19 20
BREAK                : 15
CEQ                  : 46
CGE                  : 51
CGT                  : 50
CLE                  : 49
CLT                  : 48
CNE                  : 47
COLON                : 57 58 63 64 65 66 67 68 68 69 69 70 71
COMMA                : 25 60 64 75
CONST                : 21
CONTINUE             : 16
DEDENT               : 56 63 64 65 66 67 68 68 69 69 70 71 72 73 74 75 76 77 78 79
DISPLAY              : 17
DIV_OP               : 39
DOUBLE               : 32
ELSE                 : 68 69 74
ELSEIF               : 70 71 73
END_STATEMENT        : 3 6 56 63 64 65 66 67 68 68 69 69 70 71 72 73 74 75 76 77 78 79
FALSE                : 35
FOR                  : 64 65 75 76
FUNCTION             : 56 78 79
IDENTIFIER           : 18 19 20 21 22 23 26 27 57 58 59 60 64 65 65 75 76 76 78 79
IF                   : 66 67 68 69 72
IN                   : 64 65 75 76
INDENT               : 56 63 64 65 66 67 68 68 69 69 70 71 72 73 74 75 76 77 78 79
INTEGER              : 31
LPAREN               : 17 22 23 29 57 58 64 75 78 79
LSBRACKET            : 19 20 27
MOD_OP               : 40
MUL_OP               : 38
OR                   : 44
RANGE                : 64 75
RETURN               : 13 14
RPAREN               : 17 22 23 29 57 58 64 75 78 79
RSBRACKET            : 19 20 27
STRING               : 28
SUB_OP               : 37 43
TRUE                 : 34
WHILE                : 63 77
error                : 

Nonterminals, with rules where they appear

assignment           : 7
body                 : 56 62 63 64 65 66 67 68 68 69 69 70 71 72 73 74 75 76 77 78 79
boolean              : 33
comb_op              : 41
comp_op              : 42
compound_stmt        : 5
const_decl           : 8
display              : 11
elseif_list          : 67 68 71
expr                 : 9 14 17 18 20 20 21 24 25 27 29 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 63 64 64 66 67 68 69 70 71 72 73 74 75 75 77
for_stmt             : 55
func_call            : 30
func_def             : 52
func_def_args        : 57 60 78
head                 : 56
if_stmt              : 53
list_args            : 19 22 25
loop_stmt            : 12
program              : 2 3 0
return_stmt          : 10
simple_stmt          : 4
small_stmt           : 6
stmt                 : 1 2 3 61 62
while_stmt           : 54

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt
    (2) program -> . stmt program
    (3) program -> . END_STATEMENT stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    END_STATEMENT   shift and go to state 14
    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    program                        shift and go to state 11
    compound_stmt                  shift and go to state 13
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 19
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 1

    (6) simple_stmt -> small_stmt . END_STATEMENT

    END_STATEMENT   shift and go to state 37


state 2

    (77) stmt -> WHILE . expr END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> WHILE . expr COLON END_STATEMENT INDENT body DEDENT
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 39
    boolean                        shift and go to state 3

state 3

    (33) expr -> boolean .

    ADD_OP          reduce using rule 33 (expr -> boolean .)
    SUB_OP          reduce using rule 33 (expr -> boolean .)
    MUL_OP          reduce using rule 33 (expr -> boolean .)
    DIV_OP          reduce using rule 33 (expr -> boolean .)
    MOD_OP          reduce using rule 33 (expr -> boolean .)
    OR              reduce using rule 33 (expr -> boolean .)
    AND             reduce using rule 33 (expr -> boolean .)
    CEQ             reduce using rule 33 (expr -> boolean .)
    CNE             reduce using rule 33 (expr -> boolean .)
    CLT             reduce using rule 33 (expr -> boolean .)
    CLE             reduce using rule 33 (expr -> boolean .)
    CGT             reduce using rule 33 (expr -> boolean .)
    CGE             reduce using rule 33 (expr -> boolean .)
    END_STATEMENT   reduce using rule 33 (expr -> boolean .)
    RSBRACKET       reduce using rule 33 (expr -> boolean .)
    COLON           reduce using rule 33 (expr -> boolean .)
    RPAREN          reduce using rule 33 (expr -> boolean .)
    COMMA           reduce using rule 33 (expr -> boolean .)


state 4

    (10) small_stmt -> return_stmt .

    END_STATEMENT   reduce using rule 10 (small_stmt -> return_stmt .)


state 5

    (13) return_stmt -> RETURN .
    (14) return_stmt -> RETURN . expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    END_STATEMENT   reduce using rule 13 (return_stmt -> RETURN .)
    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 40
    boolean                        shift and go to state 3

state 6

    (31) expr -> INTEGER .

    ADD_OP          reduce using rule 31 (expr -> INTEGER .)
    SUB_OP          reduce using rule 31 (expr -> INTEGER .)
    MUL_OP          reduce using rule 31 (expr -> INTEGER .)
    DIV_OP          reduce using rule 31 (expr -> INTEGER .)
    MOD_OP          reduce using rule 31 (expr -> INTEGER .)
    OR              reduce using rule 31 (expr -> INTEGER .)
    AND             reduce using rule 31 (expr -> INTEGER .)
    CEQ             reduce using rule 31 (expr -> INTEGER .)
    CNE             reduce using rule 31 (expr -> INTEGER .)
    CLT             reduce using rule 31 (expr -> INTEGER .)
    CLE             reduce using rule 31 (expr -> INTEGER .)
    CGT             reduce using rule 31 (expr -> INTEGER .)
    CGE             reduce using rule 31 (expr -> INTEGER .)
    END_STATEMENT   reduce using rule 31 (expr -> INTEGER .)
    RSBRACKET       reduce using rule 31 (expr -> INTEGER .)
    COLON           reduce using rule 31 (expr -> INTEGER .)
    RPAREN          reduce using rule 31 (expr -> INTEGER .)
    COMMA           reduce using rule 31 (expr -> INTEGER .)


state 7

    (34) boolean -> TRUE .

    END_STATEMENT   reduce using rule 34 (boolean -> TRUE .)
    ADD_OP          reduce using rule 34 (boolean -> TRUE .)
    SUB_OP          reduce using rule 34 (boolean -> TRUE .)
    MUL_OP          reduce using rule 34 (boolean -> TRUE .)
    DIV_OP          reduce using rule 34 (boolean -> TRUE .)
    MOD_OP          reduce using rule 34 (boolean -> TRUE .)
    OR              reduce using rule 34 (boolean -> TRUE .)
    AND             reduce using rule 34 (boolean -> TRUE .)
    CEQ             reduce using rule 34 (boolean -> TRUE .)
    CNE             reduce using rule 34 (boolean -> TRUE .)
    CLT             reduce using rule 34 (boolean -> TRUE .)
    CLE             reduce using rule 34 (boolean -> TRUE .)
    CGT             reduce using rule 34 (boolean -> TRUE .)
    CGE             reduce using rule 34 (boolean -> TRUE .)
    COLON           reduce using rule 34 (boolean -> TRUE .)
    RPAREN          reduce using rule 34 (boolean -> TRUE .)
    RSBRACKET       reduce using rule 34 (boolean -> TRUE .)
    COMMA           reduce using rule 34 (boolean -> TRUE .)


state 8

    (52) compound_stmt -> func_def .

    END_STATEMENT   reduce using rule 52 (compound_stmt -> func_def .)
    IF              reduce using rule 52 (compound_stmt -> func_def .)
    ELSEIF          reduce using rule 52 (compound_stmt -> func_def .)
    ELSE            reduce using rule 52 (compound_stmt -> func_def .)
    FOR             reduce using rule 52 (compound_stmt -> func_def .)
    WHILE           reduce using rule 52 (compound_stmt -> func_def .)
    FUNCTION        reduce using rule 52 (compound_stmt -> func_def .)
    IDENTIFIER      reduce using rule 52 (compound_stmt -> func_def .)
    STRING          reduce using rule 52 (compound_stmt -> func_def .)
    LPAREN          reduce using rule 52 (compound_stmt -> func_def .)
    INTEGER         reduce using rule 52 (compound_stmt -> func_def .)
    DOUBLE          reduce using rule 52 (compound_stmt -> func_def .)
    SUB_OP          reduce using rule 52 (compound_stmt -> func_def .)
    RETURN          reduce using rule 52 (compound_stmt -> func_def .)
    DISPLAY         reduce using rule 52 (compound_stmt -> func_def .)
    BREAK           reduce using rule 52 (compound_stmt -> func_def .)
    CONTINUE        reduce using rule 52 (compound_stmt -> func_def .)
    TRUE            reduce using rule 52 (compound_stmt -> func_def .)
    FALSE           reduce using rule 52 (compound_stmt -> func_def .)
    $end            reduce using rule 52 (compound_stmt -> func_def .)
    DEDENT          reduce using rule 52 (compound_stmt -> func_def .)


state 9

    (8) small_stmt -> const_decl .

    END_STATEMENT   reduce using rule 8 (small_stmt -> const_decl .)


state 10

    (17) display -> DISPLAY . LPAREN expr RPAREN

    LPAREN          shift and go to state 41


state 11

    (0) S' -> program .



state 12

    (18) assignment -> IDENTIFIER . ASSIGN expr
    (19) assignment -> IDENTIFIER . ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> IDENTIFIER . LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> IDENTIFIER . CONST expr
    (26) expr -> IDENTIFIER .
    (27) expr -> IDENTIFIER . LSBRACKET expr RSBRACKET
    (22) func_call -> IDENTIFIER . LPAREN list_args RPAREN
    (23) func_call -> IDENTIFIER . LPAREN RPAREN

    ASSIGN          shift and go to state 45
    LSBRACKET       shift and go to state 43
    CONST           shift and go to state 42
    ADD_OP          reduce using rule 26 (expr -> IDENTIFIER .)
    SUB_OP          reduce using rule 26 (expr -> IDENTIFIER .)
    MUL_OP          reduce using rule 26 (expr -> IDENTIFIER .)
    DIV_OP          reduce using rule 26 (expr -> IDENTIFIER .)
    MOD_OP          reduce using rule 26 (expr -> IDENTIFIER .)
    OR              reduce using rule 26 (expr -> IDENTIFIER .)
    AND             reduce using rule 26 (expr -> IDENTIFIER .)
    CEQ             reduce using rule 26 (expr -> IDENTIFIER .)
    CNE             reduce using rule 26 (expr -> IDENTIFIER .)
    CLT             reduce using rule 26 (expr -> IDENTIFIER .)
    CLE             reduce using rule 26 (expr -> IDENTIFIER .)
    CGT             reduce using rule 26 (expr -> IDENTIFIER .)
    CGE             reduce using rule 26 (expr -> IDENTIFIER .)
    END_STATEMENT   reduce using rule 26 (expr -> IDENTIFIER .)
    LPAREN          shift and go to state 44


state 13

    (5) stmt -> compound_stmt .

    IF              reduce using rule 5 (stmt -> compound_stmt .)
    ELSEIF          reduce using rule 5 (stmt -> compound_stmt .)
    ELSE            reduce using rule 5 (stmt -> compound_stmt .)
    FOR             reduce using rule 5 (stmt -> compound_stmt .)
    WHILE           reduce using rule 5 (stmt -> compound_stmt .)
    FUNCTION        reduce using rule 5 (stmt -> compound_stmt .)
    IDENTIFIER      reduce using rule 5 (stmt -> compound_stmt .)
    STRING          reduce using rule 5 (stmt -> compound_stmt .)
    LPAREN          reduce using rule 5 (stmt -> compound_stmt .)
    INTEGER         reduce using rule 5 (stmt -> compound_stmt .)
    DOUBLE          reduce using rule 5 (stmt -> compound_stmt .)
    SUB_OP          reduce using rule 5 (stmt -> compound_stmt .)
    RETURN          reduce using rule 5 (stmt -> compound_stmt .)
    DISPLAY         reduce using rule 5 (stmt -> compound_stmt .)
    BREAK           reduce using rule 5 (stmt -> compound_stmt .)
    CONTINUE        reduce using rule 5 (stmt -> compound_stmt .)
    TRUE            reduce using rule 5 (stmt -> compound_stmt .)
    FALSE           reduce using rule 5 (stmt -> compound_stmt .)
    DEDENT          reduce using rule 5 (stmt -> compound_stmt .)
    END_STATEMENT   reduce using rule 5 (stmt -> compound_stmt .)
    $end            reduce using rule 5 (stmt -> compound_stmt .)


state 14

    (3) program -> END_STATEMENT . stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 46
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 15

    (28) expr -> STRING .

    ADD_OP          reduce using rule 28 (expr -> STRING .)
    SUB_OP          reduce using rule 28 (expr -> STRING .)
    MUL_OP          reduce using rule 28 (expr -> STRING .)
    DIV_OP          reduce using rule 28 (expr -> STRING .)
    MOD_OP          reduce using rule 28 (expr -> STRING .)
    OR              reduce using rule 28 (expr -> STRING .)
    AND             reduce using rule 28 (expr -> STRING .)
    CEQ             reduce using rule 28 (expr -> STRING .)
    CNE             reduce using rule 28 (expr -> STRING .)
    CLT             reduce using rule 28 (expr -> STRING .)
    CLE             reduce using rule 28 (expr -> STRING .)
    CGT             reduce using rule 28 (expr -> STRING .)
    CGE             reduce using rule 28 (expr -> STRING .)
    END_STATEMENT   reduce using rule 28 (expr -> STRING .)
    RSBRACKET       reduce using rule 28 (expr -> STRING .)
    COLON           reduce using rule 28 (expr -> STRING .)
    RPAREN          reduce using rule 28 (expr -> STRING .)
    COMMA           reduce using rule 28 (expr -> STRING .)


state 16

    (75) stmt -> FOR . IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> FOR . IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> FOR . IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> FOR . IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT

    IDENTIFIER      shift and go to state 47


state 17

    (4) stmt -> simple_stmt .

    IF              reduce using rule 4 (stmt -> simple_stmt .)
    ELSEIF          reduce using rule 4 (stmt -> simple_stmt .)
    ELSE            reduce using rule 4 (stmt -> simple_stmt .)
    FOR             reduce using rule 4 (stmt -> simple_stmt .)
    WHILE           reduce using rule 4 (stmt -> simple_stmt .)
    FUNCTION        reduce using rule 4 (stmt -> simple_stmt .)
    IDENTIFIER      reduce using rule 4 (stmt -> simple_stmt .)
    STRING          reduce using rule 4 (stmt -> simple_stmt .)
    LPAREN          reduce using rule 4 (stmt -> simple_stmt .)
    INTEGER         reduce using rule 4 (stmt -> simple_stmt .)
    DOUBLE          reduce using rule 4 (stmt -> simple_stmt .)
    SUB_OP          reduce using rule 4 (stmt -> simple_stmt .)
    RETURN          reduce using rule 4 (stmt -> simple_stmt .)
    DISPLAY         reduce using rule 4 (stmt -> simple_stmt .)
    BREAK           reduce using rule 4 (stmt -> simple_stmt .)
    CONTINUE        reduce using rule 4 (stmt -> simple_stmt .)
    TRUE            reduce using rule 4 (stmt -> simple_stmt .)
    FALSE           reduce using rule 4 (stmt -> simple_stmt .)
    DEDENT          reduce using rule 4 (stmt -> simple_stmt .)
    END_STATEMENT   reduce using rule 4 (stmt -> simple_stmt .)
    $end            reduce using rule 4 (stmt -> simple_stmt .)


state 18

    (7) small_stmt -> assignment .

    END_STATEMENT   reduce using rule 7 (small_stmt -> assignment .)


state 19

    (1) program -> stmt .
    (2) program -> stmt . program
    (1) program -> . stmt
    (2) program -> . stmt program
    (3) program -> . END_STATEMENT stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    $end            reduce using rule 1 (program -> stmt .)
    END_STATEMENT   shift and go to state 14
    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    program                        shift and go to state 48
    compound_stmt                  shift and go to state 13
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 19
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 20

    (74) stmt -> ELSE . expr END_STATEMENT INDENT body DEDENT
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 49
    boolean                        shift and go to state 3

state 21

    (12) small_stmt -> loop_stmt .

    END_STATEMENT   reduce using rule 12 (small_stmt -> loop_stmt .)


state 22

    (29) expr -> LPAREN . expr RPAREN
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 50
    boolean                        shift and go to state 3

state 23

    (35) boolean -> FALSE .

    END_STATEMENT   reduce using rule 35 (boolean -> FALSE .)
    ADD_OP          reduce using rule 35 (boolean -> FALSE .)
    SUB_OP          reduce using rule 35 (boolean -> FALSE .)
    MUL_OP          reduce using rule 35 (boolean -> FALSE .)
    DIV_OP          reduce using rule 35 (boolean -> FALSE .)
    MOD_OP          reduce using rule 35 (boolean -> FALSE .)
    OR              reduce using rule 35 (boolean -> FALSE .)
    AND             reduce using rule 35 (boolean -> FALSE .)
    CEQ             reduce using rule 35 (boolean -> FALSE .)
    CNE             reduce using rule 35 (boolean -> FALSE .)
    CLT             reduce using rule 35 (boolean -> FALSE .)
    CLE             reduce using rule 35 (boolean -> FALSE .)
    CGT             reduce using rule 35 (boolean -> FALSE .)
    CGE             reduce using rule 35 (boolean -> FALSE .)
    COLON           reduce using rule 35 (boolean -> FALSE .)
    RPAREN          reduce using rule 35 (boolean -> FALSE .)
    RSBRACKET       reduce using rule 35 (boolean -> FALSE .)
    COMMA           reduce using rule 35 (boolean -> FALSE .)


state 24

    (78) stmt -> FUNCTION . IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> FUNCTION . IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (56) func_def -> FUNCTION . head END_STATEMENT INDENT body DEDENT
    (57) head -> . IDENTIFIER LPAREN func_def_args RPAREN COLON
    (58) head -> . IDENTIFIER LPAREN RPAREN COLON

    IDENTIFIER      shift and go to state 52

    head                           shift and go to state 51

state 25

    (72) stmt -> IF . expr END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 53
    boolean                        shift and go to state 3

state 26

    (30) expr -> func_call .

    ADD_OP          reduce using rule 30 (expr -> func_call .)
    SUB_OP          reduce using rule 30 (expr -> func_call .)
    MUL_OP          reduce using rule 30 (expr -> func_call .)
    DIV_OP          reduce using rule 30 (expr -> func_call .)
    MOD_OP          reduce using rule 30 (expr -> func_call .)
    OR              reduce using rule 30 (expr -> func_call .)
    AND             reduce using rule 30 (expr -> func_call .)
    CEQ             reduce using rule 30 (expr -> func_call .)
    CNE             reduce using rule 30 (expr -> func_call .)
    CLT             reduce using rule 30 (expr -> func_call .)
    CLE             reduce using rule 30 (expr -> func_call .)
    CGT             reduce using rule 30 (expr -> func_call .)
    CGE             reduce using rule 30 (expr -> func_call .)
    END_STATEMENT   reduce using rule 30 (expr -> func_call .)
    RSBRACKET       reduce using rule 30 (expr -> func_call .)
    COLON           reduce using rule 30 (expr -> func_call .)
    RPAREN          reduce using rule 30 (expr -> func_call .)
    COMMA           reduce using rule 30 (expr -> func_call .)


state 27

    (53) compound_stmt -> if_stmt .

    END_STATEMENT   reduce using rule 53 (compound_stmt -> if_stmt .)
    IF              reduce using rule 53 (compound_stmt -> if_stmt .)
    ELSEIF          reduce using rule 53 (compound_stmt -> if_stmt .)
    ELSE            reduce using rule 53 (compound_stmt -> if_stmt .)
    FOR             reduce using rule 53 (compound_stmt -> if_stmt .)
    WHILE           reduce using rule 53 (compound_stmt -> if_stmt .)
    FUNCTION        reduce using rule 53 (compound_stmt -> if_stmt .)
    IDENTIFIER      reduce using rule 53 (compound_stmt -> if_stmt .)
    STRING          reduce using rule 53 (compound_stmt -> if_stmt .)
    LPAREN          reduce using rule 53 (compound_stmt -> if_stmt .)
    INTEGER         reduce using rule 53 (compound_stmt -> if_stmt .)
    DOUBLE          reduce using rule 53 (compound_stmt -> if_stmt .)
    SUB_OP          reduce using rule 53 (compound_stmt -> if_stmt .)
    RETURN          reduce using rule 53 (compound_stmt -> if_stmt .)
    DISPLAY         reduce using rule 53 (compound_stmt -> if_stmt .)
    BREAK           reduce using rule 53 (compound_stmt -> if_stmt .)
    CONTINUE        reduce using rule 53 (compound_stmt -> if_stmt .)
    TRUE            reduce using rule 53 (compound_stmt -> if_stmt .)
    FALSE           reduce using rule 53 (compound_stmt -> if_stmt .)
    $end            reduce using rule 53 (compound_stmt -> if_stmt .)
    DEDENT          reduce using rule 53 (compound_stmt -> if_stmt .)


state 28

    (9) small_stmt -> expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    END_STATEMENT   reduce using rule 9 (small_stmt -> expr .)
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 29

    (55) compound_stmt -> for_stmt .

    END_STATEMENT   reduce using rule 55 (compound_stmt -> for_stmt .)
    IF              reduce using rule 55 (compound_stmt -> for_stmt .)
    ELSEIF          reduce using rule 55 (compound_stmt -> for_stmt .)
    ELSE            reduce using rule 55 (compound_stmt -> for_stmt .)
    FOR             reduce using rule 55 (compound_stmt -> for_stmt .)
    WHILE           reduce using rule 55 (compound_stmt -> for_stmt .)
    FUNCTION        reduce using rule 55 (compound_stmt -> for_stmt .)
    IDENTIFIER      reduce using rule 55 (compound_stmt -> for_stmt .)
    STRING          reduce using rule 55 (compound_stmt -> for_stmt .)
    LPAREN          reduce using rule 55 (compound_stmt -> for_stmt .)
    INTEGER         reduce using rule 55 (compound_stmt -> for_stmt .)
    DOUBLE          reduce using rule 55 (compound_stmt -> for_stmt .)
    SUB_OP          reduce using rule 55 (compound_stmt -> for_stmt .)
    RETURN          reduce using rule 55 (compound_stmt -> for_stmt .)
    DISPLAY         reduce using rule 55 (compound_stmt -> for_stmt .)
    BREAK           reduce using rule 55 (compound_stmt -> for_stmt .)
    CONTINUE        reduce using rule 55 (compound_stmt -> for_stmt .)
    TRUE            reduce using rule 55 (compound_stmt -> for_stmt .)
    FALSE           reduce using rule 55 (compound_stmt -> for_stmt .)
    $end            reduce using rule 55 (compound_stmt -> for_stmt .)
    DEDENT          reduce using rule 55 (compound_stmt -> for_stmt .)


state 30

    (43) expr -> SUB_OP . expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 69
    boolean                        shift and go to state 3

state 31

    (15) loop_stmt -> BREAK .

    END_STATEMENT   reduce using rule 15 (loop_stmt -> BREAK .)


state 32

    (54) compound_stmt -> while_stmt .

    END_STATEMENT   reduce using rule 54 (compound_stmt -> while_stmt .)
    IF              reduce using rule 54 (compound_stmt -> while_stmt .)
    ELSEIF          reduce using rule 54 (compound_stmt -> while_stmt .)
    ELSE            reduce using rule 54 (compound_stmt -> while_stmt .)
    FOR             reduce using rule 54 (compound_stmt -> while_stmt .)
    WHILE           reduce using rule 54 (compound_stmt -> while_stmt .)
    FUNCTION        reduce using rule 54 (compound_stmt -> while_stmt .)
    IDENTIFIER      reduce using rule 54 (compound_stmt -> while_stmt .)
    STRING          reduce using rule 54 (compound_stmt -> while_stmt .)
    LPAREN          reduce using rule 54 (compound_stmt -> while_stmt .)
    INTEGER         reduce using rule 54 (compound_stmt -> while_stmt .)
    DOUBLE          reduce using rule 54 (compound_stmt -> while_stmt .)
    SUB_OP          reduce using rule 54 (compound_stmt -> while_stmt .)
    RETURN          reduce using rule 54 (compound_stmt -> while_stmt .)
    DISPLAY         reduce using rule 54 (compound_stmt -> while_stmt .)
    BREAK           reduce using rule 54 (compound_stmt -> while_stmt .)
    CONTINUE        reduce using rule 54 (compound_stmt -> while_stmt .)
    TRUE            reduce using rule 54 (compound_stmt -> while_stmt .)
    FALSE           reduce using rule 54 (compound_stmt -> while_stmt .)
    $end            reduce using rule 54 (compound_stmt -> while_stmt .)
    DEDENT          reduce using rule 54 (compound_stmt -> while_stmt .)


state 33

    (16) loop_stmt -> CONTINUE .

    END_STATEMENT   reduce using rule 16 (loop_stmt -> CONTINUE .)


state 34

    (32) expr -> DOUBLE .

    ADD_OP          reduce using rule 32 (expr -> DOUBLE .)
    SUB_OP          reduce using rule 32 (expr -> DOUBLE .)
    MUL_OP          reduce using rule 32 (expr -> DOUBLE .)
    DIV_OP          reduce using rule 32 (expr -> DOUBLE .)
    MOD_OP          reduce using rule 32 (expr -> DOUBLE .)
    OR              reduce using rule 32 (expr -> DOUBLE .)
    AND             reduce using rule 32 (expr -> DOUBLE .)
    CEQ             reduce using rule 32 (expr -> DOUBLE .)
    CNE             reduce using rule 32 (expr -> DOUBLE .)
    CLT             reduce using rule 32 (expr -> DOUBLE .)
    CLE             reduce using rule 32 (expr -> DOUBLE .)
    CGT             reduce using rule 32 (expr -> DOUBLE .)
    CGE             reduce using rule 32 (expr -> DOUBLE .)
    END_STATEMENT   reduce using rule 32 (expr -> DOUBLE .)
    RSBRACKET       reduce using rule 32 (expr -> DOUBLE .)
    COLON           reduce using rule 32 (expr -> DOUBLE .)
    RPAREN          reduce using rule 32 (expr -> DOUBLE .)
    COMMA           reduce using rule 32 (expr -> DOUBLE .)


state 35

    (73) stmt -> ELSEIF . expr END_STATEMENT INDENT body DEDENT
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 70
    boolean                        shift and go to state 3

state 36

    (11) small_stmt -> display .

    END_STATEMENT   reduce using rule 11 (small_stmt -> display .)


state 37

    (6) simple_stmt -> small_stmt END_STATEMENT .

    IF              reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    ELSEIF          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    ELSE            reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    FOR             reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    WHILE           reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    FUNCTION        reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    IDENTIFIER      reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    STRING          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    LPAREN          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    INTEGER         reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    DOUBLE          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    SUB_OP          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    RETURN          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    DISPLAY         reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    BREAK           reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    CONTINUE        reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    TRUE            reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    FALSE           reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    DEDENT          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    END_STATEMENT   reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    $end            reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)


state 38

    (26) expr -> IDENTIFIER .
    (27) expr -> IDENTIFIER . LSBRACKET expr RSBRACKET
    (22) func_call -> IDENTIFIER . LPAREN list_args RPAREN
    (23) func_call -> IDENTIFIER . LPAREN RPAREN

    ADD_OP          reduce using rule 26 (expr -> IDENTIFIER .)
    SUB_OP          reduce using rule 26 (expr -> IDENTIFIER .)
    MUL_OP          reduce using rule 26 (expr -> IDENTIFIER .)
    DIV_OP          reduce using rule 26 (expr -> IDENTIFIER .)
    MOD_OP          reduce using rule 26 (expr -> IDENTIFIER .)
    OR              reduce using rule 26 (expr -> IDENTIFIER .)
    AND             reduce using rule 26 (expr -> IDENTIFIER .)
    CEQ             reduce using rule 26 (expr -> IDENTIFIER .)
    CNE             reduce using rule 26 (expr -> IDENTIFIER .)
    CLT             reduce using rule 26 (expr -> IDENTIFIER .)
    CLE             reduce using rule 26 (expr -> IDENTIFIER .)
    CGT             reduce using rule 26 (expr -> IDENTIFIER .)
    CGE             reduce using rule 26 (expr -> IDENTIFIER .)
    END_STATEMENT   reduce using rule 26 (expr -> IDENTIFIER .)
    RSBRACKET       reduce using rule 26 (expr -> IDENTIFIER .)
    COLON           reduce using rule 26 (expr -> IDENTIFIER .)
    RPAREN          reduce using rule 26 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 26 (expr -> IDENTIFIER .)
    LSBRACKET       shift and go to state 71
    LPAREN          shift and go to state 44


state 39

    (77) stmt -> WHILE expr . END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> WHILE expr . COLON END_STATEMENT INDENT body DEDENT
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    END_STATEMENT   shift and go to state 73
    COLON           shift and go to state 72
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 40

    (14) return_stmt -> RETURN expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    END_STATEMENT   reduce using rule 14 (return_stmt -> RETURN expr .)
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 41

    (17) display -> DISPLAY LPAREN . expr RPAREN
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 74
    boolean                        shift and go to state 3

state 42

    (21) const_decl -> IDENTIFIER CONST . expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 75
    boolean                        shift and go to state 3

state 43

    (20) assignment -> IDENTIFIER LSBRACKET . expr RSBRACKET ASSIGN expr
    (27) expr -> IDENTIFIER LSBRACKET . expr RSBRACKET
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 76
    boolean                        shift and go to state 3

state 44

    (22) func_call -> IDENTIFIER LPAREN . list_args RPAREN
    (23) func_call -> IDENTIFIER LPAREN . RPAREN
    (24) list_args -> . expr
    (25) list_args -> . expr COMMA list_args
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    RPAREN          shift and go to state 78
    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 79
    boolean                        shift and go to state 3
    list_args                      shift and go to state 77

state 45

    (18) assignment -> IDENTIFIER ASSIGN . expr
    (19) assignment -> IDENTIFIER ASSIGN . LSBRACKET list_args RSBRACKET
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    LSBRACKET       shift and go to state 80
    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 81
    boolean                        shift and go to state 3

state 46

    (3) program -> END_STATEMENT stmt . program
    (1) program -> . stmt
    (2) program -> . stmt program
    (3) program -> . END_STATEMENT stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    END_STATEMENT   shift and go to state 14
    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    program                        shift and go to state 82
    compound_stmt                  shift and go to state 13
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 19
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 47

    (75) stmt -> FOR IDENTIFIER . IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> FOR IDENTIFIER . IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> FOR IDENTIFIER . IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> FOR IDENTIFIER . IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT

    IN              shift and go to state 83


state 48

    (2) program -> stmt program .

    $end            reduce using rule 2 (program -> stmt program .)


state 49

    (74) stmt -> ELSE expr . END_STATEMENT INDENT body DEDENT
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    END_STATEMENT   shift and go to state 84
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 50

    (29) expr -> LPAREN expr . RPAREN
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    RPAREN          shift and go to state 85
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 51

    (56) func_def -> FUNCTION head . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 86


state 52

    (78) stmt -> FUNCTION IDENTIFIER . LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> FUNCTION IDENTIFIER . LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (57) head -> IDENTIFIER . LPAREN func_def_args RPAREN COLON
    (58) head -> IDENTIFIER . LPAREN RPAREN COLON

    LPAREN          shift and go to state 87


state 53

    (72) stmt -> IF expr . END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    END_STATEMENT   shift and go to state 89
    COLON           shift and go to state 88
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 54

    (45) comb_op -> AND .

    IDENTIFIER      reduce using rule 45 (comb_op -> AND .)
    STRING          reduce using rule 45 (comb_op -> AND .)
    LPAREN          reduce using rule 45 (comb_op -> AND .)
    INTEGER         reduce using rule 45 (comb_op -> AND .)
    DOUBLE          reduce using rule 45 (comb_op -> AND .)
    SUB_OP          reduce using rule 45 (comb_op -> AND .)
    TRUE            reduce using rule 45 (comb_op -> AND .)
    FALSE           reduce using rule 45 (comb_op -> AND .)


state 55

    (49) comp_op -> CLE .

    IDENTIFIER      reduce using rule 49 (comp_op -> CLE .)
    STRING          reduce using rule 49 (comp_op -> CLE .)
    LPAREN          reduce using rule 49 (comp_op -> CLE .)
    INTEGER         reduce using rule 49 (comp_op -> CLE .)
    DOUBLE          reduce using rule 49 (comp_op -> CLE .)
    SUB_OP          reduce using rule 49 (comp_op -> CLE .)
    TRUE            reduce using rule 49 (comp_op -> CLE .)
    FALSE           reduce using rule 49 (comp_op -> CLE .)


state 56

    (38) expr -> expr MUL_OP . expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 90
    boolean                        shift and go to state 3

state 57

    (50) comp_op -> CGT .

    IDENTIFIER      reduce using rule 50 (comp_op -> CGT .)
    STRING          reduce using rule 50 (comp_op -> CGT .)
    LPAREN          reduce using rule 50 (comp_op -> CGT .)
    INTEGER         reduce using rule 50 (comp_op -> CGT .)
    DOUBLE          reduce using rule 50 (comp_op -> CGT .)
    SUB_OP          reduce using rule 50 (comp_op -> CGT .)
    TRUE            reduce using rule 50 (comp_op -> CGT .)
    FALSE           reduce using rule 50 (comp_op -> CGT .)


state 58

    (51) comp_op -> CGE .

    IDENTIFIER      reduce using rule 51 (comp_op -> CGE .)
    STRING          reduce using rule 51 (comp_op -> CGE .)
    LPAREN          reduce using rule 51 (comp_op -> CGE .)
    INTEGER         reduce using rule 51 (comp_op -> CGE .)
    DOUBLE          reduce using rule 51 (comp_op -> CGE .)
    SUB_OP          reduce using rule 51 (comp_op -> CGE .)
    TRUE            reduce using rule 51 (comp_op -> CGE .)
    FALSE           reduce using rule 51 (comp_op -> CGE .)


state 59

    (41) expr -> expr comb_op . expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 91
    boolean                        shift and go to state 3

state 60

    (42) expr -> expr comp_op . expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 92
    boolean                        shift and go to state 3

state 61

    (37) expr -> expr SUB_OP . expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 93
    boolean                        shift and go to state 3

state 62

    (39) expr -> expr DIV_OP . expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 94
    boolean                        shift and go to state 3

state 63

    (47) comp_op -> CNE .

    IDENTIFIER      reduce using rule 47 (comp_op -> CNE .)
    STRING          reduce using rule 47 (comp_op -> CNE .)
    LPAREN          reduce using rule 47 (comp_op -> CNE .)
    INTEGER         reduce using rule 47 (comp_op -> CNE .)
    DOUBLE          reduce using rule 47 (comp_op -> CNE .)
    SUB_OP          reduce using rule 47 (comp_op -> CNE .)
    TRUE            reduce using rule 47 (comp_op -> CNE .)
    FALSE           reduce using rule 47 (comp_op -> CNE .)


state 64

    (46) comp_op -> CEQ .

    IDENTIFIER      reduce using rule 46 (comp_op -> CEQ .)
    STRING          reduce using rule 46 (comp_op -> CEQ .)
    LPAREN          reduce using rule 46 (comp_op -> CEQ .)
    INTEGER         reduce using rule 46 (comp_op -> CEQ .)
    DOUBLE          reduce using rule 46 (comp_op -> CEQ .)
    SUB_OP          reduce using rule 46 (comp_op -> CEQ .)
    TRUE            reduce using rule 46 (comp_op -> CEQ .)
    FALSE           reduce using rule 46 (comp_op -> CEQ .)


state 65

    (36) expr -> expr ADD_OP . expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 95
    boolean                        shift and go to state 3

state 66

    (48) comp_op -> CLT .

    IDENTIFIER      reduce using rule 48 (comp_op -> CLT .)
    STRING          reduce using rule 48 (comp_op -> CLT .)
    LPAREN          reduce using rule 48 (comp_op -> CLT .)
    INTEGER         reduce using rule 48 (comp_op -> CLT .)
    DOUBLE          reduce using rule 48 (comp_op -> CLT .)
    SUB_OP          reduce using rule 48 (comp_op -> CLT .)
    TRUE            reduce using rule 48 (comp_op -> CLT .)
    FALSE           reduce using rule 48 (comp_op -> CLT .)


state 67

    (40) expr -> expr MOD_OP . expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 96
    boolean                        shift and go to state 3

state 68

    (44) comb_op -> OR .

    IDENTIFIER      reduce using rule 44 (comb_op -> OR .)
    STRING          reduce using rule 44 (comb_op -> OR .)
    LPAREN          reduce using rule 44 (comb_op -> OR .)
    INTEGER         reduce using rule 44 (comb_op -> OR .)
    DOUBLE          reduce using rule 44 (comb_op -> OR .)
    SUB_OP          reduce using rule 44 (comb_op -> OR .)
    TRUE            reduce using rule 44 (comb_op -> OR .)
    FALSE           reduce using rule 44 (comb_op -> OR .)


state 69

    (43) expr -> SUB_OP expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    ADD_OP          reduce using rule 43 (expr -> SUB_OP expr .)
    SUB_OP          reduce using rule 43 (expr -> SUB_OP expr .)
    MUL_OP          reduce using rule 43 (expr -> SUB_OP expr .)
    DIV_OP          reduce using rule 43 (expr -> SUB_OP expr .)
    MOD_OP          reduce using rule 43 (expr -> SUB_OP expr .)
    OR              reduce using rule 43 (expr -> SUB_OP expr .)
    AND             reduce using rule 43 (expr -> SUB_OP expr .)
    CEQ             reduce using rule 43 (expr -> SUB_OP expr .)
    CNE             reduce using rule 43 (expr -> SUB_OP expr .)
    CLT             reduce using rule 43 (expr -> SUB_OP expr .)
    CLE             reduce using rule 43 (expr -> SUB_OP expr .)
    CGT             reduce using rule 43 (expr -> SUB_OP expr .)
    CGE             reduce using rule 43 (expr -> SUB_OP expr .)
    END_STATEMENT   reduce using rule 43 (expr -> SUB_OP expr .)
    RSBRACKET       reduce using rule 43 (expr -> SUB_OP expr .)
    COLON           reduce using rule 43 (expr -> SUB_OP expr .)
    RPAREN          reduce using rule 43 (expr -> SUB_OP expr .)
    COMMA           reduce using rule 43 (expr -> SUB_OP expr .)

  ! ADD_OP          [ shift and go to state 65 ]
  ! SUB_OP          [ shift and go to state 61 ]
  ! MUL_OP          [ shift and go to state 56 ]
  ! DIV_OP          [ shift and go to state 62 ]
  ! MOD_OP          [ shift and go to state 67 ]
  ! OR              [ shift and go to state 68 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 64 ]
  ! CNE             [ shift and go to state 63 ]
  ! CLT             [ shift and go to state 66 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 70

    (73) stmt -> ELSEIF expr . END_STATEMENT INDENT body DEDENT
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    END_STATEMENT   shift and go to state 97
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 71

    (27) expr -> IDENTIFIER LSBRACKET . expr RSBRACKET
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 98
    boolean                        shift and go to state 3

state 72

    (63) while_stmt -> WHILE expr COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 99


state 73

    (77) stmt -> WHILE expr END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 100


state 74

    (17) display -> DISPLAY LPAREN expr . RPAREN
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    RPAREN          shift and go to state 101
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 75

    (21) const_decl -> IDENTIFIER CONST expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    END_STATEMENT   reduce using rule 21 (const_decl -> IDENTIFIER CONST expr .)
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 76

    (20) assignment -> IDENTIFIER LSBRACKET expr . RSBRACKET ASSIGN expr
    (27) expr -> IDENTIFIER LSBRACKET expr . RSBRACKET
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    RSBRACKET       shift and go to state 102
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 77

    (22) func_call -> IDENTIFIER LPAREN list_args . RPAREN

    RPAREN          shift and go to state 103


state 78

    (23) func_call -> IDENTIFIER LPAREN RPAREN .

    RSBRACKET       reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    ADD_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    SUB_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    MUL_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    DIV_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    MOD_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    OR              reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    AND             reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CEQ             reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CNE             reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CLT             reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CLE             reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CGT             reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CGE             reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    END_STATEMENT   reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    COLON           reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    COMMA           reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 23 (func_call -> IDENTIFIER LPAREN RPAREN .)


state 79

    (24) list_args -> expr .
    (25) list_args -> expr . COMMA list_args
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    RPAREN          reduce using rule 24 (list_args -> expr .)
    RSBRACKET       reduce using rule 24 (list_args -> expr .)
    COMMA           shift and go to state 104
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 80

    (19) assignment -> IDENTIFIER ASSIGN LSBRACKET . list_args RSBRACKET
    (24) list_args -> . expr
    (25) list_args -> . expr COMMA list_args
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 79
    boolean                        shift and go to state 3
    list_args                      shift and go to state 105

state 81

    (18) assignment -> IDENTIFIER ASSIGN expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    END_STATEMENT   reduce using rule 18 (assignment -> IDENTIFIER ASSIGN expr .)
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 82

    (3) program -> END_STATEMENT stmt program .

    $end            reduce using rule 3 (program -> END_STATEMENT stmt program .)


state 83

    (75) stmt -> FOR IDENTIFIER IN . RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> FOR IDENTIFIER IN . IDENTIFIER END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> FOR IDENTIFIER IN . RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> FOR IDENTIFIER IN . IDENTIFIER COLON END_STATEMENT INDENT body DEDENT

    RANGE           shift and go to state 106
    IDENTIFIER      shift and go to state 107


state 84

    (74) stmt -> ELSE expr END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 108


state 85

    (29) expr -> LPAREN expr RPAREN .

    ADD_OP          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    SUB_OP          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    MUL_OP          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    DIV_OP          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    MOD_OP          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    CEQ             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    CNE             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    CLT             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    CLE             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    CGT             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    CGE             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    END_STATEMENT   reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    RSBRACKET       reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 29 (expr -> LPAREN expr RPAREN .)


state 86

    (56) func_def -> FUNCTION head END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 109


state 87

    (78) stmt -> FUNCTION IDENTIFIER LPAREN . func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> FUNCTION IDENTIFIER LPAREN . RPAREN END_STATEMENT INDENT body DEDENT
    (57) head -> IDENTIFIER LPAREN . func_def_args RPAREN COLON
    (58) head -> IDENTIFIER LPAREN . RPAREN COLON
    (59) func_def_args -> . IDENTIFIER
    (60) func_def_args -> . IDENTIFIER COMMA func_def_args

    RPAREN          shift and go to state 111
    IDENTIFIER      shift and go to state 112

    func_def_args                  shift and go to state 110

state 88

    (66) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 113


state 89

    (72) stmt -> IF expr END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 114


state 90

    (38) expr -> expr MUL_OP expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    ADD_OP          reduce using rule 38 (expr -> expr MUL_OP expr .)
    SUB_OP          reduce using rule 38 (expr -> expr MUL_OP expr .)
    MUL_OP          reduce using rule 38 (expr -> expr MUL_OP expr .)
    DIV_OP          reduce using rule 38 (expr -> expr MUL_OP expr .)
    MOD_OP          reduce using rule 38 (expr -> expr MUL_OP expr .)
    OR              reduce using rule 38 (expr -> expr MUL_OP expr .)
    AND             reduce using rule 38 (expr -> expr MUL_OP expr .)
    CEQ             reduce using rule 38 (expr -> expr MUL_OP expr .)
    CNE             reduce using rule 38 (expr -> expr MUL_OP expr .)
    CLT             reduce using rule 38 (expr -> expr MUL_OP expr .)
    CLE             reduce using rule 38 (expr -> expr MUL_OP expr .)
    CGT             reduce using rule 38 (expr -> expr MUL_OP expr .)
    CGE             reduce using rule 38 (expr -> expr MUL_OP expr .)
    END_STATEMENT   reduce using rule 38 (expr -> expr MUL_OP expr .)
    RSBRACKET       reduce using rule 38 (expr -> expr MUL_OP expr .)
    COLON           reduce using rule 38 (expr -> expr MUL_OP expr .)
    RPAREN          reduce using rule 38 (expr -> expr MUL_OP expr .)
    COMMA           reduce using rule 38 (expr -> expr MUL_OP expr .)

  ! ADD_OP          [ shift and go to state 65 ]
  ! SUB_OP          [ shift and go to state 61 ]
  ! MUL_OP          [ shift and go to state 56 ]
  ! DIV_OP          [ shift and go to state 62 ]
  ! MOD_OP          [ shift and go to state 67 ]
  ! OR              [ shift and go to state 68 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 64 ]
  ! CNE             [ shift and go to state 63 ]
  ! CLT             [ shift and go to state 66 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 91

    (41) expr -> expr comb_op expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
  ! shift/reduce conflict for MUL_OP resolved as shift
  ! shift/reduce conflict for DIV_OP resolved as shift
  ! shift/reduce conflict for MOD_OP resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for CEQ resolved as shift
  ! shift/reduce conflict for CNE resolved as shift
  ! shift/reduce conflict for CLT resolved as shift
  ! shift/reduce conflict for CLE resolved as shift
  ! shift/reduce conflict for CGT resolved as shift
  ! shift/reduce conflict for CGE resolved as shift
    END_STATEMENT   reduce using rule 41 (expr -> expr comb_op expr .)
    RSBRACKET       reduce using rule 41 (expr -> expr comb_op expr .)
    COLON           reduce using rule 41 (expr -> expr comb_op expr .)
    RPAREN          reduce using rule 41 (expr -> expr comb_op expr .)
    COMMA           reduce using rule 41 (expr -> expr comb_op expr .)
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

  ! ADD_OP          [ reduce using rule 41 (expr -> expr comb_op expr .) ]
  ! SUB_OP          [ reduce using rule 41 (expr -> expr comb_op expr .) ]
  ! MUL_OP          [ reduce using rule 41 (expr -> expr comb_op expr .) ]
  ! DIV_OP          [ reduce using rule 41 (expr -> expr comb_op expr .) ]
  ! MOD_OP          [ reduce using rule 41 (expr -> expr comb_op expr .) ]
  ! OR              [ reduce using rule 41 (expr -> expr comb_op expr .) ]
  ! AND             [ reduce using rule 41 (expr -> expr comb_op expr .) ]
  ! CEQ             [ reduce using rule 41 (expr -> expr comb_op expr .) ]
  ! CNE             [ reduce using rule 41 (expr -> expr comb_op expr .) ]
  ! CLT             [ reduce using rule 41 (expr -> expr comb_op expr .) ]
  ! CLE             [ reduce using rule 41 (expr -> expr comb_op expr .) ]
  ! CGT             [ reduce using rule 41 (expr -> expr comb_op expr .) ]
  ! CGE             [ reduce using rule 41 (expr -> expr comb_op expr .) ]

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 92

    (42) expr -> expr comp_op expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
  ! shift/reduce conflict for MUL_OP resolved as shift
  ! shift/reduce conflict for DIV_OP resolved as shift
  ! shift/reduce conflict for MOD_OP resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for CEQ resolved as shift
  ! shift/reduce conflict for CNE resolved as shift
  ! shift/reduce conflict for CLT resolved as shift
  ! shift/reduce conflict for CLE resolved as shift
  ! shift/reduce conflict for CGT resolved as shift
  ! shift/reduce conflict for CGE resolved as shift
    END_STATEMENT   reduce using rule 42 (expr -> expr comp_op expr .)
    RSBRACKET       reduce using rule 42 (expr -> expr comp_op expr .)
    COLON           reduce using rule 42 (expr -> expr comp_op expr .)
    RPAREN          reduce using rule 42 (expr -> expr comp_op expr .)
    COMMA           reduce using rule 42 (expr -> expr comp_op expr .)
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

  ! ADD_OP          [ reduce using rule 42 (expr -> expr comp_op expr .) ]
  ! SUB_OP          [ reduce using rule 42 (expr -> expr comp_op expr .) ]
  ! MUL_OP          [ reduce using rule 42 (expr -> expr comp_op expr .) ]
  ! DIV_OP          [ reduce using rule 42 (expr -> expr comp_op expr .) ]
  ! MOD_OP          [ reduce using rule 42 (expr -> expr comp_op expr .) ]
  ! OR              [ reduce using rule 42 (expr -> expr comp_op expr .) ]
  ! AND             [ reduce using rule 42 (expr -> expr comp_op expr .) ]
  ! CEQ             [ reduce using rule 42 (expr -> expr comp_op expr .) ]
  ! CNE             [ reduce using rule 42 (expr -> expr comp_op expr .) ]
  ! CLT             [ reduce using rule 42 (expr -> expr comp_op expr .) ]
  ! CLE             [ reduce using rule 42 (expr -> expr comp_op expr .) ]
  ! CGT             [ reduce using rule 42 (expr -> expr comp_op expr .) ]
  ! CGE             [ reduce using rule 42 (expr -> expr comp_op expr .) ]

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 93

    (37) expr -> expr SUB_OP expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    ADD_OP          reduce using rule 37 (expr -> expr SUB_OP expr .)
    SUB_OP          reduce using rule 37 (expr -> expr SUB_OP expr .)
    OR              reduce using rule 37 (expr -> expr SUB_OP expr .)
    AND             reduce using rule 37 (expr -> expr SUB_OP expr .)
    CEQ             reduce using rule 37 (expr -> expr SUB_OP expr .)
    CNE             reduce using rule 37 (expr -> expr SUB_OP expr .)
    CLT             reduce using rule 37 (expr -> expr SUB_OP expr .)
    CLE             reduce using rule 37 (expr -> expr SUB_OP expr .)
    CGT             reduce using rule 37 (expr -> expr SUB_OP expr .)
    CGE             reduce using rule 37 (expr -> expr SUB_OP expr .)
    END_STATEMENT   reduce using rule 37 (expr -> expr SUB_OP expr .)
    RSBRACKET       reduce using rule 37 (expr -> expr SUB_OP expr .)
    COLON           reduce using rule 37 (expr -> expr SUB_OP expr .)
    RPAREN          reduce using rule 37 (expr -> expr SUB_OP expr .)
    COMMA           reduce using rule 37 (expr -> expr SUB_OP expr .)
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67

  ! MUL_OP          [ reduce using rule 37 (expr -> expr SUB_OP expr .) ]
  ! DIV_OP          [ reduce using rule 37 (expr -> expr SUB_OP expr .) ]
  ! MOD_OP          [ reduce using rule 37 (expr -> expr SUB_OP expr .) ]
  ! ADD_OP          [ shift and go to state 65 ]
  ! SUB_OP          [ shift and go to state 61 ]
  ! OR              [ shift and go to state 68 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 64 ]
  ! CNE             [ shift and go to state 63 ]
  ! CLT             [ shift and go to state 66 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 94

    (39) expr -> expr DIV_OP expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    ADD_OP          reduce using rule 39 (expr -> expr DIV_OP expr .)
    SUB_OP          reduce using rule 39 (expr -> expr DIV_OP expr .)
    MUL_OP          reduce using rule 39 (expr -> expr DIV_OP expr .)
    DIV_OP          reduce using rule 39 (expr -> expr DIV_OP expr .)
    MOD_OP          reduce using rule 39 (expr -> expr DIV_OP expr .)
    OR              reduce using rule 39 (expr -> expr DIV_OP expr .)
    AND             reduce using rule 39 (expr -> expr DIV_OP expr .)
    CEQ             reduce using rule 39 (expr -> expr DIV_OP expr .)
    CNE             reduce using rule 39 (expr -> expr DIV_OP expr .)
    CLT             reduce using rule 39 (expr -> expr DIV_OP expr .)
    CLE             reduce using rule 39 (expr -> expr DIV_OP expr .)
    CGT             reduce using rule 39 (expr -> expr DIV_OP expr .)
    CGE             reduce using rule 39 (expr -> expr DIV_OP expr .)
    END_STATEMENT   reduce using rule 39 (expr -> expr DIV_OP expr .)
    RSBRACKET       reduce using rule 39 (expr -> expr DIV_OP expr .)
    COLON           reduce using rule 39 (expr -> expr DIV_OP expr .)
    RPAREN          reduce using rule 39 (expr -> expr DIV_OP expr .)
    COMMA           reduce using rule 39 (expr -> expr DIV_OP expr .)

  ! ADD_OP          [ shift and go to state 65 ]
  ! SUB_OP          [ shift and go to state 61 ]
  ! MUL_OP          [ shift and go to state 56 ]
  ! DIV_OP          [ shift and go to state 62 ]
  ! MOD_OP          [ shift and go to state 67 ]
  ! OR              [ shift and go to state 68 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 64 ]
  ! CNE             [ shift and go to state 63 ]
  ! CLT             [ shift and go to state 66 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 95

    (36) expr -> expr ADD_OP expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    ADD_OP          reduce using rule 36 (expr -> expr ADD_OP expr .)
    SUB_OP          reduce using rule 36 (expr -> expr ADD_OP expr .)
    OR              reduce using rule 36 (expr -> expr ADD_OP expr .)
    AND             reduce using rule 36 (expr -> expr ADD_OP expr .)
    CEQ             reduce using rule 36 (expr -> expr ADD_OP expr .)
    CNE             reduce using rule 36 (expr -> expr ADD_OP expr .)
    CLT             reduce using rule 36 (expr -> expr ADD_OP expr .)
    CLE             reduce using rule 36 (expr -> expr ADD_OP expr .)
    CGT             reduce using rule 36 (expr -> expr ADD_OP expr .)
    CGE             reduce using rule 36 (expr -> expr ADD_OP expr .)
    END_STATEMENT   reduce using rule 36 (expr -> expr ADD_OP expr .)
    RSBRACKET       reduce using rule 36 (expr -> expr ADD_OP expr .)
    COLON           reduce using rule 36 (expr -> expr ADD_OP expr .)
    RPAREN          reduce using rule 36 (expr -> expr ADD_OP expr .)
    COMMA           reduce using rule 36 (expr -> expr ADD_OP expr .)
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67

  ! MUL_OP          [ reduce using rule 36 (expr -> expr ADD_OP expr .) ]
  ! DIV_OP          [ reduce using rule 36 (expr -> expr ADD_OP expr .) ]
  ! MOD_OP          [ reduce using rule 36 (expr -> expr ADD_OP expr .) ]
  ! ADD_OP          [ shift and go to state 65 ]
  ! SUB_OP          [ shift and go to state 61 ]
  ! OR              [ shift and go to state 68 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 64 ]
  ! CNE             [ shift and go to state 63 ]
  ! CLT             [ shift and go to state 66 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 96

    (40) expr -> expr MOD_OP expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    ADD_OP          reduce using rule 40 (expr -> expr MOD_OP expr .)
    SUB_OP          reduce using rule 40 (expr -> expr MOD_OP expr .)
    MUL_OP          reduce using rule 40 (expr -> expr MOD_OP expr .)
    DIV_OP          reduce using rule 40 (expr -> expr MOD_OP expr .)
    MOD_OP          reduce using rule 40 (expr -> expr MOD_OP expr .)
    OR              reduce using rule 40 (expr -> expr MOD_OP expr .)
    AND             reduce using rule 40 (expr -> expr MOD_OP expr .)
    CEQ             reduce using rule 40 (expr -> expr MOD_OP expr .)
    CNE             reduce using rule 40 (expr -> expr MOD_OP expr .)
    CLT             reduce using rule 40 (expr -> expr MOD_OP expr .)
    CLE             reduce using rule 40 (expr -> expr MOD_OP expr .)
    CGT             reduce using rule 40 (expr -> expr MOD_OP expr .)
    CGE             reduce using rule 40 (expr -> expr MOD_OP expr .)
    END_STATEMENT   reduce using rule 40 (expr -> expr MOD_OP expr .)
    RSBRACKET       reduce using rule 40 (expr -> expr MOD_OP expr .)
    COLON           reduce using rule 40 (expr -> expr MOD_OP expr .)
    RPAREN          reduce using rule 40 (expr -> expr MOD_OP expr .)
    COMMA           reduce using rule 40 (expr -> expr MOD_OP expr .)

  ! ADD_OP          [ shift and go to state 65 ]
  ! SUB_OP          [ shift and go to state 61 ]
  ! MUL_OP          [ shift and go to state 56 ]
  ! DIV_OP          [ shift and go to state 62 ]
  ! MOD_OP          [ shift and go to state 67 ]
  ! OR              [ shift and go to state 68 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 64 ]
  ! CNE             [ shift and go to state 63 ]
  ! CLT             [ shift and go to state 66 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 97

    (73) stmt -> ELSEIF expr END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 115


state 98

    (27) expr -> IDENTIFIER LSBRACKET expr . RSBRACKET
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    RSBRACKET       shift and go to state 116
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 99

    (63) while_stmt -> WHILE expr COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 117


state 100

    (77) stmt -> WHILE expr END_STATEMENT INDENT . body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 118
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 101

    (17) display -> DISPLAY LPAREN expr RPAREN .

    END_STATEMENT   reduce using rule 17 (display -> DISPLAY LPAREN expr RPAREN .)


state 102

    (20) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET . ASSIGN expr
    (27) expr -> IDENTIFIER LSBRACKET expr RSBRACKET .

    ASSIGN          shift and go to state 120
    ADD_OP          reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    SUB_OP          reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MUL_OP          reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    DIV_OP          reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MOD_OP          reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    OR              reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    AND             reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CEQ             reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CNE             reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLT             reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLE             reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGT             reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGE             reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    END_STATEMENT   reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)


state 103

    (22) func_call -> IDENTIFIER LPAREN list_args RPAREN .

    RSBRACKET       reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    ADD_OP          reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    SUB_OP          reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    MUL_OP          reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    DIV_OP          reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    MOD_OP          reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    OR              reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    AND             reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CEQ             reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CNE             reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CLT             reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CLE             reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CGT             reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CGE             reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    END_STATEMENT   reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    COLON           reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    COMMA           reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    RPAREN          reduce using rule 22 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)


state 104

    (25) list_args -> expr COMMA . list_args
    (24) list_args -> . expr
    (25) list_args -> . expr COMMA list_args
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 79
    boolean                        shift and go to state 3
    list_args                      shift and go to state 121

state 105

    (19) assignment -> IDENTIFIER ASSIGN LSBRACKET list_args . RSBRACKET

    RSBRACKET       shift and go to state 122


state 106

    (75) stmt -> FOR IDENTIFIER IN RANGE . LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> FOR IDENTIFIER IN RANGE . LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT

    LPAREN          shift and go to state 123


state 107

    (76) stmt -> FOR IDENTIFIER IN IDENTIFIER . END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> FOR IDENTIFIER IN IDENTIFIER . COLON END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 124
    COLON           shift and go to state 125


state 108

    (74) stmt -> ELSE expr END_STATEMENT INDENT . body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 126
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 109

    (56) func_def -> FUNCTION head END_STATEMENT INDENT . body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 127
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 110

    (78) stmt -> FUNCTION IDENTIFIER LPAREN func_def_args . RPAREN END_STATEMENT INDENT body DEDENT
    (57) head -> IDENTIFIER LPAREN func_def_args . RPAREN COLON

    RPAREN          shift and go to state 128


state 111

    (79) stmt -> FUNCTION IDENTIFIER LPAREN RPAREN . END_STATEMENT INDENT body DEDENT
    (58) head -> IDENTIFIER LPAREN RPAREN . COLON

    END_STATEMENT   shift and go to state 129
    COLON           shift and go to state 130


state 112

    (59) func_def_args -> IDENTIFIER .
    (60) func_def_args -> IDENTIFIER . COMMA func_def_args

    RPAREN          reduce using rule 59 (func_def_args -> IDENTIFIER .)
    COMMA           shift and go to state 131


state 113

    (66) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT
    (67) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT elseif_list
    (68) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    INDENT          shift and go to state 132


state 114

    (72) stmt -> IF expr END_STATEMENT INDENT . body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 133
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 115

    (73) stmt -> ELSEIF expr END_STATEMENT INDENT . body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 134
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 116

    (27) expr -> IDENTIFIER LSBRACKET expr RSBRACKET .

    ADD_OP          reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    SUB_OP          reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MUL_OP          reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    DIV_OP          reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MOD_OP          reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    OR              reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    AND             reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CEQ             reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CNE             reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLT             reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLE             reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGT             reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGE             reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    END_STATEMENT   reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    RSBRACKET       reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    COLON           reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    RPAREN          reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    COMMA           reduce using rule 27 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)


state 117

    (63) while_stmt -> WHILE expr COLON END_STATEMENT INDENT . body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 135
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 118

    (77) stmt -> WHILE expr END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 136


state 119

    (61) body -> stmt .
    (62) body -> stmt . body
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    DEDENT          reduce using rule 61 (body -> stmt .)
    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 137
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 120

    (20) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN . expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 138
    boolean                        shift and go to state 3

state 121

    (25) list_args -> expr COMMA list_args .

    RPAREN          reduce using rule 25 (list_args -> expr COMMA list_args .)
    RSBRACKET       reduce using rule 25 (list_args -> expr COMMA list_args .)


state 122

    (19) assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET .

    END_STATEMENT   reduce using rule 19 (assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET .)


state 123

    (75) stmt -> FOR IDENTIFIER IN RANGE LPAREN . expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN . expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 139
    boolean                        shift and go to state 3

state 124

    (76) stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 140


state 125

    (65) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 141


state 126

    (74) stmt -> ELSE expr END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 142


state 127

    (56) func_def -> FUNCTION head END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 143


state 128

    (78) stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN . END_STATEMENT INDENT body DEDENT
    (57) head -> IDENTIFIER LPAREN func_def_args RPAREN . COLON

    END_STATEMENT   shift and go to state 144
    COLON           shift and go to state 145


state 129

    (79) stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 146


state 130

    (58) head -> IDENTIFIER LPAREN RPAREN COLON .

    END_STATEMENT   reduce using rule 58 (head -> IDENTIFIER LPAREN RPAREN COLON .)


state 131

    (60) func_def_args -> IDENTIFIER COMMA . func_def_args
    (59) func_def_args -> . IDENTIFIER
    (60) func_def_args -> . IDENTIFIER COMMA func_def_args

    IDENTIFIER      shift and go to state 112

    func_def_args                  shift and go to state 147

state 132

    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT
    (67) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT elseif_list
    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 148
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 133

    (72) stmt -> IF expr END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 149


state 134

    (73) stmt -> ELSEIF expr END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 150


state 135

    (63) while_stmt -> WHILE expr COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 151


state 136

    (77) stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 77 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)


state 137

    (62) body -> stmt body .

    DEDENT          reduce using rule 62 (body -> stmt body .)


state 138

    (20) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    END_STATEMENT   reduce using rule 20 (assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr .)
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 139

    (75) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr . COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr . COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    COMMA           shift and go to state 152
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 140

    (76) stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT . body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 153
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 141

    (65) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 154


state 142

    (74) stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 74 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)


state 143

    (56) func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 56 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)


state 144

    (78) stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 155


state 145

    (57) head -> IDENTIFIER LPAREN func_def_args RPAREN COLON .

    END_STATEMENT   reduce using rule 57 (head -> IDENTIFIER LPAREN func_def_args RPAREN COLON .)


state 146

    (79) stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT . body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 156
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 147

    (60) func_def_args -> IDENTIFIER COMMA func_def_args .

    RPAREN          reduce using rule 60 (func_def_args -> IDENTIFIER COMMA func_def_args .)


state 148

    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT
    (67) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT elseif_list
    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    DEDENT          shift and go to state 157


state 149

    (72) stmt -> IF expr END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 72 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)


state 150

    (73) stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 73 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)


state 151

    (63) while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 63 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)


state 152

    (75) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA . expr RPAREN END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA . expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 158
    boolean                        shift and go to state 3

state 153

    (76) stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 159


state 154

    (65) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT . body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 160
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 155

    (78) stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT . body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 161
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 156

    (79) stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 162


state 157

    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .
    (67) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT . elseif_list
    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT . elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT . ELSE COLON END_STATEMENT INDENT body DEDENT
    (70) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT
    (71) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    IF              reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            shift and go to state 164
    ELSEIF          shift and go to state 165

  ! ELSEIF          [ reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .) ]
  ! ELSE            [ reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .) ]

    elseif_list                    shift and go to state 163

state 158

    (75) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr . RPAREN END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr . RPAREN COLON END_STATEMENT INDENT body DEDENT
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    RPAREN          shift and go to state 166
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 159

    (76) stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 76 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)


state 160

    (65) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 167


state 161

    (78) stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 168


state 162

    (79) stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 79 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)


state 163

    (67) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .
    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list . ELSE COLON END_STATEMENT INDENT body DEDENT

  ! shift/reduce conflict for ELSE resolved as shift
    IF              reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    ELSEIF          reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FOR             reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    WHILE           reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FUNCTION        reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    IDENTIFIER      reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    STRING          reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    LPAREN          reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    INTEGER         reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DOUBLE          reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    SUB_OP          reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    RETURN          reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DISPLAY         reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    BREAK           reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    CONTINUE        reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    TRUE            reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FALSE           reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DEDENT          reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    END_STATEMENT   reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    $end            reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    ELSE            shift and go to state 169

  ! ELSE            [ reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .) ]


state 164

    (69) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE . COLON END_STATEMENT INDENT body DEDENT

    COLON           shift and go to state 170


state 165

    (70) elseif_list -> ELSEIF . expr COLON END_STATEMENT INDENT body DEDENT
    (71) elseif_list -> ELSEIF . expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 171
    boolean                        shift and go to state 3

state 166

    (75) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN . END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN . COLON END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 172
    COLON           shift and go to state 173


state 167

    (65) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 65 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)


state 168

    (78) stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)


state 169

    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE . COLON END_STATEMENT INDENT body DEDENT

    COLON           shift and go to state 174


state 170

    (69) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 175


state 171

    (70) elseif_list -> ELSEIF expr . COLON END_STATEMENT INDENT body DEDENT
    (71) elseif_list -> ELSEIF expr . COLON END_STATEMENT INDENT body DEDENT elseif_list
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . comb_op expr
    (42) expr -> expr . comp_op expr
    (44) comb_op -> . OR
    (45) comb_op -> . AND
    (46) comp_op -> . CEQ
    (47) comp_op -> . CNE
    (48) comp_op -> . CLT
    (49) comp_op -> . CLE
    (50) comp_op -> . CGT
    (51) comp_op -> . CGE

    COLON           shift and go to state 176
    ADD_OP          shift and go to state 65
    SUB_OP          shift and go to state 61
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 62
    MOD_OP          shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 54
    CEQ             shift and go to state 64
    CNE             shift and go to state 63
    CLT             shift and go to state 66
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

    comp_op                        shift and go to state 60
    comb_op                        shift and go to state 59

state 172

    (75) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 177


state 173

    (64) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 178


state 174

    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 179


state 175

    (69) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 180


state 176

    (70) elseif_list -> ELSEIF expr COLON . END_STATEMENT INDENT body DEDENT
    (71) elseif_list -> ELSEIF expr COLON . END_STATEMENT INDENT body DEDENT elseif_list

    END_STATEMENT   shift and go to state 181


state 177

    (75) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT . body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 182
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 178

    (64) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 183


state 179

    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 184


state 180

    (69) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT . body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 185
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 181

    (70) elseif_list -> ELSEIF expr COLON END_STATEMENT . INDENT body DEDENT
    (71) elseif_list -> ELSEIF expr COLON END_STATEMENT . INDENT body DEDENT elseif_list

    INDENT          shift and go to state 186


state 182

    (75) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 187


state 183

    (64) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT . body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 188
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 184

    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT . body DEDENT
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 189
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 185

    (69) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 190


state 186

    (70) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT . body DEDENT
    (71) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT . body DEDENT elseif_list
    (61) body -> . stmt
    (62) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (72) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (76) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (77) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (79) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (52) compound_stmt -> . func_def
    (53) compound_stmt -> . if_stmt
    (54) compound_stmt -> . while_stmt
    (55) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (56) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (63) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (65) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (26) expr -> . IDENTIFIER
    (27) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (28) expr -> . STRING
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr comb_op expr
    (42) expr -> . expr comp_op expr
    (43) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (22) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (23) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    body                           shift and go to state 191
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 119
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 187

    (75) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 75 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)


state 188

    (64) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 192


state 189

    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 193


state 190

    (69) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 69 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)


state 191

    (70) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body . DEDENT
    (71) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body . DEDENT elseif_list

    DEDENT          shift and go to state 194


state 192

    (64) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)


state 193

    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)


state 194

    (70) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .
    (71) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT . elseif_list
    (70) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT
    (71) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSE            reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    ELSEIF          shift and go to state 165

  ! ELSEIF          [ reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .) ]

    elseif_list                    shift and go to state 195

state 195

    (71) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .

    ELSE            reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    END_STATEMENT   reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    IF              reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    ELSEIF          reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FOR             reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    WHILE           reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FUNCTION        reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    IDENTIFIER      reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    STRING          reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    LPAREN          reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    INTEGER         reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DOUBLE          reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    SUB_OP          reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    RETURN          reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DISPLAY         reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    BREAK           reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    CONTINUE        reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    TRUE            reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FALSE           reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    $end            reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DEDENT          reduce using rule 71 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD_OP in state 91 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 91 resolved as shift
WARNING: shift/reduce conflict for MUL_OP in state 91 resolved as shift
WARNING: shift/reduce conflict for DIV_OP in state 91 resolved as shift
WARNING: shift/reduce conflict for MOD_OP in state 91 resolved as shift
WARNING: shift/reduce conflict for OR in state 91 resolved as shift
WARNING: shift/reduce conflict for AND in state 91 resolved as shift
WARNING: shift/reduce conflict for CEQ in state 91 resolved as shift
WARNING: shift/reduce conflict for CNE in state 91 resolved as shift
WARNING: shift/reduce conflict for CLT in state 91 resolved as shift
WARNING: shift/reduce conflict for CLE in state 91 resolved as shift
WARNING: shift/reduce conflict for CGT in state 91 resolved as shift
WARNING: shift/reduce conflict for CGE in state 91 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 92 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 92 resolved as shift
WARNING: shift/reduce conflict for MUL_OP in state 92 resolved as shift
WARNING: shift/reduce conflict for DIV_OP in state 92 resolved as shift
WARNING: shift/reduce conflict for MOD_OP in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for CEQ in state 92 resolved as shift
WARNING: shift/reduce conflict for CNE in state 92 resolved as shift
WARNING: shift/reduce conflict for CLT in state 92 resolved as shift
WARNING: shift/reduce conflict for CLE in state 92 resolved as shift
WARNING: shift/reduce conflict for CGT in state 92 resolved as shift
WARNING: shift/reduce conflict for CGE in state 92 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 157 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 157 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 163 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 194 resolved as shift
