Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt
Rule 2     program -> stmt program
Rule 3     program -> END_STATEMENT stmt program
Rule 4     stmt -> simple_stmt
Rule 5     stmt -> compound_stmt
Rule 6     simple_stmt -> small_stmt END_STATEMENT
Rule 7     small_stmt -> assignment
Rule 8     small_stmt -> const_decl
Rule 9     small_stmt -> expr
Rule 10    small_stmt -> return_stmt
Rule 11    small_stmt -> display
Rule 12    small_stmt -> loop_stmt
Rule 13    return_stmt -> RETURN
Rule 14    return_stmt -> RETURN expr
Rule 15    loop_stmt -> BREAK
Rule 16    loop_stmt -> CONTINUE
Rule 17    display -> DISPLAY LPAREN expr RPAREN
Rule 18    assignment -> IDENTIFIER ASSIGN expr
Rule 19    assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
Rule 20    assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
Rule 21    const_decl -> IDENTIFIER CONST expr
Rule 22    const_decl -> IDENTIFIER CONST LSBRACKET list_args RSBRACKET
Rule 23    func_call -> IDENTIFIER LPAREN list_args RPAREN
Rule 24    func_call -> IDENTIFIER LPAREN RPAREN
Rule 25    list_args -> expr
Rule 26    list_args -> expr COMMA list_args
Rule 27    expr -> IDENTIFIER
Rule 28    expr -> IDENTIFIER LSBRACKET expr RSBRACKET
Rule 29    expr -> LPAREN expr RPAREN
Rule 30    expr -> func_call
Rule 31    expr -> INTEGER
Rule 32    expr -> DOUBLE
Rule 33    expr -> boolean
Rule 34    boolean -> TRUE
Rule 35    boolean -> FALSE
Rule 36    expr -> expr ADD_OP expr
Rule 37    expr -> expr SUB_OP expr
Rule 38    expr -> expr MUL_OP expr
Rule 39    expr -> expr DIV_OP expr
Rule 40    expr -> expr MOD_OP expr
Rule 41    expr -> expr OR expr
Rule 42    expr -> expr AND expr
Rule 43    expr -> expr CEQ expr
Rule 44    expr -> expr CNE expr
Rule 45    expr -> expr CLT expr
Rule 46    expr -> expr CLE expr
Rule 47    expr -> expr CGT expr
Rule 48    expr -> expr CGE expr
Rule 49    expr -> SUB_OP expr
Rule 50    compound_stmt -> func_def
Rule 51    compound_stmt -> if_stmt
Rule 52    compound_stmt -> while_stmt
Rule 53    compound_stmt -> for_stmt
Rule 54    func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT
Rule 55    head -> IDENTIFIER LPAREN func_def_args RPAREN COLON
Rule 56    head -> IDENTIFIER LPAREN RPAREN COLON
Rule 57    head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_INT COLON
Rule 58    head -> IDENTIFIER LPAREN RPAREN RETURN T_INT COLON
Rule 59    head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_DOUBLE COLON
Rule 60    head -> IDENTIFIER LPAREN RPAREN RETURN T_DOUBLE COLON
Rule 61    head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_BOOL COLON
Rule 62    head -> IDENTIFIER LPAREN RPAREN RETURN T_BOOL COLON
Rule 63    head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_INT COLON
Rule 64    head -> IDENTIFIER LPAREN RPAREN RETURN T_LIST_INT COLON
Rule 65    head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_DOUBLE COLON
Rule 66    head -> IDENTIFIER LPAREN RPAREN RETURN T_LIST_DOUBLE COLON
Rule 67    head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_BOOL COLON
Rule 68    head -> IDENTIFIER LPAREN RPAREN RETURN T_LIST_BOOL COLON
Rule 69    func_def_args -> argument
Rule 70    func_def_args -> argument COMMA func_def_args
Rule 71    argument -> T_INT IDENTIFIER
Rule 72    argument -> T_DOUBLE IDENTIFIER
Rule 73    argument -> T_BOOL IDENTIFIER
Rule 74    argument -> T_LIST_INT IDENTIFIER
Rule 75    argument -> T_LIST_DOUBLE IDENTIFIER
Rule 76    argument -> T_LIST_BOOL IDENTIFIER
Rule 77    body -> stmt
Rule 78    body -> stmt body
Rule 79    while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT
Rule 80    for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
Rule 81    for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
Rule 82    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT
Rule 83    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
Rule 84    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
Rule 85    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
Rule 86    elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT
Rule 87    elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list

Terminals, with rules where they appear

ADD_OP               : 36
AND                  : 42
ASSIGN               : 18 19 20
BREAK                : 15
CEQ                  : 43
CGE                  : 48
CGT                  : 47
CLE                  : 46
CLT                  : 45
CNE                  : 44
COLON                : 55 56 57 58 59 60 61 62 63 64 65 66 67 68 79 80 81 82 83 84 84 85 85 86 87
COMMA                : 26 70 80
CONST                : 21 22
CONTINUE             : 16
DEDENT               : 54 79 80 81 82 83 84 84 85 85 86 87
DISPLAY              : 17
DIV_OP               : 39
DOUBLE               : 32
ELSE                 : 84 85
ELSEIF               : 86 87
END_STATEMENT        : 3 6 54 79 80 81 82 83 84 84 85 85 86 87
FALSE                : 35
FOR                  : 80 81
FUNCTION             : 54
IDENTIFIER           : 18 19 20 21 22 23 24 27 28 55 56 57 58 59 60 61 62 63 64 65 66 67 68 71 72 73 74 75 76 80 81 81
IF                   : 82 83 84 85
IN                   : 80 81
INDENT               : 54 79 80 81 82 83 84 84 85 85 86 87
INTEGER              : 31
LPAREN               : 17 23 24 29 55 56 57 58 59 60 61 62 63 64 65 66 67 68 80
LSBRACKET            : 19 20 22 28
MOD_OP               : 40
MUL_OP               : 38
OR                   : 41
RANGE                : 80
RETURN               : 13 14 57 58 59 60 61 62 63 64 65 66 67 68
RPAREN               : 17 23 24 29 55 56 57 58 59 60 61 62 63 64 65 66 67 68 80
RSBRACKET            : 19 20 22 28
SUB_OP               : 37 49
TRUE                 : 34
T_BOOL               : 61 62 73
T_DOUBLE             : 59 60 72
T_INT                : 57 58 71
T_LIST_BOOL          : 67 68 76
T_LIST_DOUBLE        : 65 66 75
T_LIST_INT           : 63 64 74
WHILE                : 79
error                : 

Nonterminals, with rules where they appear

argument             : 69 70
assignment           : 7
body                 : 54 78 79 80 81 82 83 84 84 85 85 86 87
boolean              : 33
compound_stmt        : 5
const_decl           : 8
display              : 11
elseif_list          : 83 84 87
expr                 : 9 14 17 18 20 20 21 25 26 28 29 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 79 80 80 82 83 84 85 86 87
for_stmt             : 53
func_call            : 30
func_def             : 50
func_def_args        : 55 57 59 61 63 65 67 70
head                 : 54
if_stmt              : 51
list_args            : 19 22 23 26
loop_stmt            : 12
program              : 2 3 0
return_stmt          : 10
simple_stmt          : 4
small_stmt           : 6
stmt                 : 1 2 3 77 78
while_stmt           : 52

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt
    (2) program -> . stmt program
    (3) program -> . END_STATEMENT stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (50) compound_stmt -> . func_def
    (51) compound_stmt -> . if_stmt
    (52) compound_stmt -> . while_stmt
    (53) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (54) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (82) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (79) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (80) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    END_STATEMENT   shift and go to state 15
    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    RETURN          shift and go to state 6
    DISPLAY         shift and go to state 11
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    boolean                        shift and go to state 4
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 19
    display                        shift and go to state 33
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 30
    program                        shift and go to state 12
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    expr                           shift and go to state 27
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 14

state 1

    (54) func_def -> FUNCTION . head END_STATEMENT INDENT body DEDENT
    (55) head -> . IDENTIFIER LPAREN func_def_args RPAREN COLON
    (56) head -> . IDENTIFIER LPAREN RPAREN COLON
    (57) head -> . IDENTIFIER LPAREN func_def_args RPAREN RETURN T_INT COLON
    (58) head -> . IDENTIFIER LPAREN RPAREN RETURN T_INT COLON
    (59) head -> . IDENTIFIER LPAREN func_def_args RPAREN RETURN T_DOUBLE COLON
    (60) head -> . IDENTIFIER LPAREN RPAREN RETURN T_DOUBLE COLON
    (61) head -> . IDENTIFIER LPAREN func_def_args RPAREN RETURN T_BOOL COLON
    (62) head -> . IDENTIFIER LPAREN RPAREN RETURN T_BOOL COLON
    (63) head -> . IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_INT COLON
    (64) head -> . IDENTIFIER LPAREN RPAREN RETURN T_LIST_INT COLON
    (65) head -> . IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_DOUBLE COLON
    (66) head -> . IDENTIFIER LPAREN RPAREN RETURN T_LIST_DOUBLE COLON
    (67) head -> . IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_BOOL COLON
    (68) head -> . IDENTIFIER LPAREN RPAREN RETURN T_LIST_BOOL COLON

    IDENTIFIER      shift and go to state 35

    head                           shift and go to state 34

state 2

    (6) simple_stmt -> small_stmt . END_STATEMENT

    END_STATEMENT   shift and go to state 36


state 3

    (79) while_stmt -> WHILE . expr COLON END_STATEMENT INDENT body DEDENT
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    expr                           shift and go to state 38
    boolean                        shift and go to state 4
    func_call                      shift and go to state 25

state 4

    (33) expr -> boolean .

    ADD_OP          reduce using rule 33 (expr -> boolean .)
    SUB_OP          reduce using rule 33 (expr -> boolean .)
    MUL_OP          reduce using rule 33 (expr -> boolean .)
    DIV_OP          reduce using rule 33 (expr -> boolean .)
    MOD_OP          reduce using rule 33 (expr -> boolean .)
    OR              reduce using rule 33 (expr -> boolean .)
    AND             reduce using rule 33 (expr -> boolean .)
    CEQ             reduce using rule 33 (expr -> boolean .)
    CNE             reduce using rule 33 (expr -> boolean .)
    CLT             reduce using rule 33 (expr -> boolean .)
    CLE             reduce using rule 33 (expr -> boolean .)
    CGT             reduce using rule 33 (expr -> boolean .)
    CGE             reduce using rule 33 (expr -> boolean .)
    END_STATEMENT   reduce using rule 33 (expr -> boolean .)
    COLON           reduce using rule 33 (expr -> boolean .)
    RPAREN          reduce using rule 33 (expr -> boolean .)
    RSBRACKET       reduce using rule 33 (expr -> boolean .)
    COMMA           reduce using rule 33 (expr -> boolean .)


state 5

    (10) small_stmt -> return_stmt .

    END_STATEMENT   reduce using rule 10 (small_stmt -> return_stmt .)


state 6

    (13) return_stmt -> RETURN .
    (14) return_stmt -> RETURN . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    END_STATEMENT   reduce using rule 13 (return_stmt -> RETURN .)
    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 39
    boolean                        shift and go to state 4

state 7

    (31) expr -> INTEGER .

    ADD_OP          reduce using rule 31 (expr -> INTEGER .)
    SUB_OP          reduce using rule 31 (expr -> INTEGER .)
    MUL_OP          reduce using rule 31 (expr -> INTEGER .)
    DIV_OP          reduce using rule 31 (expr -> INTEGER .)
    MOD_OP          reduce using rule 31 (expr -> INTEGER .)
    OR              reduce using rule 31 (expr -> INTEGER .)
    AND             reduce using rule 31 (expr -> INTEGER .)
    CEQ             reduce using rule 31 (expr -> INTEGER .)
    CNE             reduce using rule 31 (expr -> INTEGER .)
    CLT             reduce using rule 31 (expr -> INTEGER .)
    CLE             reduce using rule 31 (expr -> INTEGER .)
    CGT             reduce using rule 31 (expr -> INTEGER .)
    CGE             reduce using rule 31 (expr -> INTEGER .)
    END_STATEMENT   reduce using rule 31 (expr -> INTEGER .)
    COLON           reduce using rule 31 (expr -> INTEGER .)
    RPAREN          reduce using rule 31 (expr -> INTEGER .)
    RSBRACKET       reduce using rule 31 (expr -> INTEGER .)
    COMMA           reduce using rule 31 (expr -> INTEGER .)


state 8

    (34) boolean -> TRUE .

    ADD_OP          reduce using rule 34 (boolean -> TRUE .)
    SUB_OP          reduce using rule 34 (boolean -> TRUE .)
    MUL_OP          reduce using rule 34 (boolean -> TRUE .)
    DIV_OP          reduce using rule 34 (boolean -> TRUE .)
    MOD_OP          reduce using rule 34 (boolean -> TRUE .)
    OR              reduce using rule 34 (boolean -> TRUE .)
    AND             reduce using rule 34 (boolean -> TRUE .)
    CEQ             reduce using rule 34 (boolean -> TRUE .)
    CNE             reduce using rule 34 (boolean -> TRUE .)
    CLT             reduce using rule 34 (boolean -> TRUE .)
    CLE             reduce using rule 34 (boolean -> TRUE .)
    CGT             reduce using rule 34 (boolean -> TRUE .)
    CGE             reduce using rule 34 (boolean -> TRUE .)
    END_STATEMENT   reduce using rule 34 (boolean -> TRUE .)
    COLON           reduce using rule 34 (boolean -> TRUE .)
    RPAREN          reduce using rule 34 (boolean -> TRUE .)
    RSBRACKET       reduce using rule 34 (boolean -> TRUE .)
    COMMA           reduce using rule 34 (boolean -> TRUE .)


state 9

    (80) for_stmt -> FOR . IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> FOR . IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT

    IDENTIFIER      shift and go to state 40


state 10

    (8) small_stmt -> const_decl .

    END_STATEMENT   reduce using rule 8 (small_stmt -> const_decl .)


state 11

    (17) display -> DISPLAY . LPAREN expr RPAREN

    LPAREN          shift and go to state 41


state 12

    (0) S' -> program .



state 13

    (18) assignment -> IDENTIFIER . ASSIGN expr
    (19) assignment -> IDENTIFIER . ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> IDENTIFIER . LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> IDENTIFIER . CONST expr
    (22) const_decl -> IDENTIFIER . CONST LSBRACKET list_args RSBRACKET
    (27) expr -> IDENTIFIER .
    (28) expr -> IDENTIFIER . LSBRACKET expr RSBRACKET
    (23) func_call -> IDENTIFIER . LPAREN list_args RPAREN
    (24) func_call -> IDENTIFIER . LPAREN RPAREN

    ASSIGN          shift and go to state 45
    LSBRACKET       shift and go to state 43
    CONST           shift and go to state 42
    ADD_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    SUB_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    MUL_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    DIV_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    MOD_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    OR              reduce using rule 27 (expr -> IDENTIFIER .)
    AND             reduce using rule 27 (expr -> IDENTIFIER .)
    CEQ             reduce using rule 27 (expr -> IDENTIFIER .)
    CNE             reduce using rule 27 (expr -> IDENTIFIER .)
    CLT             reduce using rule 27 (expr -> IDENTIFIER .)
    CLE             reduce using rule 27 (expr -> IDENTIFIER .)
    CGT             reduce using rule 27 (expr -> IDENTIFIER .)
    CGE             reduce using rule 27 (expr -> IDENTIFIER .)
    END_STATEMENT   reduce using rule 27 (expr -> IDENTIFIER .)
    LPAREN          shift and go to state 44


state 14

    (5) stmt -> compound_stmt .

    END_STATEMENT   reduce using rule 5 (stmt -> compound_stmt .)
    FUNCTION        reduce using rule 5 (stmt -> compound_stmt .)
    IF              reduce using rule 5 (stmt -> compound_stmt .)
    WHILE           reduce using rule 5 (stmt -> compound_stmt .)
    FOR             reduce using rule 5 (stmt -> compound_stmt .)
    IDENTIFIER      reduce using rule 5 (stmt -> compound_stmt .)
    LPAREN          reduce using rule 5 (stmt -> compound_stmt .)
    INTEGER         reduce using rule 5 (stmt -> compound_stmt .)
    DOUBLE          reduce using rule 5 (stmt -> compound_stmt .)
    SUB_OP          reduce using rule 5 (stmt -> compound_stmt .)
    RETURN          reduce using rule 5 (stmt -> compound_stmt .)
    DISPLAY         reduce using rule 5 (stmt -> compound_stmt .)
    BREAK           reduce using rule 5 (stmt -> compound_stmt .)
    CONTINUE        reduce using rule 5 (stmt -> compound_stmt .)
    TRUE            reduce using rule 5 (stmt -> compound_stmt .)
    FALSE           reduce using rule 5 (stmt -> compound_stmt .)
    DEDENT          reduce using rule 5 (stmt -> compound_stmt .)
    $end            reduce using rule 5 (stmt -> compound_stmt .)


state 15

    (3) program -> END_STATEMENT . stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (50) compound_stmt -> . func_def
    (51) compound_stmt -> . if_stmt
    (52) compound_stmt -> . while_stmt
    (53) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (54) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (82) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (79) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (80) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    RETURN          shift and go to state 6
    DISPLAY         shift and go to state 11
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    boolean                        shift and go to state 4
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 46
    display                        shift and go to state 33
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 30
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    expr                           shift and go to state 27
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 14

state 16

    (50) compound_stmt -> func_def .

    FUNCTION        reduce using rule 50 (compound_stmt -> func_def .)
    IF              reduce using rule 50 (compound_stmt -> func_def .)
    WHILE           reduce using rule 50 (compound_stmt -> func_def .)
    FOR             reduce using rule 50 (compound_stmt -> func_def .)
    IDENTIFIER      reduce using rule 50 (compound_stmt -> func_def .)
    LPAREN          reduce using rule 50 (compound_stmt -> func_def .)
    INTEGER         reduce using rule 50 (compound_stmt -> func_def .)
    DOUBLE          reduce using rule 50 (compound_stmt -> func_def .)
    SUB_OP          reduce using rule 50 (compound_stmt -> func_def .)
    RETURN          reduce using rule 50 (compound_stmt -> func_def .)
    DISPLAY         reduce using rule 50 (compound_stmt -> func_def .)
    BREAK           reduce using rule 50 (compound_stmt -> func_def .)
    CONTINUE        reduce using rule 50 (compound_stmt -> func_def .)
    TRUE            reduce using rule 50 (compound_stmt -> func_def .)
    FALSE           reduce using rule 50 (compound_stmt -> func_def .)
    DEDENT          reduce using rule 50 (compound_stmt -> func_def .)
    END_STATEMENT   reduce using rule 50 (compound_stmt -> func_def .)
    $end            reduce using rule 50 (compound_stmt -> func_def .)


state 17

    (4) stmt -> simple_stmt .

    END_STATEMENT   reduce using rule 4 (stmt -> simple_stmt .)
    FUNCTION        reduce using rule 4 (stmt -> simple_stmt .)
    IF              reduce using rule 4 (stmt -> simple_stmt .)
    WHILE           reduce using rule 4 (stmt -> simple_stmt .)
    FOR             reduce using rule 4 (stmt -> simple_stmt .)
    IDENTIFIER      reduce using rule 4 (stmt -> simple_stmt .)
    LPAREN          reduce using rule 4 (stmt -> simple_stmt .)
    INTEGER         reduce using rule 4 (stmt -> simple_stmt .)
    DOUBLE          reduce using rule 4 (stmt -> simple_stmt .)
    SUB_OP          reduce using rule 4 (stmt -> simple_stmt .)
    RETURN          reduce using rule 4 (stmt -> simple_stmt .)
    DISPLAY         reduce using rule 4 (stmt -> simple_stmt .)
    BREAK           reduce using rule 4 (stmt -> simple_stmt .)
    CONTINUE        reduce using rule 4 (stmt -> simple_stmt .)
    TRUE            reduce using rule 4 (stmt -> simple_stmt .)
    FALSE           reduce using rule 4 (stmt -> simple_stmt .)
    DEDENT          reduce using rule 4 (stmt -> simple_stmt .)
    $end            reduce using rule 4 (stmt -> simple_stmt .)


state 18

    (7) small_stmt -> assignment .

    END_STATEMENT   reduce using rule 7 (small_stmt -> assignment .)


state 19

    (1) program -> stmt .
    (2) program -> stmt . program
    (1) program -> . stmt
    (2) program -> . stmt program
    (3) program -> . END_STATEMENT stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (50) compound_stmt -> . func_def
    (51) compound_stmt -> . if_stmt
    (52) compound_stmt -> . while_stmt
    (53) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (54) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (82) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (79) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (80) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    $end            reduce using rule 1 (program -> stmt .)
    END_STATEMENT   shift and go to state 15
    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    RETURN          shift and go to state 6
    DISPLAY         shift and go to state 11
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    boolean                        shift and go to state 4
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 19
    display                        shift and go to state 33
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 30
    program                        shift and go to state 47
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    expr                           shift and go to state 27
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 14

state 20

    (53) compound_stmt -> for_stmt .

    FUNCTION        reduce using rule 53 (compound_stmt -> for_stmt .)
    IF              reduce using rule 53 (compound_stmt -> for_stmt .)
    WHILE           reduce using rule 53 (compound_stmt -> for_stmt .)
    FOR             reduce using rule 53 (compound_stmt -> for_stmt .)
    IDENTIFIER      reduce using rule 53 (compound_stmt -> for_stmt .)
    LPAREN          reduce using rule 53 (compound_stmt -> for_stmt .)
    INTEGER         reduce using rule 53 (compound_stmt -> for_stmt .)
    DOUBLE          reduce using rule 53 (compound_stmt -> for_stmt .)
    SUB_OP          reduce using rule 53 (compound_stmt -> for_stmt .)
    RETURN          reduce using rule 53 (compound_stmt -> for_stmt .)
    DISPLAY         reduce using rule 53 (compound_stmt -> for_stmt .)
    BREAK           reduce using rule 53 (compound_stmt -> for_stmt .)
    CONTINUE        reduce using rule 53 (compound_stmt -> for_stmt .)
    TRUE            reduce using rule 53 (compound_stmt -> for_stmt .)
    FALSE           reduce using rule 53 (compound_stmt -> for_stmt .)
    DEDENT          reduce using rule 53 (compound_stmt -> for_stmt .)
    END_STATEMENT   reduce using rule 53 (compound_stmt -> for_stmt .)
    $end            reduce using rule 53 (compound_stmt -> for_stmt .)


state 21

    (12) small_stmt -> loop_stmt .

    END_STATEMENT   reduce using rule 12 (small_stmt -> loop_stmt .)


state 22

    (29) expr -> LPAREN . expr RPAREN
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 48
    boolean                        shift and go to state 4

state 23

    (35) boolean -> FALSE .

    ADD_OP          reduce using rule 35 (boolean -> FALSE .)
    SUB_OP          reduce using rule 35 (boolean -> FALSE .)
    MUL_OP          reduce using rule 35 (boolean -> FALSE .)
    DIV_OP          reduce using rule 35 (boolean -> FALSE .)
    MOD_OP          reduce using rule 35 (boolean -> FALSE .)
    OR              reduce using rule 35 (boolean -> FALSE .)
    AND             reduce using rule 35 (boolean -> FALSE .)
    CEQ             reduce using rule 35 (boolean -> FALSE .)
    CNE             reduce using rule 35 (boolean -> FALSE .)
    CLT             reduce using rule 35 (boolean -> FALSE .)
    CLE             reduce using rule 35 (boolean -> FALSE .)
    CGT             reduce using rule 35 (boolean -> FALSE .)
    CGE             reduce using rule 35 (boolean -> FALSE .)
    END_STATEMENT   reduce using rule 35 (boolean -> FALSE .)
    COLON           reduce using rule 35 (boolean -> FALSE .)
    RPAREN          reduce using rule 35 (boolean -> FALSE .)
    RSBRACKET       reduce using rule 35 (boolean -> FALSE .)
    COMMA           reduce using rule 35 (boolean -> FALSE .)


state 24

    (82) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 49
    boolean                        shift and go to state 4

state 25

    (30) expr -> func_call .

    ADD_OP          reduce using rule 30 (expr -> func_call .)
    SUB_OP          reduce using rule 30 (expr -> func_call .)
    MUL_OP          reduce using rule 30 (expr -> func_call .)
    DIV_OP          reduce using rule 30 (expr -> func_call .)
    MOD_OP          reduce using rule 30 (expr -> func_call .)
    OR              reduce using rule 30 (expr -> func_call .)
    AND             reduce using rule 30 (expr -> func_call .)
    CEQ             reduce using rule 30 (expr -> func_call .)
    CNE             reduce using rule 30 (expr -> func_call .)
    CLT             reduce using rule 30 (expr -> func_call .)
    CLE             reduce using rule 30 (expr -> func_call .)
    CGT             reduce using rule 30 (expr -> func_call .)
    CGE             reduce using rule 30 (expr -> func_call .)
    END_STATEMENT   reduce using rule 30 (expr -> func_call .)
    COLON           reduce using rule 30 (expr -> func_call .)
    RPAREN          reduce using rule 30 (expr -> func_call .)
    RSBRACKET       reduce using rule 30 (expr -> func_call .)
    COMMA           reduce using rule 30 (expr -> func_call .)


state 26

    (51) compound_stmt -> if_stmt .

    FUNCTION        reduce using rule 51 (compound_stmt -> if_stmt .)
    IF              reduce using rule 51 (compound_stmt -> if_stmt .)
    WHILE           reduce using rule 51 (compound_stmt -> if_stmt .)
    FOR             reduce using rule 51 (compound_stmt -> if_stmt .)
    IDENTIFIER      reduce using rule 51 (compound_stmt -> if_stmt .)
    LPAREN          reduce using rule 51 (compound_stmt -> if_stmt .)
    INTEGER         reduce using rule 51 (compound_stmt -> if_stmt .)
    DOUBLE          reduce using rule 51 (compound_stmt -> if_stmt .)
    SUB_OP          reduce using rule 51 (compound_stmt -> if_stmt .)
    RETURN          reduce using rule 51 (compound_stmt -> if_stmt .)
    DISPLAY         reduce using rule 51 (compound_stmt -> if_stmt .)
    BREAK           reduce using rule 51 (compound_stmt -> if_stmt .)
    CONTINUE        reduce using rule 51 (compound_stmt -> if_stmt .)
    TRUE            reduce using rule 51 (compound_stmt -> if_stmt .)
    FALSE           reduce using rule 51 (compound_stmt -> if_stmt .)
    DEDENT          reduce using rule 51 (compound_stmt -> if_stmt .)
    END_STATEMENT   reduce using rule 51 (compound_stmt -> if_stmt .)
    $end            reduce using rule 51 (compound_stmt -> if_stmt .)


state 27

    (9) small_stmt -> expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 9 (small_stmt -> expr .)
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 28

    (49) expr -> SUB_OP . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 63
    boolean                        shift and go to state 4

state 29

    (15) loop_stmt -> BREAK .

    END_STATEMENT   reduce using rule 15 (loop_stmt -> BREAK .)


state 30

    (52) compound_stmt -> while_stmt .

    FUNCTION        reduce using rule 52 (compound_stmt -> while_stmt .)
    IF              reduce using rule 52 (compound_stmt -> while_stmt .)
    WHILE           reduce using rule 52 (compound_stmt -> while_stmt .)
    FOR             reduce using rule 52 (compound_stmt -> while_stmt .)
    IDENTIFIER      reduce using rule 52 (compound_stmt -> while_stmt .)
    LPAREN          reduce using rule 52 (compound_stmt -> while_stmt .)
    INTEGER         reduce using rule 52 (compound_stmt -> while_stmt .)
    DOUBLE          reduce using rule 52 (compound_stmt -> while_stmt .)
    SUB_OP          reduce using rule 52 (compound_stmt -> while_stmt .)
    RETURN          reduce using rule 52 (compound_stmt -> while_stmt .)
    DISPLAY         reduce using rule 52 (compound_stmt -> while_stmt .)
    BREAK           reduce using rule 52 (compound_stmt -> while_stmt .)
    CONTINUE        reduce using rule 52 (compound_stmt -> while_stmt .)
    TRUE            reduce using rule 52 (compound_stmt -> while_stmt .)
    FALSE           reduce using rule 52 (compound_stmt -> while_stmt .)
    DEDENT          reduce using rule 52 (compound_stmt -> while_stmt .)
    END_STATEMENT   reduce using rule 52 (compound_stmt -> while_stmt .)
    $end            reduce using rule 52 (compound_stmt -> while_stmt .)


state 31

    (16) loop_stmt -> CONTINUE .

    END_STATEMENT   reduce using rule 16 (loop_stmt -> CONTINUE .)


state 32

    (32) expr -> DOUBLE .

    ADD_OP          reduce using rule 32 (expr -> DOUBLE .)
    SUB_OP          reduce using rule 32 (expr -> DOUBLE .)
    MUL_OP          reduce using rule 32 (expr -> DOUBLE .)
    DIV_OP          reduce using rule 32 (expr -> DOUBLE .)
    MOD_OP          reduce using rule 32 (expr -> DOUBLE .)
    OR              reduce using rule 32 (expr -> DOUBLE .)
    AND             reduce using rule 32 (expr -> DOUBLE .)
    CEQ             reduce using rule 32 (expr -> DOUBLE .)
    CNE             reduce using rule 32 (expr -> DOUBLE .)
    CLT             reduce using rule 32 (expr -> DOUBLE .)
    CLE             reduce using rule 32 (expr -> DOUBLE .)
    CGT             reduce using rule 32 (expr -> DOUBLE .)
    CGE             reduce using rule 32 (expr -> DOUBLE .)
    END_STATEMENT   reduce using rule 32 (expr -> DOUBLE .)
    COLON           reduce using rule 32 (expr -> DOUBLE .)
    RPAREN          reduce using rule 32 (expr -> DOUBLE .)
    RSBRACKET       reduce using rule 32 (expr -> DOUBLE .)
    COMMA           reduce using rule 32 (expr -> DOUBLE .)


state 33

    (11) small_stmt -> display .

    END_STATEMENT   reduce using rule 11 (small_stmt -> display .)


state 34

    (54) func_def -> FUNCTION head . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 64


state 35

    (55) head -> IDENTIFIER . LPAREN func_def_args RPAREN COLON
    (56) head -> IDENTIFIER . LPAREN RPAREN COLON
    (57) head -> IDENTIFIER . LPAREN func_def_args RPAREN RETURN T_INT COLON
    (58) head -> IDENTIFIER . LPAREN RPAREN RETURN T_INT COLON
    (59) head -> IDENTIFIER . LPAREN func_def_args RPAREN RETURN T_DOUBLE COLON
    (60) head -> IDENTIFIER . LPAREN RPAREN RETURN T_DOUBLE COLON
    (61) head -> IDENTIFIER . LPAREN func_def_args RPAREN RETURN T_BOOL COLON
    (62) head -> IDENTIFIER . LPAREN RPAREN RETURN T_BOOL COLON
    (63) head -> IDENTIFIER . LPAREN func_def_args RPAREN RETURN T_LIST_INT COLON
    (64) head -> IDENTIFIER . LPAREN RPAREN RETURN T_LIST_INT COLON
    (65) head -> IDENTIFIER . LPAREN func_def_args RPAREN RETURN T_LIST_DOUBLE COLON
    (66) head -> IDENTIFIER . LPAREN RPAREN RETURN T_LIST_DOUBLE COLON
    (67) head -> IDENTIFIER . LPAREN func_def_args RPAREN RETURN T_LIST_BOOL COLON
    (68) head -> IDENTIFIER . LPAREN RPAREN RETURN T_LIST_BOOL COLON

    LPAREN          shift and go to state 65


state 36

    (6) simple_stmt -> small_stmt END_STATEMENT .

    FUNCTION        reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    IF              reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    WHILE           reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    FOR             reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    IDENTIFIER      reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    LPAREN          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    INTEGER         reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    DOUBLE          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    SUB_OP          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    RETURN          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    DISPLAY         reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    BREAK           reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    CONTINUE        reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    TRUE            reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    FALSE           reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    DEDENT          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    END_STATEMENT   reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    $end            reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)


state 37

    (27) expr -> IDENTIFIER .
    (28) expr -> IDENTIFIER . LSBRACKET expr RSBRACKET
    (23) func_call -> IDENTIFIER . LPAREN list_args RPAREN
    (24) func_call -> IDENTIFIER . LPAREN RPAREN

    ADD_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    SUB_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    MUL_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    DIV_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    MOD_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    OR              reduce using rule 27 (expr -> IDENTIFIER .)
    AND             reduce using rule 27 (expr -> IDENTIFIER .)
    CEQ             reduce using rule 27 (expr -> IDENTIFIER .)
    CNE             reduce using rule 27 (expr -> IDENTIFIER .)
    CLT             reduce using rule 27 (expr -> IDENTIFIER .)
    CLE             reduce using rule 27 (expr -> IDENTIFIER .)
    CGT             reduce using rule 27 (expr -> IDENTIFIER .)
    CGE             reduce using rule 27 (expr -> IDENTIFIER .)
    END_STATEMENT   reduce using rule 27 (expr -> IDENTIFIER .)
    COLON           reduce using rule 27 (expr -> IDENTIFIER .)
    RPAREN          reduce using rule 27 (expr -> IDENTIFIER .)
    RSBRACKET       reduce using rule 27 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 27 (expr -> IDENTIFIER .)
    LSBRACKET       shift and go to state 66
    LPAREN          shift and go to state 44


state 38

    (79) while_stmt -> WHILE expr . COLON END_STATEMENT INDENT body DEDENT
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    COLON           shift and go to state 67
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 39

    (14) return_stmt -> RETURN expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 14 (return_stmt -> RETURN expr .)
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 40

    (80) for_stmt -> FOR IDENTIFIER . IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> FOR IDENTIFIER . IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT

    IN              shift and go to state 68


state 41

    (17) display -> DISPLAY LPAREN . expr RPAREN
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 69
    boolean                        shift and go to state 4

state 42

    (21) const_decl -> IDENTIFIER CONST . expr
    (22) const_decl -> IDENTIFIER CONST . LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    LSBRACKET       shift and go to state 70
    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 71
    boolean                        shift and go to state 4

state 43

    (20) assignment -> IDENTIFIER LSBRACKET . expr RSBRACKET ASSIGN expr
    (28) expr -> IDENTIFIER LSBRACKET . expr RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 72
    boolean                        shift and go to state 4

state 44

    (23) func_call -> IDENTIFIER LPAREN . list_args RPAREN
    (24) func_call -> IDENTIFIER LPAREN . RPAREN
    (25) list_args -> . expr
    (26) list_args -> . expr COMMA list_args
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    RPAREN          shift and go to state 74
    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 75
    boolean                        shift and go to state 4
    list_args                      shift and go to state 73

state 45

    (18) assignment -> IDENTIFIER ASSIGN . expr
    (19) assignment -> IDENTIFIER ASSIGN . LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    LSBRACKET       shift and go to state 76
    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 77
    boolean                        shift and go to state 4

state 46

    (3) program -> END_STATEMENT stmt . program
    (1) program -> . stmt
    (2) program -> . stmt program
    (3) program -> . END_STATEMENT stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (50) compound_stmt -> . func_def
    (51) compound_stmt -> . if_stmt
    (52) compound_stmt -> . while_stmt
    (53) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (54) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (82) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (79) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (80) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    END_STATEMENT   shift and go to state 15
    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    RETURN          shift and go to state 6
    DISPLAY         shift and go to state 11
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    boolean                        shift and go to state 4
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 19
    display                        shift and go to state 33
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 30
    program                        shift and go to state 78
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    expr                           shift and go to state 27
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 14

state 47

    (2) program -> stmt program .

    $end            reduce using rule 2 (program -> stmt program .)


state 48

    (29) expr -> LPAREN expr . RPAREN
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    RPAREN          shift and go to state 79
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 49

    (82) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    COLON           shift and go to state 80
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 50

    (42) expr -> expr AND . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 81
    boolean                        shift and go to state 4

state 51

    (46) expr -> expr CLE . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 82
    boolean                        shift and go to state 4

state 52

    (38) expr -> expr MUL_OP . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 83
    boolean                        shift and go to state 4

state 53

    (47) expr -> expr CGT . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 84
    boolean                        shift and go to state 4

state 54

    (48) expr -> expr CGE . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 85
    boolean                        shift and go to state 4

state 55

    (37) expr -> expr SUB_OP . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 86
    boolean                        shift and go to state 4

state 56

    (39) expr -> expr DIV_OP . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 87
    boolean                        shift and go to state 4

state 57

    (44) expr -> expr CNE . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 88
    boolean                        shift and go to state 4

state 58

    (43) expr -> expr CEQ . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 89
    boolean                        shift and go to state 4

state 59

    (36) expr -> expr ADD_OP . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 90
    boolean                        shift and go to state 4

state 60

    (45) expr -> expr CLT . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 91
    boolean                        shift and go to state 4

state 61

    (40) expr -> expr MOD_OP . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 92
    boolean                        shift and go to state 4

state 62

    (41) expr -> expr OR . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 93
    boolean                        shift and go to state 4

state 63

    (49) expr -> SUB_OP expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    ADD_OP          reduce using rule 49 (expr -> SUB_OP expr .)
    SUB_OP          reduce using rule 49 (expr -> SUB_OP expr .)
    MUL_OP          reduce using rule 49 (expr -> SUB_OP expr .)
    DIV_OP          reduce using rule 49 (expr -> SUB_OP expr .)
    MOD_OP          reduce using rule 49 (expr -> SUB_OP expr .)
    OR              reduce using rule 49 (expr -> SUB_OP expr .)
    AND             reduce using rule 49 (expr -> SUB_OP expr .)
    CEQ             reduce using rule 49 (expr -> SUB_OP expr .)
    CNE             reduce using rule 49 (expr -> SUB_OP expr .)
    CLT             reduce using rule 49 (expr -> SUB_OP expr .)
    CLE             reduce using rule 49 (expr -> SUB_OP expr .)
    CGT             reduce using rule 49 (expr -> SUB_OP expr .)
    CGE             reduce using rule 49 (expr -> SUB_OP expr .)
    END_STATEMENT   reduce using rule 49 (expr -> SUB_OP expr .)
    COLON           reduce using rule 49 (expr -> SUB_OP expr .)
    RPAREN          reduce using rule 49 (expr -> SUB_OP expr .)
    RSBRACKET       reduce using rule 49 (expr -> SUB_OP expr .)
    COMMA           reduce using rule 49 (expr -> SUB_OP expr .)

  ! ADD_OP          [ shift and go to state 59 ]
  ! SUB_OP          [ shift and go to state 55 ]
  ! MUL_OP          [ shift and go to state 52 ]
  ! DIV_OP          [ shift and go to state 56 ]
  ! MOD_OP          [ shift and go to state 61 ]
  ! OR              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 50 ]
  ! CEQ             [ shift and go to state 58 ]
  ! CNE             [ shift and go to state 57 ]
  ! CLT             [ shift and go to state 60 ]
  ! CLE             [ shift and go to state 51 ]
  ! CGT             [ shift and go to state 53 ]
  ! CGE             [ shift and go to state 54 ]


state 64

    (54) func_def -> FUNCTION head END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 94


state 65

    (55) head -> IDENTIFIER LPAREN . func_def_args RPAREN COLON
    (56) head -> IDENTIFIER LPAREN . RPAREN COLON
    (57) head -> IDENTIFIER LPAREN . func_def_args RPAREN RETURN T_INT COLON
    (58) head -> IDENTIFIER LPAREN . RPAREN RETURN T_INT COLON
    (59) head -> IDENTIFIER LPAREN . func_def_args RPAREN RETURN T_DOUBLE COLON
    (60) head -> IDENTIFIER LPAREN . RPAREN RETURN T_DOUBLE COLON
    (61) head -> IDENTIFIER LPAREN . func_def_args RPAREN RETURN T_BOOL COLON
    (62) head -> IDENTIFIER LPAREN . RPAREN RETURN T_BOOL COLON
    (63) head -> IDENTIFIER LPAREN . func_def_args RPAREN RETURN T_LIST_INT COLON
    (64) head -> IDENTIFIER LPAREN . RPAREN RETURN T_LIST_INT COLON
    (65) head -> IDENTIFIER LPAREN . func_def_args RPAREN RETURN T_LIST_DOUBLE COLON
    (66) head -> IDENTIFIER LPAREN . RPAREN RETURN T_LIST_DOUBLE COLON
    (67) head -> IDENTIFIER LPAREN . func_def_args RPAREN RETURN T_LIST_BOOL COLON
    (68) head -> IDENTIFIER LPAREN . RPAREN RETURN T_LIST_BOOL COLON
    (69) func_def_args -> . argument
    (70) func_def_args -> . argument COMMA func_def_args
    (71) argument -> . T_INT IDENTIFIER
    (72) argument -> . T_DOUBLE IDENTIFIER
    (73) argument -> . T_BOOL IDENTIFIER
    (74) argument -> . T_LIST_INT IDENTIFIER
    (75) argument -> . T_LIST_DOUBLE IDENTIFIER
    (76) argument -> . T_LIST_BOOL IDENTIFIER

    RPAREN          shift and go to state 96
    T_INT           shift and go to state 102
    T_DOUBLE        shift and go to state 99
    T_BOOL          shift and go to state 97
    T_LIST_INT      shift and go to state 101
    T_LIST_DOUBLE   shift and go to state 103
    T_LIST_BOOL     shift and go to state 100

    func_def_args                  shift and go to state 95
    argument                       shift and go to state 98

state 66

    (28) expr -> IDENTIFIER LSBRACKET . expr RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 104
    boolean                        shift and go to state 4

state 67

    (79) while_stmt -> WHILE expr COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 105


state 68

    (80) for_stmt -> FOR IDENTIFIER IN . RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> FOR IDENTIFIER IN . IDENTIFIER COLON END_STATEMENT INDENT body DEDENT

    RANGE           shift and go to state 106
    IDENTIFIER      shift and go to state 107


state 69

    (17) display -> DISPLAY LPAREN expr . RPAREN
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    RPAREN          shift and go to state 108
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 70

    (22) const_decl -> IDENTIFIER CONST LSBRACKET . list_args RSBRACKET
    (25) list_args -> . expr
    (26) list_args -> . expr COMMA list_args
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 75
    boolean                        shift and go to state 4
    list_args                      shift and go to state 109

state 71

    (21) const_decl -> IDENTIFIER CONST expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 21 (const_decl -> IDENTIFIER CONST expr .)
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 72

    (20) assignment -> IDENTIFIER LSBRACKET expr . RSBRACKET ASSIGN expr
    (28) expr -> IDENTIFIER LSBRACKET expr . RSBRACKET
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    RSBRACKET       shift and go to state 110
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 73

    (23) func_call -> IDENTIFIER LPAREN list_args . RPAREN

    RPAREN          shift and go to state 111


state 74

    (24) func_call -> IDENTIFIER LPAREN RPAREN .

    COLON           reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    ADD_OP          reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    SUB_OP          reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    MUL_OP          reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    DIV_OP          reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    MOD_OP          reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    OR              reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    AND             reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CEQ             reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CNE             reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CLT             reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CLE             reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CGT             reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CGE             reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    END_STATEMENT   reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    RSBRACKET       reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    COMMA           reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)


state 75

    (25) list_args -> expr .
    (26) list_args -> expr . COMMA list_args
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    RPAREN          reduce using rule 25 (list_args -> expr .)
    RSBRACKET       reduce using rule 25 (list_args -> expr .)
    COMMA           shift and go to state 112
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 76

    (19) assignment -> IDENTIFIER ASSIGN LSBRACKET . list_args RSBRACKET
    (25) list_args -> . expr
    (26) list_args -> . expr COMMA list_args
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 75
    boolean                        shift and go to state 4
    list_args                      shift and go to state 113

state 77

    (18) assignment -> IDENTIFIER ASSIGN expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 18 (assignment -> IDENTIFIER ASSIGN expr .)
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 78

    (3) program -> END_STATEMENT stmt program .

    $end            reduce using rule 3 (program -> END_STATEMENT stmt program .)


state 79

    (29) expr -> LPAREN expr RPAREN .

    ADD_OP          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    SUB_OP          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    MUL_OP          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    DIV_OP          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    MOD_OP          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    CEQ             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    CNE             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    CLT             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    CLE             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    CGT             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    CGE             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    END_STATEMENT   reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    RSBRACKET       reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 29 (expr -> LPAREN expr RPAREN .)


state 80

    (82) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 114


state 81

    (42) expr -> expr AND expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    OR              reduce using rule 42 (expr -> expr AND expr .)
    AND             reduce using rule 42 (expr -> expr AND expr .)
    END_STATEMENT   reduce using rule 42 (expr -> expr AND expr .)
    COLON           reduce using rule 42 (expr -> expr AND expr .)
    RPAREN          reduce using rule 42 (expr -> expr AND expr .)
    RSBRACKET       reduce using rule 42 (expr -> expr AND expr .)
    COMMA           reduce using rule 42 (expr -> expr AND expr .)
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54

  ! ADD_OP          [ reduce using rule 42 (expr -> expr AND expr .) ]
  ! SUB_OP          [ reduce using rule 42 (expr -> expr AND expr .) ]
  ! MUL_OP          [ reduce using rule 42 (expr -> expr AND expr .) ]
  ! DIV_OP          [ reduce using rule 42 (expr -> expr AND expr .) ]
  ! MOD_OP          [ reduce using rule 42 (expr -> expr AND expr .) ]
  ! CEQ             [ reduce using rule 42 (expr -> expr AND expr .) ]
  ! CNE             [ reduce using rule 42 (expr -> expr AND expr .) ]
  ! CLT             [ reduce using rule 42 (expr -> expr AND expr .) ]
  ! CLE             [ reduce using rule 42 (expr -> expr AND expr .) ]
  ! CGT             [ reduce using rule 42 (expr -> expr AND expr .) ]
  ! CGE             [ reduce using rule 42 (expr -> expr AND expr .) ]
  ! OR              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 50 ]


state 82

    (46) expr -> expr CLE expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    OR              reduce using rule 46 (expr -> expr CLE expr .)
    AND             reduce using rule 46 (expr -> expr CLE expr .)
    CEQ             reduce using rule 46 (expr -> expr CLE expr .)
    CNE             reduce using rule 46 (expr -> expr CLE expr .)
    CLT             reduce using rule 46 (expr -> expr CLE expr .)
    CLE             reduce using rule 46 (expr -> expr CLE expr .)
    CGT             reduce using rule 46 (expr -> expr CLE expr .)
    CGE             reduce using rule 46 (expr -> expr CLE expr .)
    END_STATEMENT   reduce using rule 46 (expr -> expr CLE expr .)
    COLON           reduce using rule 46 (expr -> expr CLE expr .)
    RPAREN          reduce using rule 46 (expr -> expr CLE expr .)
    RSBRACKET       reduce using rule 46 (expr -> expr CLE expr .)
    COMMA           reduce using rule 46 (expr -> expr CLE expr .)
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61

  ! ADD_OP          [ reduce using rule 46 (expr -> expr CLE expr .) ]
  ! SUB_OP          [ reduce using rule 46 (expr -> expr CLE expr .) ]
  ! MUL_OP          [ reduce using rule 46 (expr -> expr CLE expr .) ]
  ! DIV_OP          [ reduce using rule 46 (expr -> expr CLE expr .) ]
  ! MOD_OP          [ reduce using rule 46 (expr -> expr CLE expr .) ]
  ! OR              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 50 ]
  ! CEQ             [ shift and go to state 58 ]
  ! CNE             [ shift and go to state 57 ]
  ! CLT             [ shift and go to state 60 ]
  ! CLE             [ shift and go to state 51 ]
  ! CGT             [ shift and go to state 53 ]
  ! CGE             [ shift and go to state 54 ]


state 83

    (38) expr -> expr MUL_OP expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    ADD_OP          reduce using rule 38 (expr -> expr MUL_OP expr .)
    SUB_OP          reduce using rule 38 (expr -> expr MUL_OP expr .)
    MUL_OP          reduce using rule 38 (expr -> expr MUL_OP expr .)
    DIV_OP          reduce using rule 38 (expr -> expr MUL_OP expr .)
    MOD_OP          reduce using rule 38 (expr -> expr MUL_OP expr .)
    OR              reduce using rule 38 (expr -> expr MUL_OP expr .)
    AND             reduce using rule 38 (expr -> expr MUL_OP expr .)
    CEQ             reduce using rule 38 (expr -> expr MUL_OP expr .)
    CNE             reduce using rule 38 (expr -> expr MUL_OP expr .)
    CLT             reduce using rule 38 (expr -> expr MUL_OP expr .)
    CLE             reduce using rule 38 (expr -> expr MUL_OP expr .)
    CGT             reduce using rule 38 (expr -> expr MUL_OP expr .)
    CGE             reduce using rule 38 (expr -> expr MUL_OP expr .)
    END_STATEMENT   reduce using rule 38 (expr -> expr MUL_OP expr .)
    COLON           reduce using rule 38 (expr -> expr MUL_OP expr .)
    RPAREN          reduce using rule 38 (expr -> expr MUL_OP expr .)
    RSBRACKET       reduce using rule 38 (expr -> expr MUL_OP expr .)
    COMMA           reduce using rule 38 (expr -> expr MUL_OP expr .)

  ! ADD_OP          [ shift and go to state 59 ]
  ! SUB_OP          [ shift and go to state 55 ]
  ! MUL_OP          [ shift and go to state 52 ]
  ! DIV_OP          [ shift and go to state 56 ]
  ! MOD_OP          [ shift and go to state 61 ]
  ! OR              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 50 ]
  ! CEQ             [ shift and go to state 58 ]
  ! CNE             [ shift and go to state 57 ]
  ! CLT             [ shift and go to state 60 ]
  ! CLE             [ shift and go to state 51 ]
  ! CGT             [ shift and go to state 53 ]
  ! CGE             [ shift and go to state 54 ]


state 84

    (47) expr -> expr CGT expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    OR              reduce using rule 47 (expr -> expr CGT expr .)
    AND             reduce using rule 47 (expr -> expr CGT expr .)
    CEQ             reduce using rule 47 (expr -> expr CGT expr .)
    CNE             reduce using rule 47 (expr -> expr CGT expr .)
    CLT             reduce using rule 47 (expr -> expr CGT expr .)
    CLE             reduce using rule 47 (expr -> expr CGT expr .)
    CGT             reduce using rule 47 (expr -> expr CGT expr .)
    CGE             reduce using rule 47 (expr -> expr CGT expr .)
    END_STATEMENT   reduce using rule 47 (expr -> expr CGT expr .)
    COLON           reduce using rule 47 (expr -> expr CGT expr .)
    RPAREN          reduce using rule 47 (expr -> expr CGT expr .)
    RSBRACKET       reduce using rule 47 (expr -> expr CGT expr .)
    COMMA           reduce using rule 47 (expr -> expr CGT expr .)
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61

  ! ADD_OP          [ reduce using rule 47 (expr -> expr CGT expr .) ]
  ! SUB_OP          [ reduce using rule 47 (expr -> expr CGT expr .) ]
  ! MUL_OP          [ reduce using rule 47 (expr -> expr CGT expr .) ]
  ! DIV_OP          [ reduce using rule 47 (expr -> expr CGT expr .) ]
  ! MOD_OP          [ reduce using rule 47 (expr -> expr CGT expr .) ]
  ! OR              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 50 ]
  ! CEQ             [ shift and go to state 58 ]
  ! CNE             [ shift and go to state 57 ]
  ! CLT             [ shift and go to state 60 ]
  ! CLE             [ shift and go to state 51 ]
  ! CGT             [ shift and go to state 53 ]
  ! CGE             [ shift and go to state 54 ]


state 85

    (48) expr -> expr CGE expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    OR              reduce using rule 48 (expr -> expr CGE expr .)
    AND             reduce using rule 48 (expr -> expr CGE expr .)
    CEQ             reduce using rule 48 (expr -> expr CGE expr .)
    CNE             reduce using rule 48 (expr -> expr CGE expr .)
    CLT             reduce using rule 48 (expr -> expr CGE expr .)
    CLE             reduce using rule 48 (expr -> expr CGE expr .)
    CGT             reduce using rule 48 (expr -> expr CGE expr .)
    CGE             reduce using rule 48 (expr -> expr CGE expr .)
    END_STATEMENT   reduce using rule 48 (expr -> expr CGE expr .)
    COLON           reduce using rule 48 (expr -> expr CGE expr .)
    RPAREN          reduce using rule 48 (expr -> expr CGE expr .)
    RSBRACKET       reduce using rule 48 (expr -> expr CGE expr .)
    COMMA           reduce using rule 48 (expr -> expr CGE expr .)
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61

  ! ADD_OP          [ reduce using rule 48 (expr -> expr CGE expr .) ]
  ! SUB_OP          [ reduce using rule 48 (expr -> expr CGE expr .) ]
  ! MUL_OP          [ reduce using rule 48 (expr -> expr CGE expr .) ]
  ! DIV_OP          [ reduce using rule 48 (expr -> expr CGE expr .) ]
  ! MOD_OP          [ reduce using rule 48 (expr -> expr CGE expr .) ]
  ! OR              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 50 ]
  ! CEQ             [ shift and go to state 58 ]
  ! CNE             [ shift and go to state 57 ]
  ! CLT             [ shift and go to state 60 ]
  ! CLE             [ shift and go to state 51 ]
  ! CGT             [ shift and go to state 53 ]
  ! CGE             [ shift and go to state 54 ]


state 86

    (37) expr -> expr SUB_OP expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    ADD_OP          reduce using rule 37 (expr -> expr SUB_OP expr .)
    SUB_OP          reduce using rule 37 (expr -> expr SUB_OP expr .)
    OR              reduce using rule 37 (expr -> expr SUB_OP expr .)
    AND             reduce using rule 37 (expr -> expr SUB_OP expr .)
    CEQ             reduce using rule 37 (expr -> expr SUB_OP expr .)
    CNE             reduce using rule 37 (expr -> expr SUB_OP expr .)
    CLT             reduce using rule 37 (expr -> expr SUB_OP expr .)
    CLE             reduce using rule 37 (expr -> expr SUB_OP expr .)
    CGT             reduce using rule 37 (expr -> expr SUB_OP expr .)
    CGE             reduce using rule 37 (expr -> expr SUB_OP expr .)
    END_STATEMENT   reduce using rule 37 (expr -> expr SUB_OP expr .)
    COLON           reduce using rule 37 (expr -> expr SUB_OP expr .)
    RPAREN          reduce using rule 37 (expr -> expr SUB_OP expr .)
    RSBRACKET       reduce using rule 37 (expr -> expr SUB_OP expr .)
    COMMA           reduce using rule 37 (expr -> expr SUB_OP expr .)
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61

  ! MUL_OP          [ reduce using rule 37 (expr -> expr SUB_OP expr .) ]
  ! DIV_OP          [ reduce using rule 37 (expr -> expr SUB_OP expr .) ]
  ! MOD_OP          [ reduce using rule 37 (expr -> expr SUB_OP expr .) ]
  ! ADD_OP          [ shift and go to state 59 ]
  ! SUB_OP          [ shift and go to state 55 ]
  ! OR              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 50 ]
  ! CEQ             [ shift and go to state 58 ]
  ! CNE             [ shift and go to state 57 ]
  ! CLT             [ shift and go to state 60 ]
  ! CLE             [ shift and go to state 51 ]
  ! CGT             [ shift and go to state 53 ]
  ! CGE             [ shift and go to state 54 ]


state 87

    (39) expr -> expr DIV_OP expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    ADD_OP          reduce using rule 39 (expr -> expr DIV_OP expr .)
    SUB_OP          reduce using rule 39 (expr -> expr DIV_OP expr .)
    MUL_OP          reduce using rule 39 (expr -> expr DIV_OP expr .)
    DIV_OP          reduce using rule 39 (expr -> expr DIV_OP expr .)
    MOD_OP          reduce using rule 39 (expr -> expr DIV_OP expr .)
    OR              reduce using rule 39 (expr -> expr DIV_OP expr .)
    AND             reduce using rule 39 (expr -> expr DIV_OP expr .)
    CEQ             reduce using rule 39 (expr -> expr DIV_OP expr .)
    CNE             reduce using rule 39 (expr -> expr DIV_OP expr .)
    CLT             reduce using rule 39 (expr -> expr DIV_OP expr .)
    CLE             reduce using rule 39 (expr -> expr DIV_OP expr .)
    CGT             reduce using rule 39 (expr -> expr DIV_OP expr .)
    CGE             reduce using rule 39 (expr -> expr DIV_OP expr .)
    END_STATEMENT   reduce using rule 39 (expr -> expr DIV_OP expr .)
    COLON           reduce using rule 39 (expr -> expr DIV_OP expr .)
    RPAREN          reduce using rule 39 (expr -> expr DIV_OP expr .)
    RSBRACKET       reduce using rule 39 (expr -> expr DIV_OP expr .)
    COMMA           reduce using rule 39 (expr -> expr DIV_OP expr .)

  ! ADD_OP          [ shift and go to state 59 ]
  ! SUB_OP          [ shift and go to state 55 ]
  ! MUL_OP          [ shift and go to state 52 ]
  ! DIV_OP          [ shift and go to state 56 ]
  ! MOD_OP          [ shift and go to state 61 ]
  ! OR              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 50 ]
  ! CEQ             [ shift and go to state 58 ]
  ! CNE             [ shift and go to state 57 ]
  ! CLT             [ shift and go to state 60 ]
  ! CLE             [ shift and go to state 51 ]
  ! CGT             [ shift and go to state 53 ]
  ! CGE             [ shift and go to state 54 ]


state 88

    (44) expr -> expr CNE expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    OR              reduce using rule 44 (expr -> expr CNE expr .)
    AND             reduce using rule 44 (expr -> expr CNE expr .)
    CEQ             reduce using rule 44 (expr -> expr CNE expr .)
    CNE             reduce using rule 44 (expr -> expr CNE expr .)
    CLT             reduce using rule 44 (expr -> expr CNE expr .)
    CLE             reduce using rule 44 (expr -> expr CNE expr .)
    CGT             reduce using rule 44 (expr -> expr CNE expr .)
    CGE             reduce using rule 44 (expr -> expr CNE expr .)
    END_STATEMENT   reduce using rule 44 (expr -> expr CNE expr .)
    COLON           reduce using rule 44 (expr -> expr CNE expr .)
    RPAREN          reduce using rule 44 (expr -> expr CNE expr .)
    RSBRACKET       reduce using rule 44 (expr -> expr CNE expr .)
    COMMA           reduce using rule 44 (expr -> expr CNE expr .)
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61

  ! ADD_OP          [ reduce using rule 44 (expr -> expr CNE expr .) ]
  ! SUB_OP          [ reduce using rule 44 (expr -> expr CNE expr .) ]
  ! MUL_OP          [ reduce using rule 44 (expr -> expr CNE expr .) ]
  ! DIV_OP          [ reduce using rule 44 (expr -> expr CNE expr .) ]
  ! MOD_OP          [ reduce using rule 44 (expr -> expr CNE expr .) ]
  ! OR              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 50 ]
  ! CEQ             [ shift and go to state 58 ]
  ! CNE             [ shift and go to state 57 ]
  ! CLT             [ shift and go to state 60 ]
  ! CLE             [ shift and go to state 51 ]
  ! CGT             [ shift and go to state 53 ]
  ! CGE             [ shift and go to state 54 ]


state 89

    (43) expr -> expr CEQ expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    OR              reduce using rule 43 (expr -> expr CEQ expr .)
    AND             reduce using rule 43 (expr -> expr CEQ expr .)
    CEQ             reduce using rule 43 (expr -> expr CEQ expr .)
    CNE             reduce using rule 43 (expr -> expr CEQ expr .)
    CLT             reduce using rule 43 (expr -> expr CEQ expr .)
    CLE             reduce using rule 43 (expr -> expr CEQ expr .)
    CGT             reduce using rule 43 (expr -> expr CEQ expr .)
    CGE             reduce using rule 43 (expr -> expr CEQ expr .)
    END_STATEMENT   reduce using rule 43 (expr -> expr CEQ expr .)
    COLON           reduce using rule 43 (expr -> expr CEQ expr .)
    RPAREN          reduce using rule 43 (expr -> expr CEQ expr .)
    RSBRACKET       reduce using rule 43 (expr -> expr CEQ expr .)
    COMMA           reduce using rule 43 (expr -> expr CEQ expr .)
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61

  ! ADD_OP          [ reduce using rule 43 (expr -> expr CEQ expr .) ]
  ! SUB_OP          [ reduce using rule 43 (expr -> expr CEQ expr .) ]
  ! MUL_OP          [ reduce using rule 43 (expr -> expr CEQ expr .) ]
  ! DIV_OP          [ reduce using rule 43 (expr -> expr CEQ expr .) ]
  ! MOD_OP          [ reduce using rule 43 (expr -> expr CEQ expr .) ]
  ! OR              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 50 ]
  ! CEQ             [ shift and go to state 58 ]
  ! CNE             [ shift and go to state 57 ]
  ! CLT             [ shift and go to state 60 ]
  ! CLE             [ shift and go to state 51 ]
  ! CGT             [ shift and go to state 53 ]
  ! CGE             [ shift and go to state 54 ]


state 90

    (36) expr -> expr ADD_OP expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    ADD_OP          reduce using rule 36 (expr -> expr ADD_OP expr .)
    SUB_OP          reduce using rule 36 (expr -> expr ADD_OP expr .)
    OR              reduce using rule 36 (expr -> expr ADD_OP expr .)
    AND             reduce using rule 36 (expr -> expr ADD_OP expr .)
    CEQ             reduce using rule 36 (expr -> expr ADD_OP expr .)
    CNE             reduce using rule 36 (expr -> expr ADD_OP expr .)
    CLT             reduce using rule 36 (expr -> expr ADD_OP expr .)
    CLE             reduce using rule 36 (expr -> expr ADD_OP expr .)
    CGT             reduce using rule 36 (expr -> expr ADD_OP expr .)
    CGE             reduce using rule 36 (expr -> expr ADD_OP expr .)
    END_STATEMENT   reduce using rule 36 (expr -> expr ADD_OP expr .)
    COLON           reduce using rule 36 (expr -> expr ADD_OP expr .)
    RPAREN          reduce using rule 36 (expr -> expr ADD_OP expr .)
    RSBRACKET       reduce using rule 36 (expr -> expr ADD_OP expr .)
    COMMA           reduce using rule 36 (expr -> expr ADD_OP expr .)
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61

  ! MUL_OP          [ reduce using rule 36 (expr -> expr ADD_OP expr .) ]
  ! DIV_OP          [ reduce using rule 36 (expr -> expr ADD_OP expr .) ]
  ! MOD_OP          [ reduce using rule 36 (expr -> expr ADD_OP expr .) ]
  ! ADD_OP          [ shift and go to state 59 ]
  ! SUB_OP          [ shift and go to state 55 ]
  ! OR              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 50 ]
  ! CEQ             [ shift and go to state 58 ]
  ! CNE             [ shift and go to state 57 ]
  ! CLT             [ shift and go to state 60 ]
  ! CLE             [ shift and go to state 51 ]
  ! CGT             [ shift and go to state 53 ]
  ! CGE             [ shift and go to state 54 ]


state 91

    (45) expr -> expr CLT expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    OR              reduce using rule 45 (expr -> expr CLT expr .)
    AND             reduce using rule 45 (expr -> expr CLT expr .)
    CEQ             reduce using rule 45 (expr -> expr CLT expr .)
    CNE             reduce using rule 45 (expr -> expr CLT expr .)
    CLT             reduce using rule 45 (expr -> expr CLT expr .)
    CLE             reduce using rule 45 (expr -> expr CLT expr .)
    CGT             reduce using rule 45 (expr -> expr CLT expr .)
    CGE             reduce using rule 45 (expr -> expr CLT expr .)
    END_STATEMENT   reduce using rule 45 (expr -> expr CLT expr .)
    COLON           reduce using rule 45 (expr -> expr CLT expr .)
    RPAREN          reduce using rule 45 (expr -> expr CLT expr .)
    RSBRACKET       reduce using rule 45 (expr -> expr CLT expr .)
    COMMA           reduce using rule 45 (expr -> expr CLT expr .)
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61

  ! ADD_OP          [ reduce using rule 45 (expr -> expr CLT expr .) ]
  ! SUB_OP          [ reduce using rule 45 (expr -> expr CLT expr .) ]
  ! MUL_OP          [ reduce using rule 45 (expr -> expr CLT expr .) ]
  ! DIV_OP          [ reduce using rule 45 (expr -> expr CLT expr .) ]
  ! MOD_OP          [ reduce using rule 45 (expr -> expr CLT expr .) ]
  ! OR              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 50 ]
  ! CEQ             [ shift and go to state 58 ]
  ! CNE             [ shift and go to state 57 ]
  ! CLT             [ shift and go to state 60 ]
  ! CLE             [ shift and go to state 51 ]
  ! CGT             [ shift and go to state 53 ]
  ! CGE             [ shift and go to state 54 ]


state 92

    (40) expr -> expr MOD_OP expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    ADD_OP          reduce using rule 40 (expr -> expr MOD_OP expr .)
    SUB_OP          reduce using rule 40 (expr -> expr MOD_OP expr .)
    MUL_OP          reduce using rule 40 (expr -> expr MOD_OP expr .)
    DIV_OP          reduce using rule 40 (expr -> expr MOD_OP expr .)
    MOD_OP          reduce using rule 40 (expr -> expr MOD_OP expr .)
    OR              reduce using rule 40 (expr -> expr MOD_OP expr .)
    AND             reduce using rule 40 (expr -> expr MOD_OP expr .)
    CEQ             reduce using rule 40 (expr -> expr MOD_OP expr .)
    CNE             reduce using rule 40 (expr -> expr MOD_OP expr .)
    CLT             reduce using rule 40 (expr -> expr MOD_OP expr .)
    CLE             reduce using rule 40 (expr -> expr MOD_OP expr .)
    CGT             reduce using rule 40 (expr -> expr MOD_OP expr .)
    CGE             reduce using rule 40 (expr -> expr MOD_OP expr .)
    END_STATEMENT   reduce using rule 40 (expr -> expr MOD_OP expr .)
    COLON           reduce using rule 40 (expr -> expr MOD_OP expr .)
    RPAREN          reduce using rule 40 (expr -> expr MOD_OP expr .)
    RSBRACKET       reduce using rule 40 (expr -> expr MOD_OP expr .)
    COMMA           reduce using rule 40 (expr -> expr MOD_OP expr .)

  ! ADD_OP          [ shift and go to state 59 ]
  ! SUB_OP          [ shift and go to state 55 ]
  ! MUL_OP          [ shift and go to state 52 ]
  ! DIV_OP          [ shift and go to state 56 ]
  ! MOD_OP          [ shift and go to state 61 ]
  ! OR              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 50 ]
  ! CEQ             [ shift and go to state 58 ]
  ! CNE             [ shift and go to state 57 ]
  ! CLT             [ shift and go to state 60 ]
  ! CLE             [ shift and go to state 51 ]
  ! CGT             [ shift and go to state 53 ]
  ! CGE             [ shift and go to state 54 ]


state 93

    (41) expr -> expr OR expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    OR              reduce using rule 41 (expr -> expr OR expr .)
    AND             reduce using rule 41 (expr -> expr OR expr .)
    END_STATEMENT   reduce using rule 41 (expr -> expr OR expr .)
    COLON           reduce using rule 41 (expr -> expr OR expr .)
    RPAREN          reduce using rule 41 (expr -> expr OR expr .)
    RSBRACKET       reduce using rule 41 (expr -> expr OR expr .)
    COMMA           reduce using rule 41 (expr -> expr OR expr .)
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54

  ! ADD_OP          [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! SUB_OP          [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! MUL_OP          [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! DIV_OP          [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! MOD_OP          [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! CEQ             [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! CNE             [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! CLT             [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! CLE             [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! CGT             [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! CGE             [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 50 ]


state 94

    (54) func_def -> FUNCTION head END_STATEMENT INDENT . body DEDENT
    (77) body -> . stmt
    (78) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (50) compound_stmt -> . func_def
    (51) compound_stmt -> . if_stmt
    (52) compound_stmt -> . while_stmt
    (53) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (54) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (82) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (79) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (80) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    RETURN          shift and go to state 6
    DISPLAY         shift and go to state 11
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 115
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 116
    display                        shift and go to state 33
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 30
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    expr                           shift and go to state 27
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 14

state 95

    (55) head -> IDENTIFIER LPAREN func_def_args . RPAREN COLON
    (57) head -> IDENTIFIER LPAREN func_def_args . RPAREN RETURN T_INT COLON
    (59) head -> IDENTIFIER LPAREN func_def_args . RPAREN RETURN T_DOUBLE COLON
    (61) head -> IDENTIFIER LPAREN func_def_args . RPAREN RETURN T_BOOL COLON
    (63) head -> IDENTIFIER LPAREN func_def_args . RPAREN RETURN T_LIST_INT COLON
    (65) head -> IDENTIFIER LPAREN func_def_args . RPAREN RETURN T_LIST_DOUBLE COLON
    (67) head -> IDENTIFIER LPAREN func_def_args . RPAREN RETURN T_LIST_BOOL COLON

    RPAREN          shift and go to state 117


state 96

    (56) head -> IDENTIFIER LPAREN RPAREN . COLON
    (58) head -> IDENTIFIER LPAREN RPAREN . RETURN T_INT COLON
    (60) head -> IDENTIFIER LPAREN RPAREN . RETURN T_DOUBLE COLON
    (62) head -> IDENTIFIER LPAREN RPAREN . RETURN T_BOOL COLON
    (64) head -> IDENTIFIER LPAREN RPAREN . RETURN T_LIST_INT COLON
    (66) head -> IDENTIFIER LPAREN RPAREN . RETURN T_LIST_DOUBLE COLON
    (68) head -> IDENTIFIER LPAREN RPAREN . RETURN T_LIST_BOOL COLON

    COLON           shift and go to state 119
    RETURN          shift and go to state 118


state 97

    (73) argument -> T_BOOL . IDENTIFIER

    IDENTIFIER      shift and go to state 120


state 98

    (69) func_def_args -> argument .
    (70) func_def_args -> argument . COMMA func_def_args

    RPAREN          reduce using rule 69 (func_def_args -> argument .)
    COMMA           shift and go to state 121


state 99

    (72) argument -> T_DOUBLE . IDENTIFIER

    IDENTIFIER      shift and go to state 122


state 100

    (76) argument -> T_LIST_BOOL . IDENTIFIER

    IDENTIFIER      shift and go to state 123


state 101

    (74) argument -> T_LIST_INT . IDENTIFIER

    IDENTIFIER      shift and go to state 124


state 102

    (71) argument -> T_INT . IDENTIFIER

    IDENTIFIER      shift and go to state 125


state 103

    (75) argument -> T_LIST_DOUBLE . IDENTIFIER

    IDENTIFIER      shift and go to state 126


state 104

    (28) expr -> IDENTIFIER LSBRACKET expr . RSBRACKET
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    RSBRACKET       shift and go to state 127
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 105

    (79) while_stmt -> WHILE expr COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 128


state 106

    (80) for_stmt -> FOR IDENTIFIER IN RANGE . LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT

    LPAREN          shift and go to state 129


state 107

    (81) for_stmt -> FOR IDENTIFIER IN IDENTIFIER . COLON END_STATEMENT INDENT body DEDENT

    COLON           shift and go to state 130


state 108

    (17) display -> DISPLAY LPAREN expr RPAREN .

    END_STATEMENT   reduce using rule 17 (display -> DISPLAY LPAREN expr RPAREN .)


state 109

    (22) const_decl -> IDENTIFIER CONST LSBRACKET list_args . RSBRACKET

    RSBRACKET       shift and go to state 131


state 110

    (20) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET . ASSIGN expr
    (28) expr -> IDENTIFIER LSBRACKET expr RSBRACKET .

    ASSIGN          shift and go to state 132
    ADD_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    SUB_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MUL_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    DIV_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MOD_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    OR              reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    AND             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CEQ             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CNE             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLT             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLE             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGT             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGE             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    END_STATEMENT   reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)


state 111

    (23) func_call -> IDENTIFIER LPAREN list_args RPAREN .

    COLON           reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    ADD_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    SUB_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    MUL_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    DIV_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    MOD_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    OR              reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    AND             reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CEQ             reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CNE             reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CLT             reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CLE             reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CGT             reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CGE             reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    END_STATEMENT   reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    RPAREN          reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    RSBRACKET       reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    COMMA           reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)


state 112

    (26) list_args -> expr COMMA . list_args
    (25) list_args -> . expr
    (26) list_args -> . expr COMMA list_args
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 75
    boolean                        shift and go to state 4
    list_args                      shift and go to state 133

state 113

    (19) assignment -> IDENTIFIER ASSIGN LSBRACKET list_args . RSBRACKET

    RSBRACKET       shift and go to state 134


state 114

    (82) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT
    (83) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT elseif_list
    (84) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    INDENT          shift and go to state 135


state 115

    (54) func_def -> FUNCTION head END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 136


state 116

    (77) body -> stmt .
    (78) body -> stmt . body
    (77) body -> . stmt
    (78) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (50) compound_stmt -> . func_def
    (51) compound_stmt -> . if_stmt
    (52) compound_stmt -> . while_stmt
    (53) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (54) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (82) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (79) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (80) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    DEDENT          reduce using rule 77 (body -> stmt .)
    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    RETURN          shift and go to state 6
    DISPLAY         shift and go to state 11
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 137
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 116
    display                        shift and go to state 33
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 30
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    expr                           shift and go to state 27
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 14

state 117

    (55) head -> IDENTIFIER LPAREN func_def_args RPAREN . COLON
    (57) head -> IDENTIFIER LPAREN func_def_args RPAREN . RETURN T_INT COLON
    (59) head -> IDENTIFIER LPAREN func_def_args RPAREN . RETURN T_DOUBLE COLON
    (61) head -> IDENTIFIER LPAREN func_def_args RPAREN . RETURN T_BOOL COLON
    (63) head -> IDENTIFIER LPAREN func_def_args RPAREN . RETURN T_LIST_INT COLON
    (65) head -> IDENTIFIER LPAREN func_def_args RPAREN . RETURN T_LIST_DOUBLE COLON
    (67) head -> IDENTIFIER LPAREN func_def_args RPAREN . RETURN T_LIST_BOOL COLON

    COLON           shift and go to state 138
    RETURN          shift and go to state 139


state 118

    (58) head -> IDENTIFIER LPAREN RPAREN RETURN . T_INT COLON
    (60) head -> IDENTIFIER LPAREN RPAREN RETURN . T_DOUBLE COLON
    (62) head -> IDENTIFIER LPAREN RPAREN RETURN . T_BOOL COLON
    (64) head -> IDENTIFIER LPAREN RPAREN RETURN . T_LIST_INT COLON
    (66) head -> IDENTIFIER LPAREN RPAREN RETURN . T_LIST_DOUBLE COLON
    (68) head -> IDENTIFIER LPAREN RPAREN RETURN . T_LIST_BOOL COLON

    T_INT           shift and go to state 144
    T_DOUBLE        shift and go to state 141
    T_BOOL          shift and go to state 140
    T_LIST_INT      shift and go to state 143
    T_LIST_DOUBLE   shift and go to state 145
    T_LIST_BOOL     shift and go to state 142


state 119

    (56) head -> IDENTIFIER LPAREN RPAREN COLON .

    END_STATEMENT   reduce using rule 56 (head -> IDENTIFIER LPAREN RPAREN COLON .)


state 120

    (73) argument -> T_BOOL IDENTIFIER .

    COMMA           reduce using rule 73 (argument -> T_BOOL IDENTIFIER .)
    RPAREN          reduce using rule 73 (argument -> T_BOOL IDENTIFIER .)


state 121

    (70) func_def_args -> argument COMMA . func_def_args
    (69) func_def_args -> . argument
    (70) func_def_args -> . argument COMMA func_def_args
    (71) argument -> . T_INT IDENTIFIER
    (72) argument -> . T_DOUBLE IDENTIFIER
    (73) argument -> . T_BOOL IDENTIFIER
    (74) argument -> . T_LIST_INT IDENTIFIER
    (75) argument -> . T_LIST_DOUBLE IDENTIFIER
    (76) argument -> . T_LIST_BOOL IDENTIFIER

    T_INT           shift and go to state 102
    T_DOUBLE        shift and go to state 99
    T_BOOL          shift and go to state 97
    T_LIST_INT      shift and go to state 101
    T_LIST_DOUBLE   shift and go to state 103
    T_LIST_BOOL     shift and go to state 100

    func_def_args                  shift and go to state 146
    argument                       shift and go to state 98

state 122

    (72) argument -> T_DOUBLE IDENTIFIER .

    COMMA           reduce using rule 72 (argument -> T_DOUBLE IDENTIFIER .)
    RPAREN          reduce using rule 72 (argument -> T_DOUBLE IDENTIFIER .)


state 123

    (76) argument -> T_LIST_BOOL IDENTIFIER .

    COMMA           reduce using rule 76 (argument -> T_LIST_BOOL IDENTIFIER .)
    RPAREN          reduce using rule 76 (argument -> T_LIST_BOOL IDENTIFIER .)


state 124

    (74) argument -> T_LIST_INT IDENTIFIER .

    COMMA           reduce using rule 74 (argument -> T_LIST_INT IDENTIFIER .)
    RPAREN          reduce using rule 74 (argument -> T_LIST_INT IDENTIFIER .)


state 125

    (71) argument -> T_INT IDENTIFIER .

    COMMA           reduce using rule 71 (argument -> T_INT IDENTIFIER .)
    RPAREN          reduce using rule 71 (argument -> T_INT IDENTIFIER .)


state 126

    (75) argument -> T_LIST_DOUBLE IDENTIFIER .

    COMMA           reduce using rule 75 (argument -> T_LIST_DOUBLE IDENTIFIER .)
    RPAREN          reduce using rule 75 (argument -> T_LIST_DOUBLE IDENTIFIER .)


state 127

    (28) expr -> IDENTIFIER LSBRACKET expr RSBRACKET .

    ADD_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    SUB_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MUL_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    DIV_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MOD_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    OR              reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    AND             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CEQ             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CNE             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLT             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLE             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGT             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGE             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    END_STATEMENT   reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    COLON           reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    RPAREN          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    RSBRACKET       reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    COMMA           reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)


state 128

    (79) while_stmt -> WHILE expr COLON END_STATEMENT INDENT . body DEDENT
    (77) body -> . stmt
    (78) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (50) compound_stmt -> . func_def
    (51) compound_stmt -> . if_stmt
    (52) compound_stmt -> . while_stmt
    (53) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (54) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (82) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (79) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (80) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    RETURN          shift and go to state 6
    DISPLAY         shift and go to state 11
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 147
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 27
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 116
    display                        shift and go to state 33
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 30
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 14

state 129

    (80) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN . expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    expr                           shift and go to state 148
    boolean                        shift and go to state 4
    func_call                      shift and go to state 25

state 130

    (81) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 149


state 131

    (22) const_decl -> IDENTIFIER CONST LSBRACKET list_args RSBRACKET .

    END_STATEMENT   reduce using rule 22 (const_decl -> IDENTIFIER CONST LSBRACKET list_args RSBRACKET .)


state 132

    (20) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 150
    boolean                        shift and go to state 4

state 133

    (26) list_args -> expr COMMA list_args .

    RPAREN          reduce using rule 26 (list_args -> expr COMMA list_args .)
    RSBRACKET       reduce using rule 26 (list_args -> expr COMMA list_args .)


state 134

    (19) assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET .

    END_STATEMENT   reduce using rule 19 (assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET .)


state 135

    (82) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT
    (83) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT elseif_list
    (84) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (77) body -> . stmt
    (78) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (50) compound_stmt -> . func_def
    (51) compound_stmt -> . if_stmt
    (52) compound_stmt -> . while_stmt
    (53) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (54) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (82) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (79) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (80) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    RETURN          shift and go to state 6
    DISPLAY         shift and go to state 11
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 151
    func_call                      shift and go to state 25
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 27
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 116
    display                        shift and go to state 33
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 30
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 14
    if_stmt                        shift and go to state 26

state 136

    (54) func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .

    FUNCTION        reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 54 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)


state 137

    (78) body -> stmt body .

    DEDENT          reduce using rule 78 (body -> stmt body .)


state 138

    (55) head -> IDENTIFIER LPAREN func_def_args RPAREN COLON .

    END_STATEMENT   reduce using rule 55 (head -> IDENTIFIER LPAREN func_def_args RPAREN COLON .)


state 139

    (57) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN . T_INT COLON
    (59) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN . T_DOUBLE COLON
    (61) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN . T_BOOL COLON
    (63) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN . T_LIST_INT COLON
    (65) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN . T_LIST_DOUBLE COLON
    (67) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN . T_LIST_BOOL COLON

    T_INT           shift and go to state 156
    T_DOUBLE        shift and go to state 153
    T_BOOL          shift and go to state 152
    T_LIST_INT      shift and go to state 155
    T_LIST_DOUBLE   shift and go to state 157
    T_LIST_BOOL     shift and go to state 154


state 140

    (62) head -> IDENTIFIER LPAREN RPAREN RETURN T_BOOL . COLON

    COLON           shift and go to state 158


state 141

    (60) head -> IDENTIFIER LPAREN RPAREN RETURN T_DOUBLE . COLON

    COLON           shift and go to state 159


state 142

    (68) head -> IDENTIFIER LPAREN RPAREN RETURN T_LIST_BOOL . COLON

    COLON           shift and go to state 160


state 143

    (64) head -> IDENTIFIER LPAREN RPAREN RETURN T_LIST_INT . COLON

    COLON           shift and go to state 161


state 144

    (58) head -> IDENTIFIER LPAREN RPAREN RETURN T_INT . COLON

    COLON           shift and go to state 162


state 145

    (66) head -> IDENTIFIER LPAREN RPAREN RETURN T_LIST_DOUBLE . COLON

    COLON           shift and go to state 163


state 146

    (70) func_def_args -> argument COMMA func_def_args .

    RPAREN          reduce using rule 70 (func_def_args -> argument COMMA func_def_args .)


state 147

    (79) while_stmt -> WHILE expr COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 164


state 148

    (80) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr . COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    COMMA           shift and go to state 165
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 149

    (81) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 166


state 150

    (20) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr .
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 20 (assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr .)
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 151

    (82) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT
    (83) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT elseif_list
    (84) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    DEDENT          shift and go to state 167


state 152

    (61) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_BOOL . COLON

    COLON           shift and go to state 168


state 153

    (59) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_DOUBLE . COLON

    COLON           shift and go to state 169


state 154

    (67) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_BOOL . COLON

    COLON           shift and go to state 170


state 155

    (63) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_INT . COLON

    COLON           shift and go to state 171


state 156

    (57) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_INT . COLON

    COLON           shift and go to state 172


state 157

    (65) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_DOUBLE . COLON

    COLON           shift and go to state 173


state 158

    (62) head -> IDENTIFIER LPAREN RPAREN RETURN T_BOOL COLON .

    END_STATEMENT   reduce using rule 62 (head -> IDENTIFIER LPAREN RPAREN RETURN T_BOOL COLON .)


state 159

    (60) head -> IDENTIFIER LPAREN RPAREN RETURN T_DOUBLE COLON .

    END_STATEMENT   reduce using rule 60 (head -> IDENTIFIER LPAREN RPAREN RETURN T_DOUBLE COLON .)


state 160

    (68) head -> IDENTIFIER LPAREN RPAREN RETURN T_LIST_BOOL COLON .

    END_STATEMENT   reduce using rule 68 (head -> IDENTIFIER LPAREN RPAREN RETURN T_LIST_BOOL COLON .)


state 161

    (64) head -> IDENTIFIER LPAREN RPAREN RETURN T_LIST_INT COLON .

    END_STATEMENT   reduce using rule 64 (head -> IDENTIFIER LPAREN RPAREN RETURN T_LIST_INT COLON .)


state 162

    (58) head -> IDENTIFIER LPAREN RPAREN RETURN T_INT COLON .

    END_STATEMENT   reduce using rule 58 (head -> IDENTIFIER LPAREN RPAREN RETURN T_INT COLON .)


state 163

    (66) head -> IDENTIFIER LPAREN RPAREN RETURN T_LIST_DOUBLE COLON .

    END_STATEMENT   reduce using rule 66 (head -> IDENTIFIER LPAREN RPAREN RETURN T_LIST_DOUBLE COLON .)


state 164

    (79) while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .

    FUNCTION        reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 79 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)


state 165

    (80) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA . expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    expr                           shift and go to state 174
    boolean                        shift and go to state 4
    func_call                      shift and go to state 25

state 166

    (81) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT . body DEDENT
    (77) body -> . stmt
    (78) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (50) compound_stmt -> . func_def
    (51) compound_stmt -> . if_stmt
    (52) compound_stmt -> . while_stmt
    (53) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (54) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (82) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (79) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (80) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    RETURN          shift and go to state 6
    DISPLAY         shift and go to state 11
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 175
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 116
    display                        shift and go to state 33
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 30
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    expr                           shift and go to state 27
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 14

state 167

    (82) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .
    (83) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT . elseif_list
    (84) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT . elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT . ELSE COLON END_STATEMENT INDENT body DEDENT
    (86) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT
    (87) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list

    END_STATEMENT   reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 82 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            shift and go to state 177
    ELSEIF          shift and go to state 178

    elseif_list                    shift and go to state 176

state 168

    (61) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_BOOL COLON .

    END_STATEMENT   reduce using rule 61 (head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_BOOL COLON .)


state 169

    (59) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_DOUBLE COLON .

    END_STATEMENT   reduce using rule 59 (head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_DOUBLE COLON .)


state 170

    (67) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_BOOL COLON .

    END_STATEMENT   reduce using rule 67 (head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_BOOL COLON .)


state 171

    (63) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_INT COLON .

    END_STATEMENT   reduce using rule 63 (head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_INT COLON .)


state 172

    (57) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_INT COLON .

    END_STATEMENT   reduce using rule 57 (head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_INT COLON .)


state 173

    (65) head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_DOUBLE COLON .

    END_STATEMENT   reduce using rule 65 (head -> IDENTIFIER LPAREN func_def_args RPAREN RETURN T_LIST_DOUBLE COLON .)


state 174

    (80) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr . RPAREN COLON END_STATEMENT INDENT body DEDENT
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    RPAREN          shift and go to state 179
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 175

    (81) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 180


state 176

    (83) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .
    (84) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list . ELSE COLON END_STATEMENT INDENT body DEDENT

    END_STATEMENT   reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FUNCTION        reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    IF              reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    WHILE           reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FOR             reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    IDENTIFIER      reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    LPAREN          reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    INTEGER         reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DOUBLE          reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    SUB_OP          reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    RETURN          reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DISPLAY         reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    BREAK           reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    CONTINUE        reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    TRUE            reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FALSE           reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    $end            reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DEDENT          reduce using rule 83 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    ELSE            shift and go to state 181


state 177

    (85) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE . COLON END_STATEMENT INDENT body DEDENT

    COLON           shift and go to state 182


state 178

    (86) elseif_list -> ELSEIF . expr COLON END_STATEMENT INDENT body DEDENT
    (87) elseif_list -> ELSEIF . expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IDENTIFIER      shift and go to state 37
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    func_call                      shift and go to state 25
    expr                           shift and go to state 183
    boolean                        shift and go to state 4

state 179

    (80) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN . COLON END_STATEMENT INDENT body DEDENT

    COLON           shift and go to state 184


state 180

    (81) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .

    FUNCTION        reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 81 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)


state 181

    (84) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE . COLON END_STATEMENT INDENT body DEDENT

    COLON           shift and go to state 185


state 182

    (85) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 186


state 183

    (86) elseif_list -> ELSEIF expr . COLON END_STATEMENT INDENT body DEDENT
    (87) elseif_list -> ELSEIF expr . COLON END_STATEMENT INDENT body DEDENT elseif_list
    (36) expr -> expr . ADD_OP expr
    (37) expr -> expr . SUB_OP expr
    (38) expr -> expr . MUL_OP expr
    (39) expr -> expr . DIV_OP expr
    (40) expr -> expr . MOD_OP expr
    (41) expr -> expr . OR expr
    (42) expr -> expr . AND expr
    (43) expr -> expr . CEQ expr
    (44) expr -> expr . CNE expr
    (45) expr -> expr . CLT expr
    (46) expr -> expr . CLE expr
    (47) expr -> expr . CGT expr
    (48) expr -> expr . CGE expr

    COLON           shift and go to state 187
    ADD_OP          shift and go to state 59
    SUB_OP          shift and go to state 55
    MUL_OP          shift and go to state 52
    DIV_OP          shift and go to state 56
    MOD_OP          shift and go to state 61
    OR              shift and go to state 62
    AND             shift and go to state 50
    CEQ             shift and go to state 58
    CNE             shift and go to state 57
    CLT             shift and go to state 60
    CLE             shift and go to state 51
    CGT             shift and go to state 53
    CGE             shift and go to state 54


state 184

    (80) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 188


state 185

    (84) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 189


state 186

    (85) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 190


state 187

    (86) elseif_list -> ELSEIF expr COLON . END_STATEMENT INDENT body DEDENT
    (87) elseif_list -> ELSEIF expr COLON . END_STATEMENT INDENT body DEDENT elseif_list

    END_STATEMENT   shift and go to state 191


state 188

    (80) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 192


state 189

    (84) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 193


state 190

    (85) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT . body DEDENT
    (77) body -> . stmt
    (78) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (50) compound_stmt -> . func_def
    (51) compound_stmt -> . if_stmt
    (52) compound_stmt -> . while_stmt
    (53) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (54) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (82) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (79) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (80) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    RETURN          shift and go to state 6
    DISPLAY         shift and go to state 11
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 194
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 27
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 116
    display                        shift and go to state 33
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 30
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 14

state 191

    (86) elseif_list -> ELSEIF expr COLON END_STATEMENT . INDENT body DEDENT
    (87) elseif_list -> ELSEIF expr COLON END_STATEMENT . INDENT body DEDENT elseif_list

    INDENT          shift and go to state 195


state 192

    (80) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT . body DEDENT
    (77) body -> . stmt
    (78) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (50) compound_stmt -> . func_def
    (51) compound_stmt -> . if_stmt
    (52) compound_stmt -> . while_stmt
    (53) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (54) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (82) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (79) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (80) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    RETURN          shift and go to state 6
    DISPLAY         shift and go to state 11
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 196
    func_call                      shift and go to state 25
    if_stmt                        shift and go to state 26
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 27
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 116
    display                        shift and go to state 33
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 30
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 14

state 193

    (84) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT . body DEDENT
    (77) body -> . stmt
    (78) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (50) compound_stmt -> . func_def
    (51) compound_stmt -> . if_stmt
    (52) compound_stmt -> . while_stmt
    (53) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (54) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (82) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (79) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (80) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    RETURN          shift and go to state 6
    DISPLAY         shift and go to state 11
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 197
    func_call                      shift and go to state 25
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 27
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 116
    display                        shift and go to state 33
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 30
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 14
    if_stmt                        shift and go to state 26

state 194

    (85) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 198


state 195

    (86) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT . body DEDENT
    (87) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT . body DEDENT elseif_list
    (77) body -> . stmt
    (78) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (50) compound_stmt -> . func_def
    (51) compound_stmt -> . if_stmt
    (52) compound_stmt -> . while_stmt
    (53) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (54) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (82) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (83) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (84) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (85) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (79) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (80) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (81) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . func_call
    (31) expr -> . INTEGER
    (32) expr -> . DOUBLE
    (33) expr -> . boolean
    (36) expr -> . expr ADD_OP expr
    (37) expr -> . expr SUB_OP expr
    (38) expr -> . expr MUL_OP expr
    (39) expr -> . expr DIV_OP expr
    (40) expr -> . expr MOD_OP expr
    (41) expr -> . expr OR expr
    (42) expr -> . expr AND expr
    (43) expr -> . expr CEQ expr
    (44) expr -> . expr CNE expr
    (45) expr -> . expr CLT expr
    (46) expr -> . expr CLE expr
    (47) expr -> . expr CGT expr
    (48) expr -> . expr CGE expr
    (49) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    FUNCTION        shift and go to state 1
    IF              shift and go to state 24
    WHILE           shift and go to state 3
    FOR             shift and go to state 9
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 7
    DOUBLE          shift and go to state 32
    SUB_OP          shift and go to state 28
    RETURN          shift and go to state 6
    DISPLAY         shift and go to state 11
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 31
    TRUE            shift and go to state 8
    FALSE           shift and go to state 23

    body                           shift and go to state 199
    func_call                      shift and go to state 25
    func_def                       shift and go to state 16
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 27
    for_stmt                       shift and go to state 20
    stmt                           shift and go to state 116
    display                        shift and go to state 33
    small_stmt                     shift and go to state 2
    while_stmt                     shift and go to state 30
    boolean                        shift and go to state 4
    return_stmt                    shift and go to state 5
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 10
    compound_stmt                  shift and go to state 14
    if_stmt                        shift and go to state 26

state 196

    (80) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 200


state 197

    (84) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 201


state 198

    (85) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .

    END_STATEMENT   reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 85 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)


state 199

    (86) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body . DEDENT
    (87) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body . DEDENT elseif_list

    DEDENT          shift and go to state 202


state 200

    (80) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .

    FUNCTION        reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 80 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)


state 201

    (84) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .

    END_STATEMENT   reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 84 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)


state 202

    (86) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .
    (87) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT . elseif_list
    (86) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT
    (87) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list

    ELSE            reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 86 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    ELSEIF          shift and go to state 178

    elseif_list                    shift and go to state 203

state 203

    (87) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .

    ELSE            reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    END_STATEMENT   reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FUNCTION        reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    IF              reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    WHILE           reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FOR             reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    IDENTIFIER      reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    LPAREN          reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    INTEGER         reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DOUBLE          reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    SUB_OP          reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    RETURN          reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DISPLAY         reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    BREAK           reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    CONTINUE        reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    TRUE            reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FALSE           reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    $end            reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DEDENT          reduce using rule 87 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)

