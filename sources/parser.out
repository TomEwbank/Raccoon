Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt
Rule 2     program -> stmt program
Rule 3     program -> END_STATEMENT stmt program
Rule 4     stmt -> simple_stmt
Rule 5     stmt -> compound_stmt
Rule 6     simple_stmt -> small_stmt END_STATEMENT
Rule 7     small_stmt -> assignment
Rule 8     small_stmt -> const_decl
Rule 9     small_stmt -> expr
Rule 10    small_stmt -> return_stmt
Rule 11    small_stmt -> display
Rule 12    small_stmt -> loop_stmt
Rule 13    return_stmt -> RETURN
Rule 14    return_stmt -> RETURN expr
Rule 15    loop_stmt -> BREAK
Rule 16    loop_stmt -> CONTINUE
Rule 17    display -> DISPLAY LPAREN expr RPAREN
Rule 18    assignment -> IDENTIFIER ASSIGN expr
Rule 19    assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
Rule 20    assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
Rule 21    const_decl -> IDENTIFIER CONST expr
Rule 22    const_decl -> IDENTIFIER CONST LSBRACKET list_args RSBRACKET
Rule 23    func_call -> IDENTIFIER LPAREN list_args RPAREN
Rule 24    func_call -> IDENTIFIER LPAREN RPAREN
Rule 25    list_args -> expr
Rule 26    list_args -> expr COMMA list_args
Rule 27    expr -> IDENTIFIER
Rule 28    expr -> IDENTIFIER LSBRACKET expr RSBRACKET
Rule 29    expr -> STRING
Rule 30    expr -> LPAREN expr RPAREN
Rule 31    expr -> func_call
Rule 32    expr -> INTEGER
Rule 33    expr -> DOUBLE
Rule 34    expr -> boolean
Rule 35    boolean -> TRUE
Rule 36    boolean -> FALSE
Rule 37    expr -> expr ADD_OP expr
Rule 38    expr -> expr SUB_OP expr
Rule 39    expr -> expr MUL_OP expr
Rule 40    expr -> expr DIV_OP expr
Rule 41    expr -> expr MOD_OP expr
Rule 42    expr -> expr OR expr
Rule 43    expr -> expr AND expr
Rule 44    expr -> expr CEQ expr
Rule 45    expr -> expr CNE expr
Rule 46    expr -> expr CLT expr
Rule 47    expr -> expr CLE expr
Rule 48    expr -> expr CGT expr
Rule 49    expr -> expr CGE expr
Rule 50    expr -> SUB_OP expr
Rule 51    compound_stmt -> func_def
Rule 52    compound_stmt -> if_stmt
Rule 53    compound_stmt -> while_stmt
Rule 54    compound_stmt -> for_stmt
Rule 55    func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT
Rule 56    head -> IDENTIFIER LPAREN func_def_args RPAREN COLON
Rule 57    head -> IDENTIFIER LPAREN RPAREN COLON
Rule 58    func_def_args -> IDENTIFIER
Rule 59    func_def_args -> IDENTIFIER COMMA func_def_args
Rule 60    body -> stmt
Rule 61    body -> stmt body
Rule 62    while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT
Rule 63    for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
Rule 64    for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
Rule 65    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT
Rule 66    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
Rule 67    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
Rule 68    if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
Rule 69    elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT
Rule 70    elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
Rule 71    stmt -> IF expr END_STATEMENT INDENT body DEDENT
Rule 72    stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT
Rule 73    stmt -> ELSE expr END_STATEMENT INDENT body DEDENT
Rule 74    stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
Rule 75    stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
Rule 76    stmt -> WHILE expr END_STATEMENT INDENT body DEDENT
Rule 77    stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
Rule 78    stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT

Terminals, with rules where they appear

ADD_OP               : 37
AND                  : 43
ASSIGN               : 18 19 20
BREAK                : 15
CEQ                  : 44
CGE                  : 49
CGT                  : 48
CLE                  : 47
CLT                  : 46
CNE                  : 45
COLON                : 56 57 62 63 64 65 66 67 67 68 68 69 70
COMMA                : 26 59 63 74
CONST                : 21 22
CONTINUE             : 16
DEDENT               : 55 62 63 64 65 66 67 67 68 68 69 70 71 72 73 74 75 76 77 78
DISPLAY              : 17
DIV_OP               : 40
DOUBLE               : 33
ELSE                 : 67 68 73
ELSEIF               : 69 70 72
END_STATEMENT        : 3 6 55 62 63 64 65 66 67 67 68 68 69 70 71 72 73 74 75 76 77 78
FALSE                : 36
FOR                  : 63 64 74 75
FUNCTION             : 55 77 78
IDENTIFIER           : 18 19 20 21 22 23 24 27 28 56 57 58 59 63 64 64 74 75 75 77 78
IF                   : 65 66 67 68 71
IN                   : 63 64 74 75
INDENT               : 55 62 63 64 65 66 67 67 68 68 69 70 71 72 73 74 75 76 77 78
INTEGER              : 32
LPAREN               : 17 23 24 30 56 57 63 74 77 78
LSBRACKET            : 19 20 22 28
MOD_OP               : 41
MUL_OP               : 39
OR                   : 42
RANGE                : 63 74
RETURN               : 13 14
RPAREN               : 17 23 24 30 56 57 63 74 77 78
RSBRACKET            : 19 20 22 28
STRING               : 29
SUB_OP               : 38 50
TRUE                 : 35
WHILE                : 62 76
error                : 

Nonterminals, with rules where they appear

assignment           : 7
body                 : 55 61 62 63 64 65 66 67 67 68 68 69 70 71 72 73 74 75 76 77 78
boolean              : 34
compound_stmt        : 5
const_decl           : 8
display              : 11
elseif_list          : 66 67 70
expr                 : 9 14 17 18 20 20 21 25 26 28 30 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 62 63 63 65 66 67 68 69 70 71 72 73 74 74 76
for_stmt             : 54
func_call            : 31
func_def             : 51
func_def_args        : 56 59 77
head                 : 55
if_stmt              : 52
list_args            : 19 22 23 26
loop_stmt            : 12
program              : 2 3 0
return_stmt          : 10
simple_stmt          : 4
small_stmt           : 6
stmt                 : 1 2 3 60 61
while_stmt           : 53

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt
    (2) program -> . stmt program
    (3) program -> . END_STATEMENT stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    END_STATEMENT   shift and go to state 14
    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    program                        shift and go to state 11
    compound_stmt                  shift and go to state 13
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 19
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 1

    (6) simple_stmt -> small_stmt . END_STATEMENT

    END_STATEMENT   shift and go to state 37


state 2

    (76) stmt -> WHILE . expr END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> WHILE . expr COLON END_STATEMENT INDENT body DEDENT
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    expr                           shift and go to state 39
    boolean                        shift and go to state 3
    func_call                      shift and go to state 26

state 3

    (34) expr -> boolean .

    ADD_OP          reduce using rule 34 (expr -> boolean .)
    SUB_OP          reduce using rule 34 (expr -> boolean .)
    MUL_OP          reduce using rule 34 (expr -> boolean .)
    DIV_OP          reduce using rule 34 (expr -> boolean .)
    MOD_OP          reduce using rule 34 (expr -> boolean .)
    OR              reduce using rule 34 (expr -> boolean .)
    AND             reduce using rule 34 (expr -> boolean .)
    CEQ             reduce using rule 34 (expr -> boolean .)
    CNE             reduce using rule 34 (expr -> boolean .)
    CLT             reduce using rule 34 (expr -> boolean .)
    CLE             reduce using rule 34 (expr -> boolean .)
    CGT             reduce using rule 34 (expr -> boolean .)
    CGE             reduce using rule 34 (expr -> boolean .)
    END_STATEMENT   reduce using rule 34 (expr -> boolean .)
    COLON           reduce using rule 34 (expr -> boolean .)
    RPAREN          reduce using rule 34 (expr -> boolean .)
    RSBRACKET       reduce using rule 34 (expr -> boolean .)
    COMMA           reduce using rule 34 (expr -> boolean .)


state 4

    (10) small_stmt -> return_stmt .

    END_STATEMENT   reduce using rule 10 (small_stmt -> return_stmt .)


state 5

    (13) return_stmt -> RETURN .
    (14) return_stmt -> RETURN . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    END_STATEMENT   reduce using rule 13 (return_stmt -> RETURN .)
    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 40
    boolean                        shift and go to state 3

state 6

    (32) expr -> INTEGER .

    ADD_OP          reduce using rule 32 (expr -> INTEGER .)
    SUB_OP          reduce using rule 32 (expr -> INTEGER .)
    MUL_OP          reduce using rule 32 (expr -> INTEGER .)
    DIV_OP          reduce using rule 32 (expr -> INTEGER .)
    MOD_OP          reduce using rule 32 (expr -> INTEGER .)
    OR              reduce using rule 32 (expr -> INTEGER .)
    AND             reduce using rule 32 (expr -> INTEGER .)
    CEQ             reduce using rule 32 (expr -> INTEGER .)
    CNE             reduce using rule 32 (expr -> INTEGER .)
    CLT             reduce using rule 32 (expr -> INTEGER .)
    CLE             reduce using rule 32 (expr -> INTEGER .)
    CGT             reduce using rule 32 (expr -> INTEGER .)
    CGE             reduce using rule 32 (expr -> INTEGER .)
    END_STATEMENT   reduce using rule 32 (expr -> INTEGER .)
    COLON           reduce using rule 32 (expr -> INTEGER .)
    RPAREN          reduce using rule 32 (expr -> INTEGER .)
    RSBRACKET       reduce using rule 32 (expr -> INTEGER .)
    COMMA           reduce using rule 32 (expr -> INTEGER .)


state 7

    (35) boolean -> TRUE .

    END_STATEMENT   reduce using rule 35 (boolean -> TRUE .)
    COLON           reduce using rule 35 (boolean -> TRUE .)
    ADD_OP          reduce using rule 35 (boolean -> TRUE .)
    SUB_OP          reduce using rule 35 (boolean -> TRUE .)
    MUL_OP          reduce using rule 35 (boolean -> TRUE .)
    DIV_OP          reduce using rule 35 (boolean -> TRUE .)
    MOD_OP          reduce using rule 35 (boolean -> TRUE .)
    OR              reduce using rule 35 (boolean -> TRUE .)
    AND             reduce using rule 35 (boolean -> TRUE .)
    CEQ             reduce using rule 35 (boolean -> TRUE .)
    CNE             reduce using rule 35 (boolean -> TRUE .)
    CLT             reduce using rule 35 (boolean -> TRUE .)
    CLE             reduce using rule 35 (boolean -> TRUE .)
    CGT             reduce using rule 35 (boolean -> TRUE .)
    CGE             reduce using rule 35 (boolean -> TRUE .)
    RPAREN          reduce using rule 35 (boolean -> TRUE .)
    RSBRACKET       reduce using rule 35 (boolean -> TRUE .)
    COMMA           reduce using rule 35 (boolean -> TRUE .)


state 8

    (51) compound_stmt -> func_def .

    END_STATEMENT   reduce using rule 51 (compound_stmt -> func_def .)
    IF              reduce using rule 51 (compound_stmt -> func_def .)
    ELSEIF          reduce using rule 51 (compound_stmt -> func_def .)
    ELSE            reduce using rule 51 (compound_stmt -> func_def .)
    FOR             reduce using rule 51 (compound_stmt -> func_def .)
    WHILE           reduce using rule 51 (compound_stmt -> func_def .)
    FUNCTION        reduce using rule 51 (compound_stmt -> func_def .)
    IDENTIFIER      reduce using rule 51 (compound_stmt -> func_def .)
    STRING          reduce using rule 51 (compound_stmt -> func_def .)
    LPAREN          reduce using rule 51 (compound_stmt -> func_def .)
    INTEGER         reduce using rule 51 (compound_stmt -> func_def .)
    DOUBLE          reduce using rule 51 (compound_stmt -> func_def .)
    SUB_OP          reduce using rule 51 (compound_stmt -> func_def .)
    RETURN          reduce using rule 51 (compound_stmt -> func_def .)
    DISPLAY         reduce using rule 51 (compound_stmt -> func_def .)
    BREAK           reduce using rule 51 (compound_stmt -> func_def .)
    CONTINUE        reduce using rule 51 (compound_stmt -> func_def .)
    TRUE            reduce using rule 51 (compound_stmt -> func_def .)
    FALSE           reduce using rule 51 (compound_stmt -> func_def .)
    $end            reduce using rule 51 (compound_stmt -> func_def .)
    DEDENT          reduce using rule 51 (compound_stmt -> func_def .)


state 9

    (8) small_stmt -> const_decl .

    END_STATEMENT   reduce using rule 8 (small_stmt -> const_decl .)


state 10

    (17) display -> DISPLAY . LPAREN expr RPAREN

    LPAREN          shift and go to state 41


state 11

    (0) S' -> program .



state 12

    (18) assignment -> IDENTIFIER . ASSIGN expr
    (19) assignment -> IDENTIFIER . ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> IDENTIFIER . LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> IDENTIFIER . CONST expr
    (22) const_decl -> IDENTIFIER . CONST LSBRACKET list_args RSBRACKET
    (27) expr -> IDENTIFIER .
    (28) expr -> IDENTIFIER . LSBRACKET expr RSBRACKET
    (23) func_call -> IDENTIFIER . LPAREN list_args RPAREN
    (24) func_call -> IDENTIFIER . LPAREN RPAREN

    ASSIGN          shift and go to state 45
    LSBRACKET       shift and go to state 43
    CONST           shift and go to state 42
    ADD_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    SUB_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    MUL_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    DIV_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    MOD_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    OR              reduce using rule 27 (expr -> IDENTIFIER .)
    AND             reduce using rule 27 (expr -> IDENTIFIER .)
    CEQ             reduce using rule 27 (expr -> IDENTIFIER .)
    CNE             reduce using rule 27 (expr -> IDENTIFIER .)
    CLT             reduce using rule 27 (expr -> IDENTIFIER .)
    CLE             reduce using rule 27 (expr -> IDENTIFIER .)
    CGT             reduce using rule 27 (expr -> IDENTIFIER .)
    CGE             reduce using rule 27 (expr -> IDENTIFIER .)
    END_STATEMENT   reduce using rule 27 (expr -> IDENTIFIER .)
    LPAREN          shift and go to state 44


state 13

    (5) stmt -> compound_stmt .

    IF              reduce using rule 5 (stmt -> compound_stmt .)
    ELSEIF          reduce using rule 5 (stmt -> compound_stmt .)
    ELSE            reduce using rule 5 (stmt -> compound_stmt .)
    FOR             reduce using rule 5 (stmt -> compound_stmt .)
    WHILE           reduce using rule 5 (stmt -> compound_stmt .)
    FUNCTION        reduce using rule 5 (stmt -> compound_stmt .)
    IDENTIFIER      reduce using rule 5 (stmt -> compound_stmt .)
    STRING          reduce using rule 5 (stmt -> compound_stmt .)
    LPAREN          reduce using rule 5 (stmt -> compound_stmt .)
    INTEGER         reduce using rule 5 (stmt -> compound_stmt .)
    DOUBLE          reduce using rule 5 (stmt -> compound_stmt .)
    SUB_OP          reduce using rule 5 (stmt -> compound_stmt .)
    RETURN          reduce using rule 5 (stmt -> compound_stmt .)
    DISPLAY         reduce using rule 5 (stmt -> compound_stmt .)
    BREAK           reduce using rule 5 (stmt -> compound_stmt .)
    CONTINUE        reduce using rule 5 (stmt -> compound_stmt .)
    TRUE            reduce using rule 5 (stmt -> compound_stmt .)
    FALSE           reduce using rule 5 (stmt -> compound_stmt .)
    DEDENT          reduce using rule 5 (stmt -> compound_stmt .)
    END_STATEMENT   reduce using rule 5 (stmt -> compound_stmt .)
    $end            reduce using rule 5 (stmt -> compound_stmt .)


state 14

    (3) program -> END_STATEMENT . stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 46
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 15

    (29) expr -> STRING .

    ADD_OP          reduce using rule 29 (expr -> STRING .)
    SUB_OP          reduce using rule 29 (expr -> STRING .)
    MUL_OP          reduce using rule 29 (expr -> STRING .)
    DIV_OP          reduce using rule 29 (expr -> STRING .)
    MOD_OP          reduce using rule 29 (expr -> STRING .)
    OR              reduce using rule 29 (expr -> STRING .)
    AND             reduce using rule 29 (expr -> STRING .)
    CEQ             reduce using rule 29 (expr -> STRING .)
    CNE             reduce using rule 29 (expr -> STRING .)
    CLT             reduce using rule 29 (expr -> STRING .)
    CLE             reduce using rule 29 (expr -> STRING .)
    CGT             reduce using rule 29 (expr -> STRING .)
    CGE             reduce using rule 29 (expr -> STRING .)
    END_STATEMENT   reduce using rule 29 (expr -> STRING .)
    COLON           reduce using rule 29 (expr -> STRING .)
    RPAREN          reduce using rule 29 (expr -> STRING .)
    RSBRACKET       reduce using rule 29 (expr -> STRING .)
    COMMA           reduce using rule 29 (expr -> STRING .)


state 16

    (74) stmt -> FOR . IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> FOR . IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> FOR . IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> FOR . IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT

    IDENTIFIER      shift and go to state 47


state 17

    (4) stmt -> simple_stmt .

    IF              reduce using rule 4 (stmt -> simple_stmt .)
    ELSEIF          reduce using rule 4 (stmt -> simple_stmt .)
    ELSE            reduce using rule 4 (stmt -> simple_stmt .)
    FOR             reduce using rule 4 (stmt -> simple_stmt .)
    WHILE           reduce using rule 4 (stmt -> simple_stmt .)
    FUNCTION        reduce using rule 4 (stmt -> simple_stmt .)
    IDENTIFIER      reduce using rule 4 (stmt -> simple_stmt .)
    STRING          reduce using rule 4 (stmt -> simple_stmt .)
    LPAREN          reduce using rule 4 (stmt -> simple_stmt .)
    INTEGER         reduce using rule 4 (stmt -> simple_stmt .)
    DOUBLE          reduce using rule 4 (stmt -> simple_stmt .)
    SUB_OP          reduce using rule 4 (stmt -> simple_stmt .)
    RETURN          reduce using rule 4 (stmt -> simple_stmt .)
    DISPLAY         reduce using rule 4 (stmt -> simple_stmt .)
    BREAK           reduce using rule 4 (stmt -> simple_stmt .)
    CONTINUE        reduce using rule 4 (stmt -> simple_stmt .)
    TRUE            reduce using rule 4 (stmt -> simple_stmt .)
    FALSE           reduce using rule 4 (stmt -> simple_stmt .)
    DEDENT          reduce using rule 4 (stmt -> simple_stmt .)
    END_STATEMENT   reduce using rule 4 (stmt -> simple_stmt .)
    $end            reduce using rule 4 (stmt -> simple_stmt .)


state 18

    (7) small_stmt -> assignment .

    END_STATEMENT   reduce using rule 7 (small_stmt -> assignment .)


state 19

    (1) program -> stmt .
    (2) program -> stmt . program
    (1) program -> . stmt
    (2) program -> . stmt program
    (3) program -> . END_STATEMENT stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    $end            reduce using rule 1 (program -> stmt .)
    END_STATEMENT   shift and go to state 14
    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    program                        shift and go to state 48
    compound_stmt                  shift and go to state 13
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 19
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 20

    (73) stmt -> ELSE . expr END_STATEMENT INDENT body DEDENT
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    expr                           shift and go to state 49
    boolean                        shift and go to state 3
    func_call                      shift and go to state 26

state 21

    (12) small_stmt -> loop_stmt .

    END_STATEMENT   reduce using rule 12 (small_stmt -> loop_stmt .)


state 22

    (30) expr -> LPAREN . expr RPAREN
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 50
    boolean                        shift and go to state 3

state 23

    (36) boolean -> FALSE .

    END_STATEMENT   reduce using rule 36 (boolean -> FALSE .)
    COLON           reduce using rule 36 (boolean -> FALSE .)
    ADD_OP          reduce using rule 36 (boolean -> FALSE .)
    SUB_OP          reduce using rule 36 (boolean -> FALSE .)
    MUL_OP          reduce using rule 36 (boolean -> FALSE .)
    DIV_OP          reduce using rule 36 (boolean -> FALSE .)
    MOD_OP          reduce using rule 36 (boolean -> FALSE .)
    OR              reduce using rule 36 (boolean -> FALSE .)
    AND             reduce using rule 36 (boolean -> FALSE .)
    CEQ             reduce using rule 36 (boolean -> FALSE .)
    CNE             reduce using rule 36 (boolean -> FALSE .)
    CLT             reduce using rule 36 (boolean -> FALSE .)
    CLE             reduce using rule 36 (boolean -> FALSE .)
    CGT             reduce using rule 36 (boolean -> FALSE .)
    CGE             reduce using rule 36 (boolean -> FALSE .)
    RPAREN          reduce using rule 36 (boolean -> FALSE .)
    RSBRACKET       reduce using rule 36 (boolean -> FALSE .)
    COMMA           reduce using rule 36 (boolean -> FALSE .)


state 24

    (77) stmt -> FUNCTION . IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> FUNCTION . IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (55) func_def -> FUNCTION . head END_STATEMENT INDENT body DEDENT
    (56) head -> . IDENTIFIER LPAREN func_def_args RPAREN COLON
    (57) head -> . IDENTIFIER LPAREN RPAREN COLON

    IDENTIFIER      shift and go to state 52

    head                           shift and go to state 51

state 25

    (71) stmt -> IF . expr END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> IF . expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 53
    boolean                        shift and go to state 3

state 26

    (31) expr -> func_call .

    ADD_OP          reduce using rule 31 (expr -> func_call .)
    SUB_OP          reduce using rule 31 (expr -> func_call .)
    MUL_OP          reduce using rule 31 (expr -> func_call .)
    DIV_OP          reduce using rule 31 (expr -> func_call .)
    MOD_OP          reduce using rule 31 (expr -> func_call .)
    OR              reduce using rule 31 (expr -> func_call .)
    AND             reduce using rule 31 (expr -> func_call .)
    CEQ             reduce using rule 31 (expr -> func_call .)
    CNE             reduce using rule 31 (expr -> func_call .)
    CLT             reduce using rule 31 (expr -> func_call .)
    CLE             reduce using rule 31 (expr -> func_call .)
    CGT             reduce using rule 31 (expr -> func_call .)
    CGE             reduce using rule 31 (expr -> func_call .)
    END_STATEMENT   reduce using rule 31 (expr -> func_call .)
    COLON           reduce using rule 31 (expr -> func_call .)
    RPAREN          reduce using rule 31 (expr -> func_call .)
    RSBRACKET       reduce using rule 31 (expr -> func_call .)
    COMMA           reduce using rule 31 (expr -> func_call .)


state 27

    (52) compound_stmt -> if_stmt .

    END_STATEMENT   reduce using rule 52 (compound_stmt -> if_stmt .)
    IF              reduce using rule 52 (compound_stmt -> if_stmt .)
    ELSEIF          reduce using rule 52 (compound_stmt -> if_stmt .)
    ELSE            reduce using rule 52 (compound_stmt -> if_stmt .)
    FOR             reduce using rule 52 (compound_stmt -> if_stmt .)
    WHILE           reduce using rule 52 (compound_stmt -> if_stmt .)
    FUNCTION        reduce using rule 52 (compound_stmt -> if_stmt .)
    IDENTIFIER      reduce using rule 52 (compound_stmt -> if_stmt .)
    STRING          reduce using rule 52 (compound_stmt -> if_stmt .)
    LPAREN          reduce using rule 52 (compound_stmt -> if_stmt .)
    INTEGER         reduce using rule 52 (compound_stmt -> if_stmt .)
    DOUBLE          reduce using rule 52 (compound_stmt -> if_stmt .)
    SUB_OP          reduce using rule 52 (compound_stmt -> if_stmt .)
    RETURN          reduce using rule 52 (compound_stmt -> if_stmt .)
    DISPLAY         reduce using rule 52 (compound_stmt -> if_stmt .)
    BREAK           reduce using rule 52 (compound_stmt -> if_stmt .)
    CONTINUE        reduce using rule 52 (compound_stmt -> if_stmt .)
    TRUE            reduce using rule 52 (compound_stmt -> if_stmt .)
    FALSE           reduce using rule 52 (compound_stmt -> if_stmt .)
    $end            reduce using rule 52 (compound_stmt -> if_stmt .)
    DEDENT          reduce using rule 52 (compound_stmt -> if_stmt .)


state 28

    (9) small_stmt -> expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 9 (small_stmt -> expr .)
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 29

    (54) compound_stmt -> for_stmt .

    END_STATEMENT   reduce using rule 54 (compound_stmt -> for_stmt .)
    IF              reduce using rule 54 (compound_stmt -> for_stmt .)
    ELSEIF          reduce using rule 54 (compound_stmt -> for_stmt .)
    ELSE            reduce using rule 54 (compound_stmt -> for_stmt .)
    FOR             reduce using rule 54 (compound_stmt -> for_stmt .)
    WHILE           reduce using rule 54 (compound_stmt -> for_stmt .)
    FUNCTION        reduce using rule 54 (compound_stmt -> for_stmt .)
    IDENTIFIER      reduce using rule 54 (compound_stmt -> for_stmt .)
    STRING          reduce using rule 54 (compound_stmt -> for_stmt .)
    LPAREN          reduce using rule 54 (compound_stmt -> for_stmt .)
    INTEGER         reduce using rule 54 (compound_stmt -> for_stmt .)
    DOUBLE          reduce using rule 54 (compound_stmt -> for_stmt .)
    SUB_OP          reduce using rule 54 (compound_stmt -> for_stmt .)
    RETURN          reduce using rule 54 (compound_stmt -> for_stmt .)
    DISPLAY         reduce using rule 54 (compound_stmt -> for_stmt .)
    BREAK           reduce using rule 54 (compound_stmt -> for_stmt .)
    CONTINUE        reduce using rule 54 (compound_stmt -> for_stmt .)
    TRUE            reduce using rule 54 (compound_stmt -> for_stmt .)
    FALSE           reduce using rule 54 (compound_stmt -> for_stmt .)
    $end            reduce using rule 54 (compound_stmt -> for_stmt .)
    DEDENT          reduce using rule 54 (compound_stmt -> for_stmt .)


state 30

    (50) expr -> SUB_OP . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 67
    boolean                        shift and go to state 3

state 31

    (15) loop_stmt -> BREAK .

    END_STATEMENT   reduce using rule 15 (loop_stmt -> BREAK .)


state 32

    (53) compound_stmt -> while_stmt .

    END_STATEMENT   reduce using rule 53 (compound_stmt -> while_stmt .)
    IF              reduce using rule 53 (compound_stmt -> while_stmt .)
    ELSEIF          reduce using rule 53 (compound_stmt -> while_stmt .)
    ELSE            reduce using rule 53 (compound_stmt -> while_stmt .)
    FOR             reduce using rule 53 (compound_stmt -> while_stmt .)
    WHILE           reduce using rule 53 (compound_stmt -> while_stmt .)
    FUNCTION        reduce using rule 53 (compound_stmt -> while_stmt .)
    IDENTIFIER      reduce using rule 53 (compound_stmt -> while_stmt .)
    STRING          reduce using rule 53 (compound_stmt -> while_stmt .)
    LPAREN          reduce using rule 53 (compound_stmt -> while_stmt .)
    INTEGER         reduce using rule 53 (compound_stmt -> while_stmt .)
    DOUBLE          reduce using rule 53 (compound_stmt -> while_stmt .)
    SUB_OP          reduce using rule 53 (compound_stmt -> while_stmt .)
    RETURN          reduce using rule 53 (compound_stmt -> while_stmt .)
    DISPLAY         reduce using rule 53 (compound_stmt -> while_stmt .)
    BREAK           reduce using rule 53 (compound_stmt -> while_stmt .)
    CONTINUE        reduce using rule 53 (compound_stmt -> while_stmt .)
    TRUE            reduce using rule 53 (compound_stmt -> while_stmt .)
    FALSE           reduce using rule 53 (compound_stmt -> while_stmt .)
    $end            reduce using rule 53 (compound_stmt -> while_stmt .)
    DEDENT          reduce using rule 53 (compound_stmt -> while_stmt .)


state 33

    (16) loop_stmt -> CONTINUE .

    END_STATEMENT   reduce using rule 16 (loop_stmt -> CONTINUE .)


state 34

    (33) expr -> DOUBLE .

    ADD_OP          reduce using rule 33 (expr -> DOUBLE .)
    SUB_OP          reduce using rule 33 (expr -> DOUBLE .)
    MUL_OP          reduce using rule 33 (expr -> DOUBLE .)
    DIV_OP          reduce using rule 33 (expr -> DOUBLE .)
    MOD_OP          reduce using rule 33 (expr -> DOUBLE .)
    OR              reduce using rule 33 (expr -> DOUBLE .)
    AND             reduce using rule 33 (expr -> DOUBLE .)
    CEQ             reduce using rule 33 (expr -> DOUBLE .)
    CNE             reduce using rule 33 (expr -> DOUBLE .)
    CLT             reduce using rule 33 (expr -> DOUBLE .)
    CLE             reduce using rule 33 (expr -> DOUBLE .)
    CGT             reduce using rule 33 (expr -> DOUBLE .)
    CGE             reduce using rule 33 (expr -> DOUBLE .)
    END_STATEMENT   reduce using rule 33 (expr -> DOUBLE .)
    COLON           reduce using rule 33 (expr -> DOUBLE .)
    RPAREN          reduce using rule 33 (expr -> DOUBLE .)
    RSBRACKET       reduce using rule 33 (expr -> DOUBLE .)
    COMMA           reduce using rule 33 (expr -> DOUBLE .)


state 35

    (72) stmt -> ELSEIF . expr END_STATEMENT INDENT body DEDENT
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    expr                           shift and go to state 68
    boolean                        shift and go to state 3
    func_call                      shift and go to state 26

state 36

    (11) small_stmt -> display .

    END_STATEMENT   reduce using rule 11 (small_stmt -> display .)


state 37

    (6) simple_stmt -> small_stmt END_STATEMENT .

    IF              reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    ELSEIF          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    ELSE            reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    FOR             reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    WHILE           reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    FUNCTION        reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    IDENTIFIER      reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    STRING          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    LPAREN          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    INTEGER         reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    DOUBLE          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    SUB_OP          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    RETURN          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    DISPLAY         reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    BREAK           reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    CONTINUE        reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    TRUE            reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    FALSE           reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    DEDENT          reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    END_STATEMENT   reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)
    $end            reduce using rule 6 (simple_stmt -> small_stmt END_STATEMENT .)


state 38

    (27) expr -> IDENTIFIER .
    (28) expr -> IDENTIFIER . LSBRACKET expr RSBRACKET
    (23) func_call -> IDENTIFIER . LPAREN list_args RPAREN
    (24) func_call -> IDENTIFIER . LPAREN RPAREN

    ADD_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    SUB_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    MUL_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    DIV_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    MOD_OP          reduce using rule 27 (expr -> IDENTIFIER .)
    OR              reduce using rule 27 (expr -> IDENTIFIER .)
    AND             reduce using rule 27 (expr -> IDENTIFIER .)
    CEQ             reduce using rule 27 (expr -> IDENTIFIER .)
    CNE             reduce using rule 27 (expr -> IDENTIFIER .)
    CLT             reduce using rule 27 (expr -> IDENTIFIER .)
    CLE             reduce using rule 27 (expr -> IDENTIFIER .)
    CGT             reduce using rule 27 (expr -> IDENTIFIER .)
    CGE             reduce using rule 27 (expr -> IDENTIFIER .)
    END_STATEMENT   reduce using rule 27 (expr -> IDENTIFIER .)
    COLON           reduce using rule 27 (expr -> IDENTIFIER .)
    RPAREN          reduce using rule 27 (expr -> IDENTIFIER .)
    RSBRACKET       reduce using rule 27 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 27 (expr -> IDENTIFIER .)
    LSBRACKET       shift and go to state 69
    LPAREN          shift and go to state 44


state 39

    (76) stmt -> WHILE expr . END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> WHILE expr . COLON END_STATEMENT INDENT body DEDENT
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    END_STATEMENT   shift and go to state 70
    COLON           shift and go to state 71
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 40

    (14) return_stmt -> RETURN expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 14 (return_stmt -> RETURN expr .)
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 41

    (17) display -> DISPLAY LPAREN . expr RPAREN
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 72
    boolean                        shift and go to state 3

state 42

    (21) const_decl -> IDENTIFIER CONST . expr
    (22) const_decl -> IDENTIFIER CONST . LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    LSBRACKET       shift and go to state 73
    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 74
    boolean                        shift and go to state 3

state 43

    (20) assignment -> IDENTIFIER LSBRACKET . expr RSBRACKET ASSIGN expr
    (28) expr -> IDENTIFIER LSBRACKET . expr RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 75
    boolean                        shift and go to state 3

state 44

    (23) func_call -> IDENTIFIER LPAREN . list_args RPAREN
    (24) func_call -> IDENTIFIER LPAREN . RPAREN
    (25) list_args -> . expr
    (26) list_args -> . expr COMMA list_args
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    RPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 78
    boolean                        shift and go to state 3
    list_args                      shift and go to state 76

state 45

    (18) assignment -> IDENTIFIER ASSIGN . expr
    (19) assignment -> IDENTIFIER ASSIGN . LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    LSBRACKET       shift and go to state 79
    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 80
    boolean                        shift and go to state 3

state 46

    (3) program -> END_STATEMENT stmt . program
    (1) program -> . stmt
    (2) program -> . stmt program
    (3) program -> . END_STATEMENT stmt program
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    END_STATEMENT   shift and go to state 14
    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    small_stmt                     shift and go to state 1
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    const_decl                     shift and go to state 9
    program                        shift and go to state 81
    compound_stmt                  shift and go to state 13
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    assignment                     shift and go to state 18
    stmt                           shift and go to state 19
    for_stmt                       shift and go to state 29
    loop_stmt                      shift and go to state 21
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    expr                           shift and go to state 28
    while_stmt                     shift and go to state 32
    display                        shift and go to state 36

state 47

    (74) stmt -> FOR IDENTIFIER . IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> FOR IDENTIFIER . IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> FOR IDENTIFIER . IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> FOR IDENTIFIER . IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT

    IN              shift and go to state 82


state 48

    (2) program -> stmt program .

    $end            reduce using rule 2 (program -> stmt program .)


state 49

    (73) stmt -> ELSE expr . END_STATEMENT INDENT body DEDENT
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    END_STATEMENT   shift and go to state 83
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 50

    (30) expr -> LPAREN expr . RPAREN
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    RPAREN          shift and go to state 84
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 51

    (55) func_def -> FUNCTION head . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 85


state 52

    (77) stmt -> FUNCTION IDENTIFIER . LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> FUNCTION IDENTIFIER . LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (56) head -> IDENTIFIER . LPAREN func_def_args RPAREN COLON
    (57) head -> IDENTIFIER . LPAREN RPAREN COLON

    LPAREN          shift and go to state 86


state 53

    (71) stmt -> IF expr . END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> IF expr . COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    END_STATEMENT   shift and go to state 88
    COLON           shift and go to state 87
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 54

    (43) expr -> expr AND . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 89
    boolean                        shift and go to state 3

state 55

    (47) expr -> expr CLE . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 90
    boolean                        shift and go to state 3

state 56

    (39) expr -> expr MUL_OP . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 91
    boolean                        shift and go to state 3

state 57

    (48) expr -> expr CGT . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 92
    boolean                        shift and go to state 3

state 58

    (49) expr -> expr CGE . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 93
    boolean                        shift and go to state 3

state 59

    (38) expr -> expr SUB_OP . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 94
    boolean                        shift and go to state 3

state 60

    (40) expr -> expr DIV_OP . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 95
    boolean                        shift and go to state 3

state 61

    (45) expr -> expr CNE . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 96
    boolean                        shift and go to state 3

state 62

    (44) expr -> expr CEQ . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 97
    boolean                        shift and go to state 3

state 63

    (37) expr -> expr ADD_OP . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 98
    boolean                        shift and go to state 3

state 64

    (46) expr -> expr CLT . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 99
    boolean                        shift and go to state 3

state 65

    (41) expr -> expr MOD_OP . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 100
    boolean                        shift and go to state 3

state 66

    (42) expr -> expr OR . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 101
    boolean                        shift and go to state 3

state 67

    (50) expr -> SUB_OP expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    ADD_OP          reduce using rule 50 (expr -> SUB_OP expr .)
    SUB_OP          reduce using rule 50 (expr -> SUB_OP expr .)
    MUL_OP          reduce using rule 50 (expr -> SUB_OP expr .)
    DIV_OP          reduce using rule 50 (expr -> SUB_OP expr .)
    MOD_OP          reduce using rule 50 (expr -> SUB_OP expr .)
    OR              reduce using rule 50 (expr -> SUB_OP expr .)
    AND             reduce using rule 50 (expr -> SUB_OP expr .)
    CEQ             reduce using rule 50 (expr -> SUB_OP expr .)
    CNE             reduce using rule 50 (expr -> SUB_OP expr .)
    CLT             reduce using rule 50 (expr -> SUB_OP expr .)
    CLE             reduce using rule 50 (expr -> SUB_OP expr .)
    CGT             reduce using rule 50 (expr -> SUB_OP expr .)
    CGE             reduce using rule 50 (expr -> SUB_OP expr .)
    END_STATEMENT   reduce using rule 50 (expr -> SUB_OP expr .)
    COLON           reduce using rule 50 (expr -> SUB_OP expr .)
    RPAREN          reduce using rule 50 (expr -> SUB_OP expr .)
    RSBRACKET       reduce using rule 50 (expr -> SUB_OP expr .)
    COMMA           reduce using rule 50 (expr -> SUB_OP expr .)

  ! ADD_OP          [ shift and go to state 63 ]
  ! SUB_OP          [ shift and go to state 59 ]
  ! MUL_OP          [ shift and go to state 56 ]
  ! DIV_OP          [ shift and go to state 60 ]
  ! MOD_OP          [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 62 ]
  ! CNE             [ shift and go to state 61 ]
  ! CLT             [ shift and go to state 64 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]


state 68

    (72) stmt -> ELSEIF expr . END_STATEMENT INDENT body DEDENT
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    END_STATEMENT   shift and go to state 102
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 69

    (28) expr -> IDENTIFIER LSBRACKET . expr RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 103
    boolean                        shift and go to state 3

state 70

    (76) stmt -> WHILE expr END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 104


state 71

    (62) while_stmt -> WHILE expr COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 105


state 72

    (17) display -> DISPLAY LPAREN expr . RPAREN
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    RPAREN          shift and go to state 106
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 73

    (22) const_decl -> IDENTIFIER CONST LSBRACKET . list_args RSBRACKET
    (25) list_args -> . expr
    (26) list_args -> . expr COMMA list_args
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 78
    boolean                        shift and go to state 3
    list_args                      shift and go to state 107

state 74

    (21) const_decl -> IDENTIFIER CONST expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 21 (const_decl -> IDENTIFIER CONST expr .)
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 75

    (20) assignment -> IDENTIFIER LSBRACKET expr . RSBRACKET ASSIGN expr
    (28) expr -> IDENTIFIER LSBRACKET expr . RSBRACKET
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    RSBRACKET       shift and go to state 108
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 76

    (23) func_call -> IDENTIFIER LPAREN list_args . RPAREN

    RPAREN          shift and go to state 109


state 77

    (24) func_call -> IDENTIFIER LPAREN RPAREN .

    COMMA           reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    ADD_OP          reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    SUB_OP          reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    MUL_OP          reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    DIV_OP          reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    MOD_OP          reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    OR              reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    AND             reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CEQ             reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CNE             reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CLT             reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CLE             reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CGT             reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    CGE             reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    END_STATEMENT   reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    COLON           reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)
    RSBRACKET       reduce using rule 24 (func_call -> IDENTIFIER LPAREN RPAREN .)


state 78

    (25) list_args -> expr .
    (26) list_args -> expr . COMMA list_args
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    RPAREN          reduce using rule 25 (list_args -> expr .)
    RSBRACKET       reduce using rule 25 (list_args -> expr .)
    COMMA           shift and go to state 110
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 79

    (19) assignment -> IDENTIFIER ASSIGN LSBRACKET . list_args RSBRACKET
    (25) list_args -> . expr
    (26) list_args -> . expr COMMA list_args
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 78
    boolean                        shift and go to state 3
    list_args                      shift and go to state 111

state 80

    (18) assignment -> IDENTIFIER ASSIGN expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 18 (assignment -> IDENTIFIER ASSIGN expr .)
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 81

    (3) program -> END_STATEMENT stmt program .

    $end            reduce using rule 3 (program -> END_STATEMENT stmt program .)


state 82

    (74) stmt -> FOR IDENTIFIER IN . RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> FOR IDENTIFIER IN . IDENTIFIER END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> FOR IDENTIFIER IN . RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> FOR IDENTIFIER IN . IDENTIFIER COLON END_STATEMENT INDENT body DEDENT

    RANGE           shift and go to state 112
    IDENTIFIER      shift and go to state 113


state 83

    (73) stmt -> ELSE expr END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 114


state 84

    (30) expr -> LPAREN expr RPAREN .

    ADD_OP          reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    SUB_OP          reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    MUL_OP          reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    DIV_OP          reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    MOD_OP          reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    CEQ             reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    CNE             reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    CLT             reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    CLE             reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    CGT             reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    CGE             reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    END_STATEMENT   reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    RSBRACKET       reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 30 (expr -> LPAREN expr RPAREN .)


state 85

    (55) func_def -> FUNCTION head END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 115


state 86

    (77) stmt -> FUNCTION IDENTIFIER LPAREN . func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> FUNCTION IDENTIFIER LPAREN . RPAREN END_STATEMENT INDENT body DEDENT
    (56) head -> IDENTIFIER LPAREN . func_def_args RPAREN COLON
    (57) head -> IDENTIFIER LPAREN . RPAREN COLON
    (58) func_def_args -> . IDENTIFIER
    (59) func_def_args -> . IDENTIFIER COMMA func_def_args

    RPAREN          shift and go to state 117
    IDENTIFIER      shift and go to state 118

    func_def_args                  shift and go to state 116

state 87

    (65) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> IF expr COLON . END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 119


state 88

    (71) stmt -> IF expr END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 120


state 89

    (43) expr -> expr AND expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    OR              reduce using rule 43 (expr -> expr AND expr .)
    AND             reduce using rule 43 (expr -> expr AND expr .)
    END_STATEMENT   reduce using rule 43 (expr -> expr AND expr .)
    COLON           reduce using rule 43 (expr -> expr AND expr .)
    RPAREN          reduce using rule 43 (expr -> expr AND expr .)
    RSBRACKET       reduce using rule 43 (expr -> expr AND expr .)
    COMMA           reduce using rule 43 (expr -> expr AND expr .)
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

  ! ADD_OP          [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! SUB_OP          [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! MUL_OP          [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! DIV_OP          [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! MOD_OP          [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! CEQ             [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! CNE             [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! CLT             [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! CLE             [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! CGT             [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! CGE             [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! OR              [ shift and go to state 66 ]
  ! AND             [ shift and go to state 54 ]


state 90

    (47) expr -> expr CLE expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    OR              reduce using rule 47 (expr -> expr CLE expr .)
    AND             reduce using rule 47 (expr -> expr CLE expr .)
    CEQ             reduce using rule 47 (expr -> expr CLE expr .)
    CNE             reduce using rule 47 (expr -> expr CLE expr .)
    CLT             reduce using rule 47 (expr -> expr CLE expr .)
    CLE             reduce using rule 47 (expr -> expr CLE expr .)
    CGT             reduce using rule 47 (expr -> expr CLE expr .)
    CGE             reduce using rule 47 (expr -> expr CLE expr .)
    END_STATEMENT   reduce using rule 47 (expr -> expr CLE expr .)
    COLON           reduce using rule 47 (expr -> expr CLE expr .)
    RPAREN          reduce using rule 47 (expr -> expr CLE expr .)
    RSBRACKET       reduce using rule 47 (expr -> expr CLE expr .)
    COMMA           reduce using rule 47 (expr -> expr CLE expr .)
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65

  ! ADD_OP          [ reduce using rule 47 (expr -> expr CLE expr .) ]
  ! SUB_OP          [ reduce using rule 47 (expr -> expr CLE expr .) ]
  ! MUL_OP          [ reduce using rule 47 (expr -> expr CLE expr .) ]
  ! DIV_OP          [ reduce using rule 47 (expr -> expr CLE expr .) ]
  ! MOD_OP          [ reduce using rule 47 (expr -> expr CLE expr .) ]
  ! OR              [ shift and go to state 66 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 62 ]
  ! CNE             [ shift and go to state 61 ]
  ! CLT             [ shift and go to state 64 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]


state 91

    (39) expr -> expr MUL_OP expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    ADD_OP          reduce using rule 39 (expr -> expr MUL_OP expr .)
    SUB_OP          reduce using rule 39 (expr -> expr MUL_OP expr .)
    MUL_OP          reduce using rule 39 (expr -> expr MUL_OP expr .)
    DIV_OP          reduce using rule 39 (expr -> expr MUL_OP expr .)
    MOD_OP          reduce using rule 39 (expr -> expr MUL_OP expr .)
    OR              reduce using rule 39 (expr -> expr MUL_OP expr .)
    AND             reduce using rule 39 (expr -> expr MUL_OP expr .)
    CEQ             reduce using rule 39 (expr -> expr MUL_OP expr .)
    CNE             reduce using rule 39 (expr -> expr MUL_OP expr .)
    CLT             reduce using rule 39 (expr -> expr MUL_OP expr .)
    CLE             reduce using rule 39 (expr -> expr MUL_OP expr .)
    CGT             reduce using rule 39 (expr -> expr MUL_OP expr .)
    CGE             reduce using rule 39 (expr -> expr MUL_OP expr .)
    END_STATEMENT   reduce using rule 39 (expr -> expr MUL_OP expr .)
    COLON           reduce using rule 39 (expr -> expr MUL_OP expr .)
    RPAREN          reduce using rule 39 (expr -> expr MUL_OP expr .)
    RSBRACKET       reduce using rule 39 (expr -> expr MUL_OP expr .)
    COMMA           reduce using rule 39 (expr -> expr MUL_OP expr .)

  ! ADD_OP          [ shift and go to state 63 ]
  ! SUB_OP          [ shift and go to state 59 ]
  ! MUL_OP          [ shift and go to state 56 ]
  ! DIV_OP          [ shift and go to state 60 ]
  ! MOD_OP          [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 62 ]
  ! CNE             [ shift and go to state 61 ]
  ! CLT             [ shift and go to state 64 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]


state 92

    (48) expr -> expr CGT expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    OR              reduce using rule 48 (expr -> expr CGT expr .)
    AND             reduce using rule 48 (expr -> expr CGT expr .)
    CEQ             reduce using rule 48 (expr -> expr CGT expr .)
    CNE             reduce using rule 48 (expr -> expr CGT expr .)
    CLT             reduce using rule 48 (expr -> expr CGT expr .)
    CLE             reduce using rule 48 (expr -> expr CGT expr .)
    CGT             reduce using rule 48 (expr -> expr CGT expr .)
    CGE             reduce using rule 48 (expr -> expr CGT expr .)
    END_STATEMENT   reduce using rule 48 (expr -> expr CGT expr .)
    COLON           reduce using rule 48 (expr -> expr CGT expr .)
    RPAREN          reduce using rule 48 (expr -> expr CGT expr .)
    RSBRACKET       reduce using rule 48 (expr -> expr CGT expr .)
    COMMA           reduce using rule 48 (expr -> expr CGT expr .)
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65

  ! ADD_OP          [ reduce using rule 48 (expr -> expr CGT expr .) ]
  ! SUB_OP          [ reduce using rule 48 (expr -> expr CGT expr .) ]
  ! MUL_OP          [ reduce using rule 48 (expr -> expr CGT expr .) ]
  ! DIV_OP          [ reduce using rule 48 (expr -> expr CGT expr .) ]
  ! MOD_OP          [ reduce using rule 48 (expr -> expr CGT expr .) ]
  ! OR              [ shift and go to state 66 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 62 ]
  ! CNE             [ shift and go to state 61 ]
  ! CLT             [ shift and go to state 64 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]


state 93

    (49) expr -> expr CGE expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    OR              reduce using rule 49 (expr -> expr CGE expr .)
    AND             reduce using rule 49 (expr -> expr CGE expr .)
    CEQ             reduce using rule 49 (expr -> expr CGE expr .)
    CNE             reduce using rule 49 (expr -> expr CGE expr .)
    CLT             reduce using rule 49 (expr -> expr CGE expr .)
    CLE             reduce using rule 49 (expr -> expr CGE expr .)
    CGT             reduce using rule 49 (expr -> expr CGE expr .)
    CGE             reduce using rule 49 (expr -> expr CGE expr .)
    END_STATEMENT   reduce using rule 49 (expr -> expr CGE expr .)
    COLON           reduce using rule 49 (expr -> expr CGE expr .)
    RPAREN          reduce using rule 49 (expr -> expr CGE expr .)
    RSBRACKET       reduce using rule 49 (expr -> expr CGE expr .)
    COMMA           reduce using rule 49 (expr -> expr CGE expr .)
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65

  ! ADD_OP          [ reduce using rule 49 (expr -> expr CGE expr .) ]
  ! SUB_OP          [ reduce using rule 49 (expr -> expr CGE expr .) ]
  ! MUL_OP          [ reduce using rule 49 (expr -> expr CGE expr .) ]
  ! DIV_OP          [ reduce using rule 49 (expr -> expr CGE expr .) ]
  ! MOD_OP          [ reduce using rule 49 (expr -> expr CGE expr .) ]
  ! OR              [ shift and go to state 66 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 62 ]
  ! CNE             [ shift and go to state 61 ]
  ! CLT             [ shift and go to state 64 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]


state 94

    (38) expr -> expr SUB_OP expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    ADD_OP          reduce using rule 38 (expr -> expr SUB_OP expr .)
    SUB_OP          reduce using rule 38 (expr -> expr SUB_OP expr .)
    OR              reduce using rule 38 (expr -> expr SUB_OP expr .)
    AND             reduce using rule 38 (expr -> expr SUB_OP expr .)
    CEQ             reduce using rule 38 (expr -> expr SUB_OP expr .)
    CNE             reduce using rule 38 (expr -> expr SUB_OP expr .)
    CLT             reduce using rule 38 (expr -> expr SUB_OP expr .)
    CLE             reduce using rule 38 (expr -> expr SUB_OP expr .)
    CGT             reduce using rule 38 (expr -> expr SUB_OP expr .)
    CGE             reduce using rule 38 (expr -> expr SUB_OP expr .)
    END_STATEMENT   reduce using rule 38 (expr -> expr SUB_OP expr .)
    COLON           reduce using rule 38 (expr -> expr SUB_OP expr .)
    RPAREN          reduce using rule 38 (expr -> expr SUB_OP expr .)
    RSBRACKET       reduce using rule 38 (expr -> expr SUB_OP expr .)
    COMMA           reduce using rule 38 (expr -> expr SUB_OP expr .)
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65

  ! MUL_OP          [ reduce using rule 38 (expr -> expr SUB_OP expr .) ]
  ! DIV_OP          [ reduce using rule 38 (expr -> expr SUB_OP expr .) ]
  ! MOD_OP          [ reduce using rule 38 (expr -> expr SUB_OP expr .) ]
  ! ADD_OP          [ shift and go to state 63 ]
  ! SUB_OP          [ shift and go to state 59 ]
  ! OR              [ shift and go to state 66 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 62 ]
  ! CNE             [ shift and go to state 61 ]
  ! CLT             [ shift and go to state 64 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]


state 95

    (40) expr -> expr DIV_OP expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    ADD_OP          reduce using rule 40 (expr -> expr DIV_OP expr .)
    SUB_OP          reduce using rule 40 (expr -> expr DIV_OP expr .)
    MUL_OP          reduce using rule 40 (expr -> expr DIV_OP expr .)
    DIV_OP          reduce using rule 40 (expr -> expr DIV_OP expr .)
    MOD_OP          reduce using rule 40 (expr -> expr DIV_OP expr .)
    OR              reduce using rule 40 (expr -> expr DIV_OP expr .)
    AND             reduce using rule 40 (expr -> expr DIV_OP expr .)
    CEQ             reduce using rule 40 (expr -> expr DIV_OP expr .)
    CNE             reduce using rule 40 (expr -> expr DIV_OP expr .)
    CLT             reduce using rule 40 (expr -> expr DIV_OP expr .)
    CLE             reduce using rule 40 (expr -> expr DIV_OP expr .)
    CGT             reduce using rule 40 (expr -> expr DIV_OP expr .)
    CGE             reduce using rule 40 (expr -> expr DIV_OP expr .)
    END_STATEMENT   reduce using rule 40 (expr -> expr DIV_OP expr .)
    COLON           reduce using rule 40 (expr -> expr DIV_OP expr .)
    RPAREN          reduce using rule 40 (expr -> expr DIV_OP expr .)
    RSBRACKET       reduce using rule 40 (expr -> expr DIV_OP expr .)
    COMMA           reduce using rule 40 (expr -> expr DIV_OP expr .)

  ! ADD_OP          [ shift and go to state 63 ]
  ! SUB_OP          [ shift and go to state 59 ]
  ! MUL_OP          [ shift and go to state 56 ]
  ! DIV_OP          [ shift and go to state 60 ]
  ! MOD_OP          [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 62 ]
  ! CNE             [ shift and go to state 61 ]
  ! CLT             [ shift and go to state 64 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]


state 96

    (45) expr -> expr CNE expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    OR              reduce using rule 45 (expr -> expr CNE expr .)
    AND             reduce using rule 45 (expr -> expr CNE expr .)
    CEQ             reduce using rule 45 (expr -> expr CNE expr .)
    CNE             reduce using rule 45 (expr -> expr CNE expr .)
    CLT             reduce using rule 45 (expr -> expr CNE expr .)
    CLE             reduce using rule 45 (expr -> expr CNE expr .)
    CGT             reduce using rule 45 (expr -> expr CNE expr .)
    CGE             reduce using rule 45 (expr -> expr CNE expr .)
    END_STATEMENT   reduce using rule 45 (expr -> expr CNE expr .)
    COLON           reduce using rule 45 (expr -> expr CNE expr .)
    RPAREN          reduce using rule 45 (expr -> expr CNE expr .)
    RSBRACKET       reduce using rule 45 (expr -> expr CNE expr .)
    COMMA           reduce using rule 45 (expr -> expr CNE expr .)
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65

  ! ADD_OP          [ reduce using rule 45 (expr -> expr CNE expr .) ]
  ! SUB_OP          [ reduce using rule 45 (expr -> expr CNE expr .) ]
  ! MUL_OP          [ reduce using rule 45 (expr -> expr CNE expr .) ]
  ! DIV_OP          [ reduce using rule 45 (expr -> expr CNE expr .) ]
  ! MOD_OP          [ reduce using rule 45 (expr -> expr CNE expr .) ]
  ! OR              [ shift and go to state 66 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 62 ]
  ! CNE             [ shift and go to state 61 ]
  ! CLT             [ shift and go to state 64 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]


state 97

    (44) expr -> expr CEQ expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    OR              reduce using rule 44 (expr -> expr CEQ expr .)
    AND             reduce using rule 44 (expr -> expr CEQ expr .)
    CEQ             reduce using rule 44 (expr -> expr CEQ expr .)
    CNE             reduce using rule 44 (expr -> expr CEQ expr .)
    CLT             reduce using rule 44 (expr -> expr CEQ expr .)
    CLE             reduce using rule 44 (expr -> expr CEQ expr .)
    CGT             reduce using rule 44 (expr -> expr CEQ expr .)
    CGE             reduce using rule 44 (expr -> expr CEQ expr .)
    END_STATEMENT   reduce using rule 44 (expr -> expr CEQ expr .)
    COLON           reduce using rule 44 (expr -> expr CEQ expr .)
    RPAREN          reduce using rule 44 (expr -> expr CEQ expr .)
    RSBRACKET       reduce using rule 44 (expr -> expr CEQ expr .)
    COMMA           reduce using rule 44 (expr -> expr CEQ expr .)
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65

  ! ADD_OP          [ reduce using rule 44 (expr -> expr CEQ expr .) ]
  ! SUB_OP          [ reduce using rule 44 (expr -> expr CEQ expr .) ]
  ! MUL_OP          [ reduce using rule 44 (expr -> expr CEQ expr .) ]
  ! DIV_OP          [ reduce using rule 44 (expr -> expr CEQ expr .) ]
  ! MOD_OP          [ reduce using rule 44 (expr -> expr CEQ expr .) ]
  ! OR              [ shift and go to state 66 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 62 ]
  ! CNE             [ shift and go to state 61 ]
  ! CLT             [ shift and go to state 64 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]


state 98

    (37) expr -> expr ADD_OP expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    ADD_OP          reduce using rule 37 (expr -> expr ADD_OP expr .)
    SUB_OP          reduce using rule 37 (expr -> expr ADD_OP expr .)
    OR              reduce using rule 37 (expr -> expr ADD_OP expr .)
    AND             reduce using rule 37 (expr -> expr ADD_OP expr .)
    CEQ             reduce using rule 37 (expr -> expr ADD_OP expr .)
    CNE             reduce using rule 37 (expr -> expr ADD_OP expr .)
    CLT             reduce using rule 37 (expr -> expr ADD_OP expr .)
    CLE             reduce using rule 37 (expr -> expr ADD_OP expr .)
    CGT             reduce using rule 37 (expr -> expr ADD_OP expr .)
    CGE             reduce using rule 37 (expr -> expr ADD_OP expr .)
    END_STATEMENT   reduce using rule 37 (expr -> expr ADD_OP expr .)
    COLON           reduce using rule 37 (expr -> expr ADD_OP expr .)
    RPAREN          reduce using rule 37 (expr -> expr ADD_OP expr .)
    RSBRACKET       reduce using rule 37 (expr -> expr ADD_OP expr .)
    COMMA           reduce using rule 37 (expr -> expr ADD_OP expr .)
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65

  ! MUL_OP          [ reduce using rule 37 (expr -> expr ADD_OP expr .) ]
  ! DIV_OP          [ reduce using rule 37 (expr -> expr ADD_OP expr .) ]
  ! MOD_OP          [ reduce using rule 37 (expr -> expr ADD_OP expr .) ]
  ! ADD_OP          [ shift and go to state 63 ]
  ! SUB_OP          [ shift and go to state 59 ]
  ! OR              [ shift and go to state 66 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 62 ]
  ! CNE             [ shift and go to state 61 ]
  ! CLT             [ shift and go to state 64 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]


state 99

    (46) expr -> expr CLT expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    OR              reduce using rule 46 (expr -> expr CLT expr .)
    AND             reduce using rule 46 (expr -> expr CLT expr .)
    CEQ             reduce using rule 46 (expr -> expr CLT expr .)
    CNE             reduce using rule 46 (expr -> expr CLT expr .)
    CLT             reduce using rule 46 (expr -> expr CLT expr .)
    CLE             reduce using rule 46 (expr -> expr CLT expr .)
    CGT             reduce using rule 46 (expr -> expr CLT expr .)
    CGE             reduce using rule 46 (expr -> expr CLT expr .)
    END_STATEMENT   reduce using rule 46 (expr -> expr CLT expr .)
    COLON           reduce using rule 46 (expr -> expr CLT expr .)
    RPAREN          reduce using rule 46 (expr -> expr CLT expr .)
    RSBRACKET       reduce using rule 46 (expr -> expr CLT expr .)
    COMMA           reduce using rule 46 (expr -> expr CLT expr .)
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65

  ! ADD_OP          [ reduce using rule 46 (expr -> expr CLT expr .) ]
  ! SUB_OP          [ reduce using rule 46 (expr -> expr CLT expr .) ]
  ! MUL_OP          [ reduce using rule 46 (expr -> expr CLT expr .) ]
  ! DIV_OP          [ reduce using rule 46 (expr -> expr CLT expr .) ]
  ! MOD_OP          [ reduce using rule 46 (expr -> expr CLT expr .) ]
  ! OR              [ shift and go to state 66 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 62 ]
  ! CNE             [ shift and go to state 61 ]
  ! CLT             [ shift and go to state 64 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]


state 100

    (41) expr -> expr MOD_OP expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    ADD_OP          reduce using rule 41 (expr -> expr MOD_OP expr .)
    SUB_OP          reduce using rule 41 (expr -> expr MOD_OP expr .)
    MUL_OP          reduce using rule 41 (expr -> expr MOD_OP expr .)
    DIV_OP          reduce using rule 41 (expr -> expr MOD_OP expr .)
    MOD_OP          reduce using rule 41 (expr -> expr MOD_OP expr .)
    OR              reduce using rule 41 (expr -> expr MOD_OP expr .)
    AND             reduce using rule 41 (expr -> expr MOD_OP expr .)
    CEQ             reduce using rule 41 (expr -> expr MOD_OP expr .)
    CNE             reduce using rule 41 (expr -> expr MOD_OP expr .)
    CLT             reduce using rule 41 (expr -> expr MOD_OP expr .)
    CLE             reduce using rule 41 (expr -> expr MOD_OP expr .)
    CGT             reduce using rule 41 (expr -> expr MOD_OP expr .)
    CGE             reduce using rule 41 (expr -> expr MOD_OP expr .)
    END_STATEMENT   reduce using rule 41 (expr -> expr MOD_OP expr .)
    COLON           reduce using rule 41 (expr -> expr MOD_OP expr .)
    RPAREN          reduce using rule 41 (expr -> expr MOD_OP expr .)
    RSBRACKET       reduce using rule 41 (expr -> expr MOD_OP expr .)
    COMMA           reduce using rule 41 (expr -> expr MOD_OP expr .)

  ! ADD_OP          [ shift and go to state 63 ]
  ! SUB_OP          [ shift and go to state 59 ]
  ! MUL_OP          [ shift and go to state 56 ]
  ! DIV_OP          [ shift and go to state 60 ]
  ! MOD_OP          [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! AND             [ shift and go to state 54 ]
  ! CEQ             [ shift and go to state 62 ]
  ! CNE             [ shift and go to state 61 ]
  ! CLT             [ shift and go to state 64 ]
  ! CLE             [ shift and go to state 55 ]
  ! CGT             [ shift and go to state 57 ]
  ! CGE             [ shift and go to state 58 ]


state 101

    (42) expr -> expr OR expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    OR              reduce using rule 42 (expr -> expr OR expr .)
    AND             reduce using rule 42 (expr -> expr OR expr .)
    END_STATEMENT   reduce using rule 42 (expr -> expr OR expr .)
    COLON           reduce using rule 42 (expr -> expr OR expr .)
    RPAREN          reduce using rule 42 (expr -> expr OR expr .)
    RSBRACKET       reduce using rule 42 (expr -> expr OR expr .)
    COMMA           reduce using rule 42 (expr -> expr OR expr .)
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58

  ! ADD_OP          [ reduce using rule 42 (expr -> expr OR expr .) ]
  ! SUB_OP          [ reduce using rule 42 (expr -> expr OR expr .) ]
  ! MUL_OP          [ reduce using rule 42 (expr -> expr OR expr .) ]
  ! DIV_OP          [ reduce using rule 42 (expr -> expr OR expr .) ]
  ! MOD_OP          [ reduce using rule 42 (expr -> expr OR expr .) ]
  ! CEQ             [ reduce using rule 42 (expr -> expr OR expr .) ]
  ! CNE             [ reduce using rule 42 (expr -> expr OR expr .) ]
  ! CLT             [ reduce using rule 42 (expr -> expr OR expr .) ]
  ! CLE             [ reduce using rule 42 (expr -> expr OR expr .) ]
  ! CGT             [ reduce using rule 42 (expr -> expr OR expr .) ]
  ! CGE             [ reduce using rule 42 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 66 ]
  ! AND             [ shift and go to state 54 ]


state 102

    (72) stmt -> ELSEIF expr END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 121


state 103

    (28) expr -> IDENTIFIER LSBRACKET expr . RSBRACKET
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    RSBRACKET       shift and go to state 122
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 104

    (76) stmt -> WHILE expr END_STATEMENT INDENT . body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 123
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13

state 105

    (62) while_stmt -> WHILE expr COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 125


state 106

    (17) display -> DISPLAY LPAREN expr RPAREN .

    END_STATEMENT   reduce using rule 17 (display -> DISPLAY LPAREN expr RPAREN .)


state 107

    (22) const_decl -> IDENTIFIER CONST LSBRACKET list_args . RSBRACKET

    RSBRACKET       shift and go to state 126


state 108

    (20) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET . ASSIGN expr
    (28) expr -> IDENTIFIER LSBRACKET expr RSBRACKET .

    ASSIGN          shift and go to state 127
    ADD_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    SUB_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MUL_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    DIV_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MOD_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    OR              reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    AND             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CEQ             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CNE             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLT             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLE             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGT             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGE             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    END_STATEMENT   reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)


state 109

    (23) func_call -> IDENTIFIER LPAREN list_args RPAREN .

    COMMA           reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    ADD_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    SUB_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    MUL_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    DIV_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    MOD_OP          reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    OR              reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    AND             reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CEQ             reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CNE             reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CLT             reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CLE             reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CGT             reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    CGE             reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    END_STATEMENT   reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    COLON           reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    RPAREN          reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)
    RSBRACKET       reduce using rule 23 (func_call -> IDENTIFIER LPAREN list_args RPAREN .)


state 110

    (26) list_args -> expr COMMA . list_args
    (25) list_args -> . expr
    (26) list_args -> . expr COMMA list_args
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 78
    boolean                        shift and go to state 3
    list_args                      shift and go to state 128

state 111

    (19) assignment -> IDENTIFIER ASSIGN LSBRACKET list_args . RSBRACKET

    RSBRACKET       shift and go to state 129


state 112

    (74) stmt -> FOR IDENTIFIER IN RANGE . LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> FOR IDENTIFIER IN RANGE . LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT

    LPAREN          shift and go to state 130


state 113

    (75) stmt -> FOR IDENTIFIER IN IDENTIFIER . END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> FOR IDENTIFIER IN IDENTIFIER . COLON END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 131
    COLON           shift and go to state 132


state 114

    (73) stmt -> ELSE expr END_STATEMENT INDENT . body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 133
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13

state 115

    (55) func_def -> FUNCTION head END_STATEMENT INDENT . body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 134
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13

state 116

    (77) stmt -> FUNCTION IDENTIFIER LPAREN func_def_args . RPAREN END_STATEMENT INDENT body DEDENT
    (56) head -> IDENTIFIER LPAREN func_def_args . RPAREN COLON

    RPAREN          shift and go to state 135


state 117

    (78) stmt -> FUNCTION IDENTIFIER LPAREN RPAREN . END_STATEMENT INDENT body DEDENT
    (57) head -> IDENTIFIER LPAREN RPAREN . COLON

    END_STATEMENT   shift and go to state 136
    COLON           shift and go to state 137


state 118

    (58) func_def_args -> IDENTIFIER .
    (59) func_def_args -> IDENTIFIER . COMMA func_def_args

    RPAREN          reduce using rule 58 (func_def_args -> IDENTIFIER .)
    COMMA           shift and go to state 138


state 119

    (65) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT
    (66) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT elseif_list
    (67) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> IF expr COLON END_STATEMENT . INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    INDENT          shift and go to state 139


state 120

    (71) stmt -> IF expr END_STATEMENT INDENT . body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 140
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13

state 121

    (72) stmt -> ELSEIF expr END_STATEMENT INDENT . body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 141
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13

state 122

    (28) expr -> IDENTIFIER LSBRACKET expr RSBRACKET .

    ADD_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    SUB_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MUL_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    DIV_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    MOD_OP          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    OR              reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    AND             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CEQ             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CNE             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLT             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CLE             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGT             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    CGE             reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    END_STATEMENT   reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    COLON           reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    RPAREN          reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    RSBRACKET       reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)
    COMMA           reduce using rule 28 (expr -> IDENTIFIER LSBRACKET expr RSBRACKET .)


state 123

    (76) stmt -> WHILE expr END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 142


state 124

    (60) body -> stmt .
    (61) body -> stmt . body
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    DEDENT          reduce using rule 60 (body -> stmt .)
    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 143
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13

state 125

    (62) while_stmt -> WHILE expr COLON END_STATEMENT INDENT . body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 144
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13

state 126

    (22) const_decl -> IDENTIFIER CONST LSBRACKET list_args RSBRACKET .

    END_STATEMENT   reduce using rule 22 (const_decl -> IDENTIFIER CONST LSBRACKET list_args RSBRACKET .)


state 127

    (20) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN . expr
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 145
    boolean                        shift and go to state 3

state 128

    (26) list_args -> expr COMMA list_args .

    RPAREN          reduce using rule 26 (list_args -> expr COMMA list_args .)
    RSBRACKET       reduce using rule 26 (list_args -> expr COMMA list_args .)


state 129

    (19) assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET .

    END_STATEMENT   reduce using rule 19 (assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET .)


state 130

    (74) stmt -> FOR IDENTIFIER IN RANGE LPAREN . expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN . expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    expr                           shift and go to state 146
    boolean                        shift and go to state 3
    func_call                      shift and go to state 26

state 131

    (75) stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 147


state 132

    (64) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 148


state 133

    (73) stmt -> ELSE expr END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 149


state 134

    (55) func_def -> FUNCTION head END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 150


state 135

    (77) stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN . END_STATEMENT INDENT body DEDENT
    (56) head -> IDENTIFIER LPAREN func_def_args RPAREN . COLON

    END_STATEMENT   shift and go to state 151
    COLON           shift and go to state 152


state 136

    (78) stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 153


state 137

    (57) head -> IDENTIFIER LPAREN RPAREN COLON .

    END_STATEMENT   reduce using rule 57 (head -> IDENTIFIER LPAREN RPAREN COLON .)


state 138

    (59) func_def_args -> IDENTIFIER COMMA . func_def_args
    (58) func_def_args -> . IDENTIFIER
    (59) func_def_args -> . IDENTIFIER COMMA func_def_args

    IDENTIFIER      shift and go to state 118

    func_def_args                  shift and go to state 154

state 139

    (65) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT
    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT elseif_list
    (67) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT . body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 155
    func_call                      shift and go to state 26
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    if_stmt                        shift and go to state 27

state 140

    (71) stmt -> IF expr END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 156


state 141

    (72) stmt -> ELSEIF expr END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 157


state 142

    (76) stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 76 (stmt -> WHILE expr END_STATEMENT INDENT body DEDENT .)


state 143

    (61) body -> stmt body .

    DEDENT          reduce using rule 61 (body -> stmt body .)


state 144

    (62) while_stmt -> WHILE expr COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 158


state 145

    (20) assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr .
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    END_STATEMENT   reduce using rule 20 (assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr .)
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 146

    (74) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr . COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr . COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    COMMA           shift and go to state 159
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 147

    (75) stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT . body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 160
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13

state 148

    (64) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 161


state 149

    (73) stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 73 (stmt -> ELSE expr END_STATEMENT INDENT body DEDENT .)


state 150

    (55) func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 55 (func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT .)


state 151

    (77) stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 162


state 152

    (56) head -> IDENTIFIER LPAREN func_def_args RPAREN COLON .

    END_STATEMENT   reduce using rule 56 (head -> IDENTIFIER LPAREN func_def_args RPAREN COLON .)


state 153

    (78) stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT . body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 163
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13

state 154

    (59) func_def_args -> IDENTIFIER COMMA func_def_args .

    RPAREN          reduce using rule 59 (func_def_args -> IDENTIFIER COMMA func_def_args .)


state 155

    (65) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT
    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT elseif_list
    (67) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body . DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT

    DEDENT          shift and go to state 164


state 156

    (71) stmt -> IF expr END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 71 (stmt -> IF expr END_STATEMENT INDENT body DEDENT .)


state 157

    (72) stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 72 (stmt -> ELSEIF expr END_STATEMENT INDENT body DEDENT .)


state 158

    (62) while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 62 (while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT .)


state 159

    (74) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA . expr RPAREN END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA . expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    expr                           shift and go to state 165
    boolean                        shift and go to state 3
    func_call                      shift and go to state 26

state 160

    (75) stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 166


state 161

    (64) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT . body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 167
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13

state 162

    (77) stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT . body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 168
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13

state 163

    (78) stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 169


state 164

    (65) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .
    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT . elseif_list
    (67) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT . elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT . ELSE COLON END_STATEMENT INDENT body DEDENT
    (69) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT
    (70) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    IF              reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            shift and go to state 171
    ELSEIF          shift and go to state 172

  ! ELSEIF          [ reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .) ]
  ! ELSE            [ reduce using rule 65 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT .) ]

    elseif_list                    shift and go to state 170

state 165

    (74) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr . RPAREN END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr . RPAREN COLON END_STATEMENT INDENT body DEDENT
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    RPAREN          shift and go to state 173
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 166

    (75) stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 75 (stmt -> FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT .)


state 167

    (64) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 174


state 168

    (77) stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 175


state 169

    (78) stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 78 (stmt -> FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT .)


state 170

    (66) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .
    (67) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list . ELSE COLON END_STATEMENT INDENT body DEDENT

  ! shift/reduce conflict for ELSE resolved as shift
    IF              reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    ELSEIF          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FOR             reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    WHILE           reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FUNCTION        reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    IDENTIFIER      reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    STRING          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    LPAREN          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    INTEGER         reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DOUBLE          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    SUB_OP          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    RETURN          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DISPLAY         reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    BREAK           reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    CONTINUE        reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    TRUE            reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FALSE           reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DEDENT          reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    END_STATEMENT   reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    $end            reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    ELSE            shift and go to state 176

  ! ELSE            [ reduce using rule 66 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .) ]


state 171

    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE . COLON END_STATEMENT INDENT body DEDENT

    COLON           shift and go to state 177


state 172

    (69) elseif_list -> ELSEIF . expr COLON END_STATEMENT INDENT body DEDENT
    (70) elseif_list -> ELSEIF . expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IDENTIFIER      shift and go to state 38
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    func_call                      shift and go to state 26
    expr                           shift and go to state 178
    boolean                        shift and go to state 3

state 173

    (74) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN . END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN . COLON END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 179
    COLON           shift and go to state 180


state 174

    (64) for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 64 (for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT .)


state 175

    (77) stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 77 (stmt -> FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT .)


state 176

    (67) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE . COLON END_STATEMENT INDENT body DEDENT

    COLON           shift and go to state 181


state 177

    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 182


state 178

    (69) elseif_list -> ELSEIF expr . COLON END_STATEMENT INDENT body DEDENT
    (70) elseif_list -> ELSEIF expr . COLON END_STATEMENT INDENT body DEDENT elseif_list
    (37) expr -> expr . ADD_OP expr
    (38) expr -> expr . SUB_OP expr
    (39) expr -> expr . MUL_OP expr
    (40) expr -> expr . DIV_OP expr
    (41) expr -> expr . MOD_OP expr
    (42) expr -> expr . OR expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . CEQ expr
    (45) expr -> expr . CNE expr
    (46) expr -> expr . CLT expr
    (47) expr -> expr . CLE expr
    (48) expr -> expr . CGT expr
    (49) expr -> expr . CGE expr

    COLON           shift and go to state 183
    ADD_OP          shift and go to state 63
    SUB_OP          shift and go to state 59
    MUL_OP          shift and go to state 56
    DIV_OP          shift and go to state 60
    MOD_OP          shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 54
    CEQ             shift and go to state 62
    CNE             shift and go to state 61
    CLT             shift and go to state 64
    CLE             shift and go to state 55
    CGT             shift and go to state 57
    CGE             shift and go to state 58


state 179

    (74) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 184


state 180

    (63) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 185


state 181

    (67) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON . END_STATEMENT INDENT body DEDENT

    END_STATEMENT   shift and go to state 186


state 182

    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 187


state 183

    (69) elseif_list -> ELSEIF expr COLON . END_STATEMENT INDENT body DEDENT
    (70) elseif_list -> ELSEIF expr COLON . END_STATEMENT INDENT body DEDENT elseif_list

    END_STATEMENT   shift and go to state 188


state 184

    (74) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT . body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 189
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13

state 185

    (63) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 190


state 186

    (67) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT . INDENT body DEDENT

    INDENT          shift and go to state 191


state 187

    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT . body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 192
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13

state 188

    (69) elseif_list -> ELSEIF expr COLON END_STATEMENT . INDENT body DEDENT
    (70) elseif_list -> ELSEIF expr COLON END_STATEMENT . INDENT body DEDENT elseif_list

    INDENT          shift and go to state 193


state 189

    (74) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 194


state 190

    (63) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT . body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 195
    func_call                      shift and go to state 26
    if_stmt                        shift and go to state 27
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13

state 191

    (67) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT . body DEDENT
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 196
    func_call                      shift and go to state 26
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    if_stmt                        shift and go to state 27

state 192

    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 197


state 193

    (69) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT . body DEDENT
    (70) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT . body DEDENT elseif_list
    (60) body -> . stmt
    (61) body -> . stmt body
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (71) stmt -> . IF expr END_STATEMENT INDENT body DEDENT
    (72) stmt -> . ELSEIF expr END_STATEMENT INDENT body DEDENT
    (73) stmt -> . ELSE expr END_STATEMENT INDENT body DEDENT
    (74) stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT
    (75) stmt -> . FOR IDENTIFIER IN IDENTIFIER END_STATEMENT INDENT body DEDENT
    (76) stmt -> . WHILE expr END_STATEMENT INDENT body DEDENT
    (77) stmt -> . FUNCTION IDENTIFIER LPAREN func_def_args RPAREN END_STATEMENT INDENT body DEDENT
    (78) stmt -> . FUNCTION IDENTIFIER LPAREN RPAREN END_STATEMENT INDENT body DEDENT
    (6) simple_stmt -> . small_stmt END_STATEMENT
    (51) compound_stmt -> . func_def
    (52) compound_stmt -> . if_stmt
    (53) compound_stmt -> . while_stmt
    (54) compound_stmt -> . for_stmt
    (7) small_stmt -> . assignment
    (8) small_stmt -> . const_decl
    (9) small_stmt -> . expr
    (10) small_stmt -> . return_stmt
    (11) small_stmt -> . display
    (12) small_stmt -> . loop_stmt
    (55) func_def -> . FUNCTION head END_STATEMENT INDENT body DEDENT
    (65) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT
    (66) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list
    (67) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT
    (68) if_stmt -> . IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT
    (62) while_stmt -> . WHILE expr COLON END_STATEMENT INDENT body DEDENT
    (63) for_stmt -> . FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT
    (64) for_stmt -> . FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT
    (18) assignment -> . IDENTIFIER ASSIGN expr
    (19) assignment -> . IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET
    (20) assignment -> . IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr
    (21) const_decl -> . IDENTIFIER CONST expr
    (22) const_decl -> . IDENTIFIER CONST LSBRACKET list_args RSBRACKET
    (27) expr -> . IDENTIFIER
    (28) expr -> . IDENTIFIER LSBRACKET expr RSBRACKET
    (29) expr -> . STRING
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . func_call
    (32) expr -> . INTEGER
    (33) expr -> . DOUBLE
    (34) expr -> . boolean
    (37) expr -> . expr ADD_OP expr
    (38) expr -> . expr SUB_OP expr
    (39) expr -> . expr MUL_OP expr
    (40) expr -> . expr DIV_OP expr
    (41) expr -> . expr MOD_OP expr
    (42) expr -> . expr OR expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr CEQ expr
    (45) expr -> . expr CNE expr
    (46) expr -> . expr CLT expr
    (47) expr -> . expr CLE expr
    (48) expr -> . expr CGT expr
    (49) expr -> . expr CGE expr
    (50) expr -> . SUB_OP expr
    (13) return_stmt -> . RETURN
    (14) return_stmt -> . RETURN expr
    (17) display -> . DISPLAY LPAREN expr RPAREN
    (15) loop_stmt -> . BREAK
    (16) loop_stmt -> . CONTINUE
    (23) func_call -> . IDENTIFIER LPAREN list_args RPAREN
    (24) func_call -> . IDENTIFIER LPAREN RPAREN
    (35) boolean -> . TRUE
    (36) boolean -> . FALSE

    IF              shift and go to state 25
    ELSEIF          shift and go to state 35
    ELSE            shift and go to state 20
    FOR             shift and go to state 16
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 24
    IDENTIFIER      shift and go to state 12
    STRING          shift and go to state 15
    LPAREN          shift and go to state 22
    INTEGER         shift and go to state 6
    DOUBLE          shift and go to state 34
    SUB_OP          shift and go to state 30
    RETURN          shift and go to state 5
    DISPLAY         shift and go to state 10
    BREAK           shift and go to state 31
    CONTINUE        shift and go to state 33
    TRUE            shift and go to state 7
    FALSE           shift and go to state 23

    body                           shift and go to state 198
    func_call                      shift and go to state 26
    func_def                       shift and go to state 8
    simple_stmt                    shift and go to state 17
    expr                           shift and go to state 28
    for_stmt                       shift and go to state 29
    stmt                           shift and go to state 124
    display                        shift and go to state 36
    small_stmt                     shift and go to state 1
    while_stmt                     shift and go to state 32
    boolean                        shift and go to state 3
    return_stmt                    shift and go to state 4
    loop_stmt                      shift and go to state 21
    assignment                     shift and go to state 18
    const_decl                     shift and go to state 9
    compound_stmt                  shift and go to state 13
    if_stmt                        shift and go to state 27

state 194

    (74) stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 74 (stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN END_STATEMENT INDENT body DEDENT .)


state 195

    (63) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 199


state 196

    (67) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body . DEDENT

    DEDENT          shift and go to state 200


state 197

    (68) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 68 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT .)


state 198

    (69) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body . DEDENT
    (70) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body . DEDENT elseif_list

    DEDENT          shift and go to state 201


state 199

    (63) for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 63 (for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT .)


state 200

    (67) if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .

    IF              reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    ELSEIF          reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    ELSE            reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 67 (if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT .)


state 201

    (69) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .
    (70) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT . elseif_list
    (69) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT
    (70) elseif_list -> . ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSE            reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    END_STATEMENT   reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    IF              reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    FOR             reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    WHILE           reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    FUNCTION        reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    IDENTIFIER      reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    STRING          reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    LPAREN          reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    INTEGER         reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    DOUBLE          reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    SUB_OP          reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    RETURN          reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    DISPLAY         reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    BREAK           reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    CONTINUE        reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    TRUE            reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    FALSE           reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    $end            reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    DEDENT          reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .)
    ELSEIF          shift and go to state 172

  ! ELSEIF          [ reduce using rule 69 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT .) ]

    elseif_list                    shift and go to state 202

state 202

    (70) elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .

    ELSE            reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    END_STATEMENT   reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    IF              reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    ELSEIF          reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FOR             reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    WHILE           reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FUNCTION        reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    IDENTIFIER      reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    STRING          reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    LPAREN          reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    INTEGER         reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DOUBLE          reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    SUB_OP          reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    RETURN          reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DISPLAY         reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    BREAK           reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    CONTINUE        reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    TRUE            reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    FALSE           reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    $end            reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)
    DEDENT          reduce using rule 70 (elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 164 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 164 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 170 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 201 resolved as shift
