
# generated\parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xe6\xee0|\xe7\xa0\xf0\xff\x8a\xac\x8b\xb3\x98\xd9\x88c'
    
_lr_action_items = {'END_STATEMENT':([1,2,4,5,6,7,9,11,12,14,15,18,21,24,26,27,29,30,32,33,34,37,38,42,43,69,70,72,74,76,79,80,83,84,86,87,88,89,90,91,92,93,98,107,109,116,127,130,132,133,],[35,-27,-65,-9,-11,-34,-7,-32,-26,-29,48,-6,-10,-61,-28,-35,-8,-14,-15,-33,-30,-27,-26,-13,-12,-19,-18,94,-20,-22,-17,-16,-31,-63,-62,104,-38,-64,-37,-39,-36,-40,-21,115,-55,-54,131,134,136,137,]),'RETURN':([0,13,16,17,19,20,28,31,35,48,82,94,99,104,113,115,118,121,125,131,134,136,137,139,142,143,144,145,],[6,-4,-49,-3,6,-52,-50,-51,-5,6,6,6,-53,6,-60,6,-68,-69,-67,6,6,6,6,-71,-70,-72,-66,-73,]),'DIV_OP':([2,4,7,11,12,14,24,26,27,29,33,34,37,38,40,41,42,43,50,51,56,69,70,71,74,76,78,79,80,83,84,86,88,89,90,91,92,93,98,128,],[-27,-65,-34,-32,-26,-29,-61,-28,-35,62,-33,-30,-27,-26,62,-30,-65,62,62,-30,-30,-65,62,62,62,-22,62,-65,62,-31,-63,-30,-38,62,62,-39,62,-40,-21,-30,]),'ARRAY_CELL':([0,3,6,13,16,17,19,20,22,25,28,31,35,36,39,45,46,47,48,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,82,94,97,99,104,113,115,118,121,123,125,131,134,136,137,139,142,143,144,145,],[2,37,37,-4,-49,-3,2,-52,37,37,-50,-51,-5,37,37,37,37,37,2,-42,37,-41,-46,37,-48,37,37,37,-44,-43,37,-45,37,-47,2,2,37,-53,2,-60,2,-68,-69,37,-67,2,2,2,2,-71,-70,-72,-66,-73,]),'WHILE':([0,13,16,17,19,20,28,31,35,48,82,94,99,104,113,115,118,121,125,131,134,136,137,139,142,143,144,145,],[3,-4,-49,-3,3,-52,-50,-51,-5,3,3,3,-53,3,-60,3,-68,-69,-67,3,3,3,3,-71,-70,-72,-66,-73,]),'CONST':([12,],[45,]),'TRUE':([0,3,6,13,16,17,19,20,22,25,28,31,35,36,39,45,46,47,48,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,82,94,97,99,104,113,115,118,121,123,125,131,134,136,137,139,142,143,144,145,],[7,7,7,-4,-49,-3,7,-52,7,7,-50,-51,-5,7,7,7,7,7,7,-42,7,-41,-46,7,-48,7,7,7,-44,-43,7,-45,7,-47,7,7,7,-53,7,-60,7,-68,-69,7,-67,7,7,7,7,-71,-70,-72,-66,-73,]),'RPAREN':([4,7,11,14,24,26,27,33,34,37,38,46,50,51,71,75,76,77,78,83,84,85,86,88,89,90,91,92,93,98,102,103,108,117,124,],[-65,-34,-32,-29,-61,-28,-35,-33,-30,-27,-26,76,83,84,83,-23,-22,98,-25,-31,-63,101,-62,-38,-64,-37,-39,-36,-40,-21,110,-56,-24,-57,129,]),'CGE':([2,4,7,11,12,14,24,26,27,29,33,34,37,38,40,41,42,43,50,51,56,69,70,71,74,76,78,79,80,83,84,86,88,89,90,91,92,93,98,128,],[-27,-65,-34,-32,-26,-29,-61,-28,-35,59,-33,-30,-27,-26,59,-30,-65,59,59,-30,-30,-65,59,59,59,-22,59,-65,59,-31,-63,-30,-38,59,-37,-39,-36,-40,-21,-30,]),'COLON':([4,7,11,14,24,26,27,33,34,37,38,41,56,76,83,84,86,88,89,90,91,92,93,96,98,101,110,122,126,128,129,],[-65,-34,-32,-29,-61,-28,-35,-33,-30,-27,-26,72,87,-22,-31,-63,-62,-38,-64,-37,-39,-36,-40,107,-21,109,116,127,130,132,133,]),'CEQ':([2,4,7,11,12,14,24,26,27,29,33,34,37,38,40,41,42,43,50,51,56,69,70,71,74,76,78,79,80,83,84,86,88,89,90,91,92,93,98,128,],[-27,-65,-34,-32,-26,-29,-61,-28,-35,64,-33,-30,-27,-26,64,-30,-65,64,64,-30,-30,-65,64,64,64,-22,64,-65,64,-31,-63,-30,-38,64,-37,-39,-36,-40,-21,-30,]),'ADD_OP':([2,4,7,11,12,14,24,26,27,29,33,34,37,38,40,41,42,43,50,51,56,69,70,71,74,76,78,79,80,83,84,86,88,89,90,91,92,93,98,128,],[-27,-65,-34,-32,-26,-29,-61,-28,-35,65,-33,-30,-27,-26,65,-30,-65,65,65,-30,-30,-65,65,65,65,-22,65,-65,65,-31,-63,-30,-38,65,-37,-39,-36,-40,-21,-30,]),'INTEGER':([0,3,6,13,16,17,19,20,22,25,28,31,35,36,39,45,46,47,48,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,82,94,97,99,104,106,113,115,118,119,121,123,125,131,134,136,137,139,142,143,144,145,],[11,11,11,-4,-49,-3,11,-52,11,11,-50,-51,-5,11,11,11,11,11,11,-42,11,-41,-46,11,-48,11,11,11,-44,-43,11,-45,11,-47,11,11,11,-53,11,114,-60,11,-68,124,-69,11,-67,11,11,11,11,-71,-70,-72,-66,-73,]),'IDENTIFIER':([0,3,6,8,13,16,17,19,20,22,23,25,28,31,35,36,39,45,46,47,48,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,73,82,85,94,97,99,104,111,113,115,118,121,123,125,131,134,136,137,139,142,143,144,145,],[12,38,38,44,-4,-49,-3,12,-52,38,52,38,-50,-51,-5,38,38,38,38,38,12,-42,38,-41,-46,38,-48,38,38,38,-44,-43,38,-45,38,-47,96,12,103,12,38,-53,12,103,-60,12,-68,-69,38,-67,12,12,12,12,-71,-70,-72,-66,-73,]),'CGT':([2,4,7,11,12,14,24,26,27,29,33,34,37,38,40,41,42,43,50,51,56,69,70,71,74,76,78,79,80,83,84,86,88,89,90,91,92,93,98,128,],[-27,-65,-34,-32,-26,-29,-61,-28,-35,68,-33,-30,-27,-26,68,-30,-65,68,68,-30,-30,-65,68,68,68,-22,68,-65,68,-31,-63,-30,-38,68,-37,-39,-36,-40,-21,-30,]),'$end':([10,13,16,17,19,20,28,31,35,49,99,113,118,121,125,139,142,143,144,145,],[0,-4,-49,-3,-1,-52,-50,-51,-5,-2,-53,-60,-68,-69,-67,-71,-70,-72,-66,-73,]),'FUNCTION':([0,13,16,17,19,20,28,31,35,48,82,94,99,104,113,115,118,121,125,131,134,136,137,139,142,143,144,145,],[23,-4,-49,-3,23,-52,-50,-51,-5,23,23,23,-53,23,-60,23,-68,-69,-67,23,23,23,23,-71,-70,-72,-66,-73,]),'END':([13,16,17,20,28,31,35,81,82,99,100,105,112,113,118,120,121,125,135,138,139,140,141,142,143,144,145,],[-4,-49,-3,-52,-50,-51,-5,99,-58,-53,-59,113,118,-60,-68,125,-69,-67,139,142,-71,143,144,-70,-72,-66,-73,]),'FOR':([0,13,16,17,19,20,28,31,35,48,82,94,99,104,113,115,118,121,125,131,134,136,137,139,142,143,144,145,],[8,-4,-49,-3,8,-52,-50,-51,-5,8,8,8,-53,8,-60,8,-68,-69,-67,8,8,8,8,-71,-70,-72,-66,-73,]),'CLE':([2,4,7,11,12,14,24,26,27,29,33,34,37,38,40,41,42,43,50,51,56,69,70,71,74,76,78,79,80,83,84,86,88,89,90,91,92,93,98,128,],[-27,-65,-34,-32,-26,-29,-61,-28,-35,57,-33,-30,-27,-26,57,-30,-65,57,57,-30,-30,-65,57,57,57,-22,57,-65,57,-31,-63,-30,-38,57,-37,-39,-36,-40,-21,-30,]),'ELSE':([118,121,143,145,],[122,126,-72,-73,]),'RANGE':([73,],[95,]),'CNE':([2,4,7,11,12,14,24,26,27,29,33,34,37,38,40,41,42,43,50,51,56,69,70,71,74,76,78,79,80,83,84,86,88,89,90,91,92,93,98,128,],[-27,-65,-34,-32,-26,-29,-61,-28,-35,63,-33,-30,-27,-26,63,-30,-65,63,63,-30,-30,-65,63,63,63,-22,63,-65,63,-31,-63,-30,-38,63,-37,-39,-36,-40,-21,-30,]),'LPAREN':([0,3,6,12,13,16,17,19,20,22,25,28,31,35,36,38,39,45,46,47,48,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,82,94,95,97,99,104,113,115,118,121,123,125,131,134,136,137,139,142,143,144,145,],[22,39,22,46,-4,-49,-3,22,-52,22,39,-50,-51,-5,22,46,39,22,22,22,22,85,-42,39,-41,-46,22,-48,22,22,22,-44,-43,22,-45,22,-47,22,22,106,22,-53,22,-60,22,-68,-69,39,-67,22,22,22,22,-71,-70,-72,-66,-73,]),'IN':([44,],[73,]),'CLT':([2,4,7,11,12,14,24,26,27,29,33,34,37,38,40,41,42,43,50,51,56,69,70,71,74,76,78,79,80,83,84,86,88,89,90,91,92,93,98,128,],[-27,-65,-34,-32,-26,-29,-61,-28,-35,66,-33,-30,-27,-26,66,-30,-65,66,66,-30,-30,-65,66,66,66,-22,66,-65,66,-31,-63,-30,-38,66,-37,-39,-36,-40,-21,-30,]),'IF':([0,13,16,17,19,20,28,31,35,48,82,94,99,104,113,115,118,121,125,131,134,136,137,139,142,143,144,145,],[25,-4,-49,-3,25,-52,-50,-51,-5,25,25,25,-53,25,-60,25,-68,-69,-67,25,25,25,25,-71,-70,-72,-66,-73,]),'AND':([4,7,11,14,24,26,27,33,34,37,38,42,69,76,79,83,84,86,88,89,90,91,92,93,98,],[-65,-34,-32,-29,53,-28,-35,-33,-30,-27,-26,-65,-65,-22,-65,-31,-63,-62,-38,-64,-37,-39,-36,-40,-21,]),'MUL_OP':([2,4,7,11,12,14,24,26,27,29,33,34,37,38,40,41,42,43,50,51,56,69,70,71,74,76,78,79,80,83,84,86,88,89,90,91,92,93,98,128,],[-27,-65,-34,-32,-26,-29,-61,-28,-35,58,-33,-30,-27,-26,58,-30,-65,58,58,-30,-30,-65,58,58,58,-22,58,-65,58,-31,-63,-30,-38,58,58,-39,58,-40,-21,-30,]),'FALSE':([0,3,6,13,16,17,19,20,22,25,28,31,35,36,39,45,46,47,48,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,82,94,97,99,104,113,115,118,121,123,125,131,134,136,137,139,142,143,144,145,],[27,27,27,-4,-49,-3,27,-52,27,27,-50,-51,-5,27,27,27,27,27,27,-42,27,-41,-46,27,-48,27,27,27,-44,-43,27,-45,27,-47,27,27,27,-53,27,-60,27,-68,-69,27,-67,27,27,27,27,-71,-70,-72,-66,-73,]),'DOUBLE':([0,3,6,13,16,17,19,20,22,25,28,31,35,36,39,45,46,47,48,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,82,94,97,99,104,113,115,118,121,123,125,131,134,136,137,139,142,143,144,145,],[33,33,33,-4,-49,-3,33,-52,33,33,-50,-51,-5,33,33,33,33,33,33,-42,33,-41,-46,33,-48,33,33,33,-44,-43,33,-45,33,-47,33,33,33,-53,33,-60,33,-68,-69,33,-67,33,33,33,33,-71,-70,-72,-66,-73,]),'SUB_OP':([2,4,7,11,12,14,24,26,27,29,33,34,37,38,40,41,42,43,50,51,56,69,70,71,74,76,78,79,80,83,84,86,88,89,90,91,92,93,98,128,],[-27,-65,-34,-32,-26,-29,-61,-28,-35,61,-33,-30,-27,-26,61,-30,-65,61,61,-30,-30,-65,61,61,61,-22,61,-65,61,-31,-63,-30,-38,61,-37,-39,-36,-40,-21,-30,]),'ASSIGN':([2,12,],[36,47,]),'BREAK':([0,13,16,17,19,20,28,31,35,48,82,94,99,104,113,115,118,121,125,131,134,136,137,139,142,143,144,145,],[30,-4,-49,-3,30,-52,-50,-51,-5,30,30,30,-53,30,-60,30,-68,-69,-67,30,30,30,30,-71,-70,-72,-66,-73,]),'CONTINUE':([0,13,16,17,19,20,28,31,35,48,82,94,99,104,113,115,118,121,125,131,134,136,137,139,142,143,144,145,],[32,-4,-49,-3,32,-52,-50,-51,-5,32,32,32,-53,32,-60,32,-68,-69,-67,32,32,32,32,-71,-70,-72,-66,-73,]),'ELSEIF':([118,143,],[123,123,]),'COMMA':([4,7,11,14,24,26,27,33,34,37,38,75,76,78,83,84,86,88,89,90,91,92,93,98,103,114,],[-65,-34,-32,-29,-61,-28,-35,-33,-30,-27,-26,97,-22,-25,-31,-63,-62,-38,-64,-37,-39,-36,-40,-21,111,119,]),'MOD_OP':([2,4,7,11,12,14,24,26,27,29,33,34,37,38,40,41,42,43,50,51,56,69,70,71,74,76,78,79,80,83,84,86,88,89,90,91,92,93,98,128,],[-27,-65,-34,-32,-26,-29,-61,-28,-35,67,-33,-30,-27,-26,67,-30,-65,67,67,-30,-30,-65,67,67,67,-22,67,-65,67,-31,-63,-30,-38,67,67,-39,67,-40,-21,-30,]),'OR':([4,7,11,14,24,26,27,33,34,37,38,42,69,76,79,83,84,86,88,89,90,91,92,93,98,],[-65,-34,-32,-29,55,-28,-35,-33,-30,-27,-26,-65,-65,-22,-65,-31,-63,-62,-38,-64,-37,-39,-36,-40,-21,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'elseif_list':([118,143,],[121,145,]),'small_stmt':([0,19,48,82,94,104,115,131,134,136,137,],[1,1,1,1,1,1,1,1,1,1,1,]),'comb_op':([24,],[54,]),'boolean':([0,3,6,19,22,25,36,39,45,46,47,48,54,58,60,61,62,65,67,82,94,97,104,115,123,131,134,136,137,],[4,4,42,4,4,4,69,4,4,4,79,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'return_stmt':([0,19,48,82,94,104,115,131,134,136,137,],[5,5,5,5,5,5,5,5,5,5,5,]),'arg':([46,97,],[75,75,]),'comp_op':([29,40,43,50,70,71,74,78,80,88,89,90,91,92,93,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'const_decl':([0,19,48,82,94,104,115,131,134,136,137,],[9,9,9,9,9,9,9,9,9,9,9,]),'program':([0,19,],[10,49,]),'p_func_def_args':([85,111,],[102,117,]),'compound_stmt':([0,19,48,82,94,104,115,131,134,136,137,],[13,13,13,13,13,13,13,13,13,13,13,]),'arithmetic':([0,3,6,19,22,25,36,39,45,46,47,48,54,58,60,61,62,65,67,82,94,97,104,115,123,131,134,136,137,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'body':([48,82,94,104,115,131,134,136,137,],[81,100,105,112,120,135,138,140,141,]),'head':([0,19,48,82,94,104,115,131,134,136,137,],[15,15,15,15,15,15,15,15,15,15,15,]),'func_def':([0,19,48,82,94,104,115,131,134,136,137,],[16,16,16,16,16,16,16,16,16,16,16,]),'simple_stmt':([0,19,48,82,94,104,115,131,134,136,137,],[17,17,17,17,17,17,17,17,17,17,17,]),'assignment':([0,19,48,82,94,104,115,131,134,136,137,],[18,18,18,18,18,18,18,18,18,18,18,]),'stmt':([0,19,48,82,94,104,115,131,134,136,137,],[19,19,82,82,82,82,82,82,82,82,82,]),'for_stmt':([0,19,48,82,94,104,115,131,134,136,137,],[20,20,20,20,20,20,20,20,20,20,20,]),'loop_stmt':([0,19,48,82,94,104,115,131,134,136,137,],[21,21,21,21,21,21,21,21,21,21,21,]),'condition':([0,3,6,19,22,25,36,39,45,46,47,48,54,58,60,61,62,65,67,82,94,97,104,115,123,131,134,136,137,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'func_call':([0,3,6,19,22,25,36,39,45,46,47,48,54,58,60,61,62,65,67,82,94,97,104,115,123,131,134,136,137,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'if_stmt':([0,19,48,82,94,104,115,131,134,136,137,],[28,28,28,28,28,28,28,28,28,28,28,]),'expr':([0,3,6,19,22,25,36,39,45,46,47,48,54,58,60,61,62,65,67,82,94,97,104,115,123,131,134,136,137,],[29,40,43,29,50,40,70,71,74,78,80,29,40,88,89,90,91,92,93,29,29,78,29,29,40,29,29,29,29,]),'while_stmt':([0,19,48,82,94,104,115,131,134,136,137,],[31,31,31,31,31,31,31,31,31,31,31,]),'cond_list':([0,3,6,19,22,25,36,39,45,46,47,48,54,58,60,61,62,65,67,82,94,97,104,115,123,131,134,136,137,],[34,41,34,34,51,56,34,51,34,34,34,34,86,34,34,34,34,34,34,34,34,34,34,34,128,34,34,34,34,]),'call_args':([46,97,],[77,108,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt','program',1,'p_program','.\\parser.py',15),
  ('program -> stmt program','program',2,'p_program','.\\parser.py',16),
  ('stmt -> simple_stmt','stmt',1,'p_stmt_type','.\\parser.py',23),
  ('stmt -> compound_stmt','stmt',1,'p_stmt_type','.\\parser.py',24),
  ('simple_stmt -> small_stmt END_STATEMENT','simple_stmt',2,'p_simple_stmt','.\\parser.py',28),
  ('small_stmt -> assignment','small_stmt',1,'p_small_stmt','.\\parser.py',32),
  ('small_stmt -> const_decl','small_stmt',1,'p_small_stmt','.\\parser.py',33),
  ('small_stmt -> expr','small_stmt',1,'p_small_stmt','.\\parser.py',34),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','.\\parser.py',35),
  ('small_stmt -> loop_stmt','small_stmt',1,'p_small_stmt','.\\parser.py',36),
  ('return_stmt -> RETURN','return_stmt',1,'p_','.\\parser.py',40),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_','.\\parser.py',41),
  ('return_stmt -> RETURN boolean','return_stmt',2,'p_','.\\parser.py',42),
  ('loop_stmt -> BREAK','loop_stmt',1,'p_loop_stmt','.\\parser.py',49),
  ('loop_stmt -> CONTINUE','loop_stmt',1,'p_loop_stmt','.\\parser.py',50),
  ('assignment -> IDENTIFIER ASSIGN expr','assignment',3,'p_assign','.\\parser.py',54),
  ('assignment -> IDENTIFIER ASSIGN boolean','assignment',3,'p_assign','.\\parser.py',55),
  ('assignment -> ARRAY_CELL ASSIGN expr','assignment',3,'p_assign','.\\parser.py',56),
  ('assignment -> ARRAY_CELL ASSIGN boolean','assignment',3,'p_assign','.\\parser.py',57),
  ('const_decl -> IDENTIFIER CONST expr','const_decl',3,'p_const','.\\parser.py',61),
  ('func_call -> IDENTIFIER LPAREN call_args RPAREN','func_call',4,'p_func_call','.\\parser.py',65),
  ('func_call -> IDENTIFIER LPAREN RPAREN','func_call',3,'p_func_call','.\\parser.py',66),
  ('call_args -> arg','call_args',1,'p_call_args','.\\parser.py',73),
  ('call_args -> arg COMMA call_args','call_args',3,'p_call_args','.\\parser.py',74),
  ('arg -> expr','arg',1,'p_arg','.\\parser.py',81),
  ('expr -> IDENTIFIER','expr',1,'p_expr_id','.\\parser.py',85),
  ('expr -> ARRAY_CELL','expr',1,'p_expr_id','.\\parser.py',86),
  ('expr -> func_call','expr',1,'p_expr','.\\parser.py',90),
  ('expr -> arithmetic','expr',1,'p_expr','.\\parser.py',91),
  ('expr -> cond_list','expr',1,'p_expr','.\\parser.py',92),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','.\\parser.py',93),
  ('expr -> INTEGER','expr',1,'p_expr_num','.\\parser.py',100),
  ('expr -> DOUBLE','expr',1,'p_expr_num','.\\parser.py',101),
  ('boolean -> TRUE','boolean',1,'p_bool','.\\parser.py',105),
  ('boolean -> FALSE','boolean',1,'p_bool','.\\parser.py',106),
  ('arithmetic -> expr ADD_OP expr','arithmetic',3,'p_arithmetic','.\\parser.py',110),
  ('arithmetic -> expr SUB_OP expr','arithmetic',3,'p_arithmetic','.\\parser.py',111),
  ('arithmetic -> expr MUL_OP expr','arithmetic',3,'p_arithmetic','.\\parser.py',112),
  ('arithmetic -> expr DIV_OP expr','arithmetic',3,'p_arithmetic','.\\parser.py',113),
  ('arithmetic -> expr MOD_OP expr','arithmetic',3,'p_arithmetic','.\\parser.py',114),
  ('comb_op -> OR','comb_op',1,'p_comb_op','.\\parser.py',120),
  ('comb_op -> AND','comb_op',1,'p_comb_op','.\\parser.py',121),
  ('comp_op -> CEQ','comp_op',1,'p_comp_op','.\\parser.py',125),
  ('comp_op -> CNE','comp_op',1,'p_comp_op','.\\parser.py',126),
  ('comp_op -> CLT','comp_op',1,'p_comp_op','.\\parser.py',127),
  ('comp_op -> CLE','comp_op',1,'p_comp_op','.\\parser.py',128),
  ('comp_op -> CGT','comp_op',1,'p_comp_op','.\\parser.py',129),
  ('comp_op -> CGE','comp_op',1,'p_comp_op','.\\parser.py',130),
  ('compound_stmt -> func_def','compound_stmt',1,'p_compound_stmt','.\\parser.py',134),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','.\\parser.py',135),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','.\\parser.py',136),
  ('compound_stmt -> for_stmt','compound_stmt',1,'p_compound_stmt','.\\parser.py',137),
  ('func_def -> head END_STATEMENT body END','func_def',4,'p_func_def','.\\parser.py',141),
  ('head -> FUNCTION IDENTIFIER LPAREN p_func_def_args RPAREN COLON','head',6,'p_head','.\\parser.py',145),
  ('head -> FUNCTION IDENTIFIER LPAREN RPAREN COLON','head',5,'p_head','.\\parser.py',146),
  ('p_func_def_args -> IDENTIFIER','p_func_def_args',1,'p_func_def_args','.\\parser.py',153),
  ('p_func_def_args -> IDENTIFIER COMMA p_func_def_args','p_func_def_args',3,'p_func_def_args','.\\parser.py',154),
  ('body -> stmt','body',1,'p_body','.\\parser.py',161),
  ('body -> stmt body','body',2,'p_body','.\\parser.py',162),
  ('while_stmt -> WHILE cond_list COLON END_STATEMENT body END','while_stmt',6,'p_while','.\\parser.py',169),
  ('cond_list -> condition','cond_list',1,'p_cond_list','.\\parser.py',173),
  ('cond_list -> condition comb_op cond_list','cond_list',3,'p_cond_list','.\\parser.py',174),
  ('cond_list -> LPAREN cond_list RPAREN','cond_list',3,'p_cond_list_paren','.\\parser.py',181),
  ('condition -> expr comp_op expr','condition',3,'p_cond','.\\parser.py',185),
  ('condition -> boolean','condition',1,'p_cond','.\\parser.py',186),
  ('for_stmt -> FOR IDENTIFIER IN RANGE LPAREN INTEGER COMMA INTEGER RPAREN COLON END_STATEMENT body END','for_stmt',13,'p_for','.\\parser.py',193),
  ('for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT body END','for_stmt',8,'p_for','.\\parser.py',194),
  ('if_stmt -> IF cond_list COLON END_STATEMENT body END','if_stmt',6,'p_if','.\\parser.py',205),
  ('if_stmt -> IF cond_list COLON END_STATEMENT body END elseif_list','if_stmt',7,'p_if','.\\parser.py',206),
  ('if_stmt -> IF cond_list COLON END_STATEMENT body END elseif_list ELSE COLON END_STATEMENT body END','if_stmt',12,'p_if','.\\parser.py',207),
  ('if_stmt -> IF cond_list COLON END_STATEMENT body END ELSE COLON END_STATEMENT body END','if_stmt',11,'p_if','.\\parser.py',208),
  ('elseif_list -> ELSEIF cond_list COLON END_STATEMENT body END','elseif_list',6,'p_elseif','.\\parser.py',219),
  ('elseif_list -> ELSEIF cond_list COLON END_STATEMENT body END elseif_list','elseif_list',7,'p_elseif','.\\parser.py',220),
]
