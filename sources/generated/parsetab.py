
# generated\parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = "5\xd6\xb3\x86\xbdj')s\x04\xf6Pq\x80\xf5|"
    
_lr_action_items = {'DEDENT':([13,16,17,20,26,29,34,97,98,110,111,114,118,119,122,124,125,129,143,145,146,147,148,149,150,151,152,],[-5,-49,-4,-52,-50,-51,-6,110,-58,-53,-59,119,122,-60,-63,129,-64,-62,147,149,150,-66,151,-61,-65,-67,-68,]),'FUNCTION':([0,13,14,16,17,19,20,26,29,34,43,84,98,103,109,110,119,121,122,125,129,139,141,142,144,147,149,150,151,152,],[1,-5,1,-49,-4,1,-52,-50,-51,-6,1,1,1,1,1,-53,-60,1,-63,-64,-62,1,1,1,1,-66,-61,-65,-67,-68,]),'RETURN':([0,13,14,16,17,19,20,26,29,34,43,84,98,103,109,110,119,121,122,125,129,139,141,142,144,147,149,150,151,152,],[6,-5,6,-49,-4,6,-52,-50,-51,-6,6,6,6,6,6,-53,-60,6,-63,-64,-62,6,6,6,6,-66,-61,-65,-67,-68,]),'LSBRACKET':([12,35,42,],[40,64,72,]),'DIV_OP':([4,7,8,12,15,23,25,27,31,35,36,37,45,46,67,68,70,71,73,75,77,78,79,80,81,82,83,88,92,93,102,115,117,123,132,],[-31,-29,-32,-24,-26,-33,-28,55,-30,-24,55,55,55,55,55,55,-21,55,55,-27,-36,55,55,55,-37,55,-38,55,-25,-20,-25,55,55,55,55,]),'WHILE':([0,13,14,16,17,19,20,26,29,34,43,84,98,103,109,110,119,121,122,125,129,139,141,142,144,147,149,150,151,152,],[3,-5,3,-49,-4,3,-52,-50,-51,-6,3,3,3,3,3,-53,-60,3,-63,-64,-62,3,3,3,3,-66,-61,-65,-67,-68,]),'COLON':([4,7,8,15,23,25,31,35,36,46,70,75,77,78,79,80,81,82,83,86,91,93,99,102,126,128,130,132,],[-31,-29,-32,-26,-33,-28,-30,-24,65,76,-21,-27,-36,-39,-40,-35,-37,-34,-38,100,105,-20,112,-25,131,133,134,136,]),'CONST':([12,],[39,]),'TRUE':([0,3,6,13,14,16,17,19,20,22,24,26,29,34,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,72,84,94,98,103,104,106,109,110,119,120,121,122,125,127,129,139,141,142,144,147,149,150,151,152,],[8,8,8,-5,8,-49,-4,8,-52,8,8,-50,-51,-6,8,8,8,8,8,-42,-46,8,-47,-48,8,8,8,8,-44,-43,8,-45,8,-41,8,8,8,8,8,8,8,8,8,-53,-60,8,8,-63,-64,8,-62,8,8,8,8,-66,-61,-65,-67,-68,]),'RPAREN':([4,7,8,15,23,25,31,35,41,45,63,69,70,71,75,77,78,79,80,81,82,83,85,87,93,102,107,113,123,],[-31,-29,-32,-26,-33,-28,-30,-24,70,75,86,93,-21,-22,-27,-36,-39,-40,-35,-37,-34,-38,99,-56,-20,-25,-23,-57,128,]),'CGE':([4,7,8,12,15,23,25,27,31,35,36,37,45,46,67,68,70,71,73,75,77,78,79,80,81,82,83,88,92,93,102,115,117,123,132,],[-31,-29,-32,-24,-26,-33,-28,51,-30,-24,51,51,51,51,51,51,-21,51,51,-27,-36,51,51,-35,-37,-34,-38,51,-25,-20,-25,51,51,51,51,]),'COMMA':([4,7,8,15,23,25,31,35,70,71,75,77,78,79,80,81,82,83,87,93,102,115,],[-31,-29,-32,-26,-33,-28,-30,-24,-21,94,-27,-36,-39,-40,-35,-37,-34,-38,101,-20,-25,120,]),'CEQ':([4,7,8,12,15,23,25,27,31,35,36,37,45,46,67,68,70,71,73,75,77,78,79,80,81,82,83,88,92,93,102,115,117,123,132,],[-31,-29,-32,-24,-26,-33,-28,57,-30,-24,57,57,57,57,57,57,-21,57,57,-27,-36,57,57,-35,-37,-34,-38,57,-25,-20,-25,57,57,57,57,]),'ADD_OP':([4,7,8,12,15,23,25,27,31,35,36,37,45,46,67,68,70,71,73,75,77,78,79,80,81,82,83,88,92,93,102,115,117,123,132,],[-31,-29,-32,-24,-26,-33,-28,58,-30,-24,58,58,58,58,58,58,-21,58,58,-27,-36,58,58,-35,-37,-34,-38,58,-25,-20,-25,58,58,58,58,]),'INTEGER':([0,3,6,13,14,16,17,19,20,22,24,26,29,34,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,72,84,94,98,103,104,106,109,110,119,120,121,122,125,127,129,139,141,142,144,147,149,150,151,152,],[7,7,7,-5,7,-49,-4,7,-52,7,7,-50,-51,-6,7,7,7,7,7,-42,-46,7,-47,-48,7,7,7,7,-44,-43,7,-45,7,-41,7,7,7,7,7,7,7,7,7,-53,-60,7,7,-63,-64,7,-62,7,7,7,7,-66,-61,-65,-67,-68,]),'IDENTIFIER':([0,1,3,6,9,13,14,16,17,19,20,22,24,26,29,34,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,66,72,84,94,98,101,103,104,106,109,110,119,120,121,122,125,127,129,139,141,142,144,147,149,150,151,152,],[12,33,35,35,38,-5,12,-49,-4,12,-52,35,35,-50,-51,-6,35,35,35,35,12,-42,-46,35,-47,-48,35,35,35,35,-44,-43,35,-45,35,-41,87,35,91,35,12,35,12,87,12,35,35,12,-53,-60,35,12,-63,-64,35,-62,12,12,12,12,-66,-61,-65,-67,-68,]),'CGT':([4,7,8,12,15,23,25,27,31,35,36,37,45,46,67,68,70,71,73,75,77,78,79,80,81,82,83,88,92,93,102,115,117,123,132,],[-31,-29,-32,-24,-26,-33,-28,50,-30,-24,50,50,50,50,50,50,-21,50,50,-27,-36,50,50,-35,-37,-34,-38,50,-25,-20,-25,50,50,50,50,]),'$end':([11,13,16,17,19,20,26,29,34,44,74,110,119,122,125,129,147,149,150,151,152,],[0,-5,-49,-4,-1,-52,-50,-51,-6,-2,-3,-53,-60,-63,-64,-62,-66,-61,-65,-67,-68,]),'END_STATEMENT':([0,2,4,5,6,7,8,10,12,13,15,16,17,18,19,20,21,23,25,26,27,28,29,30,31,32,34,35,37,43,65,67,70,73,75,76,77,78,79,80,81,82,83,92,93,100,102,105,108,110,112,117,119,122,125,129,131,133,134,136,147,149,150,151,152,],[14,34,-31,-10,-12,-29,-32,-8,-24,-5,-26,-49,-4,-7,14,-52,-11,-33,-28,-50,-9,-14,-51,-15,-30,62,-6,-24,-13,14,89,-19,-21,-16,-27,96,-36,-39,-40,-35,-37,-34,-38,-25,-20,-55,-25,116,-17,-53,-54,-18,-60,-63,-64,-62,135,137,138,140,-66,-61,-65,-67,-68,]),'STRING':([0,3,6,13,14,16,17,19,20,22,24,26,29,34,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,72,84,94,98,103,104,106,109,110,119,120,121,122,125,127,129,139,141,142,144,147,149,150,151,152,],[15,15,15,-5,15,-49,-4,15,-52,15,15,-50,-51,-6,15,15,15,15,15,-42,-46,15,-47,-48,15,15,15,15,-44,-43,15,-45,15,-41,15,15,15,15,15,15,15,15,15,-53,-60,15,15,-63,-64,15,-62,15,15,15,15,-66,-61,-65,-67,-68,]),'FOR':([0,13,14,16,17,19,20,26,29,34,43,84,98,103,109,110,119,121,122,125,129,139,141,142,144,147,149,150,151,152,],[9,-5,9,-49,-4,9,-52,-50,-51,-6,9,9,9,9,9,-53,-60,9,-63,-64,-62,9,9,9,9,-66,-61,-65,-67,-68,]),'CLE':([4,7,8,12,15,23,25,27,31,35,36,37,45,46,67,68,70,71,73,75,77,78,79,80,81,82,83,88,92,93,102,115,117,123,132,],[-31,-29,-32,-24,-26,-33,-28,48,-30,-24,48,48,48,48,48,48,-21,48,48,-27,-36,48,48,-35,-37,-34,-38,48,-25,-20,-25,48,48,48,48,]),'ELSE':([122,125,151,152,],[126,130,-67,-68,]),'RANGE':([66,],[90,]),'CNE':([4,7,8,12,15,23,25,27,31,35,36,37,45,46,67,68,70,71,73,75,77,78,79,80,81,82,83,88,92,93,102,115,117,123,132,],[-31,-29,-32,-24,-26,-33,-28,56,-30,-24,56,56,56,56,56,56,-21,56,56,-27,-36,56,56,-35,-37,-34,-38,56,-25,-20,-25,56,56,56,56,]),'LPAREN':([0,3,6,12,13,14,16,17,19,20,22,24,26,29,33,34,35,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,72,84,90,94,98,103,104,106,109,110,119,120,121,122,125,127,129,139,141,142,144,147,149,150,151,152,],[22,22,22,41,-5,22,-49,-4,22,-52,22,22,-50,-51,63,-6,41,22,22,22,22,22,-42,-46,22,-47,-48,22,22,22,22,-44,-43,22,-45,22,-41,22,22,22,104,22,22,22,22,22,22,-53,-60,22,22,-63,-64,22,-62,22,22,22,22,-66,-61,-65,-67,-68,]),'IN':([38,],[66,]),'CLT':([4,7,8,12,15,23,25,27,31,35,36,37,45,46,67,68,70,71,73,75,77,78,79,80,81,82,83,88,92,93,102,115,117,123,132,],[-31,-29,-32,-24,-26,-33,-28,59,-30,-24,59,59,59,59,59,59,-21,59,59,-27,-36,59,59,-35,-37,-34,-38,59,-25,-20,-25,59,59,59,59,]),'INDENT':([62,89,96,116,135,137,138,140,],[84,103,109,121,139,141,142,144,]),'IF':([0,13,14,16,17,19,20,26,29,34,43,84,98,103,109,110,119,121,122,125,129,139,141,142,144,147,149,150,151,152,],[24,-5,24,-49,-4,24,-52,-50,-51,-6,24,24,24,24,24,-53,-60,24,-63,-64,-62,24,24,24,24,-66,-61,-65,-67,-68,]),'AND':([4,7,8,12,15,23,25,27,31,35,36,37,45,46,67,68,70,71,73,75,77,78,79,80,81,82,83,88,92,93,102,115,117,123,132,],[-31,-29,-32,-24,-26,-33,-28,47,-30,-24,47,47,47,47,47,47,-21,47,47,-27,-36,47,47,-35,-37,-34,-38,47,-25,-20,-25,47,47,47,47,]),'MUL_OP':([4,7,8,12,15,23,25,27,31,35,36,37,45,46,67,68,70,71,73,75,77,78,79,80,81,82,83,88,92,93,102,115,117,123,132,],[-31,-29,-32,-24,-26,-33,-28,49,-30,-24,49,49,49,49,49,49,-21,49,49,-27,-36,49,49,49,-37,49,-38,49,-25,-20,-25,49,49,49,49,]),'FALSE':([0,3,6,13,14,16,17,19,20,22,24,26,29,34,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,72,84,94,98,103,104,106,109,110,119,120,121,122,125,127,129,139,141,142,144,147,149,150,151,152,],[23,23,23,-5,23,-49,-4,23,-52,23,23,-50,-51,-6,23,23,23,23,23,-42,-46,23,-47,-48,23,23,23,23,-44,-43,23,-45,23,-41,23,23,23,23,23,23,23,23,23,-53,-60,23,23,-63,-64,23,-62,23,23,23,23,-66,-61,-65,-67,-68,]),'DOUBLE':([0,3,6,13,14,16,17,19,20,22,24,26,29,34,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,72,84,94,98,103,104,106,109,110,119,120,121,122,125,127,129,139,141,142,144,147,149,150,151,152,],[31,31,31,-5,31,-49,-4,31,-52,31,31,-50,-51,-6,31,31,31,31,31,-42,-46,31,-47,-48,31,31,31,31,-44,-43,31,-45,31,-41,31,31,31,31,31,31,31,31,31,-53,-60,31,31,-63,-64,31,-62,31,31,31,31,-66,-61,-65,-67,-68,]),'SUB_OP':([4,7,8,12,15,23,25,27,31,35,36,37,45,46,67,68,70,71,73,75,77,78,79,80,81,82,83,88,92,93,102,115,117,123,132,],[-31,-29,-32,-24,-26,-33,-28,54,-30,-24,54,54,54,54,54,54,-21,54,54,-27,-36,54,54,-35,-37,-34,-38,54,-25,-20,-25,54,54,54,54,]),'ASSIGN':([12,92,],[42,106,]),'BREAK':([0,13,14,16,17,19,20,26,29,34,43,84,98,103,109,110,119,121,122,125,129,139,141,142,144,147,149,150,151,152,],[28,-5,28,-49,-4,28,-52,-50,-51,-6,28,28,28,28,28,-53,-60,28,-63,-64,-62,28,28,28,28,-66,-61,-65,-67,-68,]),'RSBRACKET':([4,7,8,15,23,25,31,35,68,70,71,75,77,78,79,80,81,82,83,88,93,95,102,107,],[-31,-29,-32,-26,-33,-28,-30,-24,92,-21,-22,-27,-36,-39,-40,-35,-37,-34,-38,102,-20,108,-25,-23,]),'CONTINUE':([0,13,14,16,17,19,20,26,29,34,43,84,98,103,109,110,119,121,122,125,129,139,141,142,144,147,149,150,151,152,],[30,-5,30,-49,-4,30,-52,-50,-51,-6,30,30,30,30,30,-53,-60,30,-63,-64,-62,30,30,30,30,-66,-61,-65,-67,-68,]),'ELSEIF':([122,151,],[127,127,]),'MOD_OP':([4,7,8,12,15,23,25,27,31,35,36,37,45,46,67,68,70,71,73,75,77,78,79,80,81,82,83,88,92,93,102,115,117,123,132,],[-31,-29,-32,-24,-26,-33,-28,60,-30,-24,60,60,60,60,60,60,-21,60,60,-27,-36,60,60,60,-37,60,-38,60,-25,-20,-25,60,60,60,60,]),'OR':([4,7,8,12,15,23,25,27,31,35,36,37,45,46,67,68,70,71,73,75,77,78,79,80,81,82,83,88,92,93,102,115,117,123,132,],[-31,-29,-32,-24,-26,-33,-28,61,-30,-24,61,61,61,61,61,61,-21,61,61,-27,-36,61,61,-35,-37,-34,-38,61,-25,-20,-25,61,61,61,61,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'func_def_args':([63,101,],[85,113,]),'elseif_list':([122,151,],[125,152,]),'small_stmt':([0,14,19,43,84,98,103,109,121,139,141,142,144,],[2,2,2,2,2,2,2,2,2,2,2,2,2,]),'comb_op':([27,36,37,45,46,67,68,71,73,77,78,79,80,81,82,83,88,115,117,123,132,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'boolean':([0,3,6,14,19,22,24,39,40,41,42,43,49,52,53,54,55,58,60,64,72,84,94,98,103,104,106,109,120,121,127,139,141,142,144,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'return_stmt':([0,14,19,43,84,98,103,109,121,139,141,142,144,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'list_args':([41,72,94,],[69,95,107,]),'comp_op':([27,36,37,45,46,67,68,71,73,77,78,79,80,81,82,83,88,115,117,123,132,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'const_decl':([0,14,19,43,84,98,103,109,121,139,141,142,144,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'program':([0,19,43,],[11,44,74,]),'compound_stmt':([0,14,19,43,84,98,103,109,121,139,141,142,144,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'body':([84,98,103,109,121,139,141,142,144,],[97,111,114,118,124,143,145,146,148,]),'head':([1,],[32,]),'func_def':([0,14,19,43,84,98,103,109,121,139,141,142,144,],[16,16,16,16,16,16,16,16,16,16,16,16,16,]),'simple_stmt':([0,14,19,43,84,98,103,109,121,139,141,142,144,],[17,17,17,17,17,17,17,17,17,17,17,17,17,]),'assignment':([0,14,19,43,84,98,103,109,121,139,141,142,144,],[18,18,18,18,18,18,18,18,18,18,18,18,18,]),'stmt':([0,14,19,43,84,98,103,109,121,139,141,142,144,],[19,43,19,19,98,98,98,98,98,98,98,98,98,]),'for_stmt':([0,14,19,43,84,98,103,109,121,139,141,142,144,],[20,20,20,20,20,20,20,20,20,20,20,20,20,]),'loop_stmt':([0,14,19,43,84,98,103,109,121,139,141,142,144,],[21,21,21,21,21,21,21,21,21,21,21,21,21,]),'func_call':([0,3,6,14,19,22,24,39,40,41,42,43,49,52,53,54,55,58,60,64,72,84,94,98,103,104,106,109,120,121,127,139,141,142,144,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'if_stmt':([0,14,19,43,84,98,103,109,121,139,141,142,144,],[26,26,26,26,26,26,26,26,26,26,26,26,26,]),'expr':([0,3,6,14,19,22,24,39,40,41,42,43,49,52,53,54,55,58,60,64,72,84,94,98,103,104,106,109,120,121,127,139,141,142,144,],[27,36,37,27,27,45,46,67,68,71,73,27,77,78,79,80,81,82,83,88,71,27,71,27,27,115,117,27,123,27,132,27,27,27,27,]),'while_stmt':([0,14,19,43,84,98,103,109,121,139,141,142,144,],[29,29,29,29,29,29,29,29,29,29,29,29,29,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt','program',1,'p_program','./parser.py',17),
  ('program -> stmt program','program',2,'p_program','./parser.py',18),
  ('program -> END_STATEMENT stmt program','program',3,'p_program','./parser.py',19),
  ('stmt -> simple_stmt','stmt',1,'p_stmt_type','./parser.py',28),
  ('stmt -> compound_stmt','stmt',1,'p_stmt_type','./parser.py',29),
  ('simple_stmt -> small_stmt END_STATEMENT','simple_stmt',2,'p_simple_stmt','./parser.py',33),
  ('small_stmt -> assignment','small_stmt',1,'p_small_stmt','./parser.py',37),
  ('small_stmt -> const_decl','small_stmt',1,'p_small_stmt','./parser.py',38),
  ('small_stmt -> expr','small_stmt',1,'p_small_stmt','./parser.py',39),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','./parser.py',40),
  ('small_stmt -> loop_stmt','small_stmt',1,'p_small_stmt','./parser.py',41),
  ('return_stmt -> RETURN','return_stmt',1,'p_','./parser.py',45),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_','./parser.py',46),
  ('loop_stmt -> BREAK','loop_stmt',1,'p_break','./parser.py',53),
  ('loop_stmt -> CONTINUE','loop_stmt',1,'p_continue','./parser.py',57),
  ('assignment -> IDENTIFIER ASSIGN expr','assignment',3,'p_assign','./parser.py',61),
  ('assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET','assignment',5,'p_assign','./parser.py',62),
  ('assignment -> IDENTIFIER LSBRACKET expr RSBRACKET ASSIGN expr','assignment',6,'p_assign','./parser.py',63),
  ('const_decl -> IDENTIFIER CONST expr','const_decl',3,'p_const','./parser.py',72),
  ('func_call -> IDENTIFIER LPAREN list_args RPAREN','func_call',4,'p_func_call','./parser.py',77),
  ('func_call -> IDENTIFIER LPAREN RPAREN','func_call',3,'p_func_call','./parser.py',78),
  ('list_args -> expr','list_args',1,'p_list_args','./parser.py',85),
  ('list_args -> expr COMMA list_args','list_args',3,'p_list_args','./parser.py',86),
  ('expr -> IDENTIFIER','expr',1,'p_expr_id','./parser.py',94),
  ('expr -> IDENTIFIER LSBRACKET expr RSBRACKET','expr',4,'p_expr_id','./parser.py',95),
  ('expr -> STRING','expr',1,'p_expr_string','./parser.py',102),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','./parser.py',106),
  ('expr -> func_call','expr',1,'p_expr','./parser.py',107),
  ('expr -> INTEGER','expr',1,'p_expr_num','./parser.py',114),
  ('expr -> DOUBLE','expr',1,'p_expr_num','./parser.py',115),
  ('expr -> boolean','expr',1,'p_expr_bool','./parser.py',119),
  ('boolean -> TRUE','boolean',1,'p_true','./parser.py',123),
  ('boolean -> FALSE','boolean',1,'p_false','./parser.py',127),
  ('expr -> expr ADD_OP expr','expr',3,'p_op','./parser.py',131),
  ('expr -> expr SUB_OP expr','expr',3,'p_op','./parser.py',132),
  ('expr -> expr MUL_OP expr','expr',3,'p_op','./parser.py',133),
  ('expr -> expr DIV_OP expr','expr',3,'p_op','./parser.py',134),
  ('expr -> expr MOD_OP expr','expr',3,'p_op','./parser.py',135),
  ('expr -> expr comb_op expr','expr',3,'p_op','./parser.py',136),
  ('expr -> expr comp_op expr','expr',3,'p_op','./parser.py',137),
  ('comb_op -> OR','comb_op',1,'p_comb_op','./parser.py',141),
  ('comb_op -> AND','comb_op',1,'p_comb_op','./parser.py',142),
  ('comp_op -> CEQ','comp_op',1,'p_comp_op','./parser.py',146),
  ('comp_op -> CNE','comp_op',1,'p_comp_op','./parser.py',147),
  ('comp_op -> CLT','comp_op',1,'p_comp_op','./parser.py',148),
  ('comp_op -> CLE','comp_op',1,'p_comp_op','./parser.py',149),
  ('comp_op -> CGT','comp_op',1,'p_comp_op','./parser.py',150),
  ('comp_op -> CGE','comp_op',1,'p_comp_op','./parser.py',151),
  ('compound_stmt -> func_def','compound_stmt',1,'p_compound_stmt','./parser.py',155),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','./parser.py',156),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','./parser.py',157),
  ('compound_stmt -> for_stmt','compound_stmt',1,'p_compound_stmt','./parser.py',158),
  ('func_def -> FUNCTION head END_STATEMENT INDENT body DEDENT','func_def',6,'p_func_def','./parser.py',162),
  ('head -> IDENTIFIER LPAREN func_def_args RPAREN COLON','head',5,'p_head','./parser.py',166),
  ('head -> IDENTIFIER LPAREN RPAREN COLON','head',4,'p_head','./parser.py',167),
  ('func_def_args -> IDENTIFIER','func_def_args',1,'p_func_def_args','./parser.py',174),
  ('func_def_args -> IDENTIFIER COMMA func_def_args','func_def_args',3,'p_func_def_args','./parser.py',175),
  ('body -> stmt','body',1,'p_body','./parser.py',182),
  ('body -> stmt body','body',2,'p_body','./parser.py',183),
  ('while_stmt -> WHILE expr COLON END_STATEMENT INDENT body DEDENT','while_stmt',7,'p_while','./parser.py',190),
  ('for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT INDENT body DEDENT','for_stmt',14,'p_for','./parser.py',195),
  ('for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT INDENT body DEDENT','for_stmt',9,'p_for','./parser.py',196),
  ('if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT','if_stmt',7,'p_if','./parser.py',207),
  ('if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list','if_stmt',8,'p_if','./parser.py',208),
  ('if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT elseif_list ELSE COLON END_STATEMENT INDENT body DEDENT','if_stmt',14,'p_if','./parser.py',209),
  ('if_stmt -> IF expr COLON END_STATEMENT INDENT body DEDENT ELSE COLON END_STATEMENT INDENT body DEDENT','if_stmt',13,'p_if','./parser.py',210),
  ('elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT','elseif_list',7,'p_elseif','./parser.py',221),
  ('elseif_list -> ELSEIF expr COLON END_STATEMENT INDENT body DEDENT elseif_list','elseif_list',8,'p_elseif','./parser.py',222),
]
