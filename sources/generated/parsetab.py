
# generated\parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'XZ\xb5\xf0\xab\x82\xbb\x9a\x11\x92W-\xa4\xdb\x9b\x1b'
    
_lr_action_items = {'FUNCTION':([0,13,14,16,17,19,20,26,29,34,43,62,84,88,95,107,112,114,117,120,124,130,132,133,135,142,144,145,146,147,],[1,-5,1,-48,-4,1,-51,-49,-50,-6,1,1,1,1,1,-52,1,-59,-62,-63,-61,1,1,1,1,-65,-60,-64,-66,-67,]),'RETURN':([0,13,14,16,17,19,20,26,29,34,43,62,84,88,95,107,112,114,117,120,124,130,132,133,135,142,144,145,146,147,],[6,-5,6,-48,-4,6,-51,-49,-50,-6,6,6,6,6,6,-52,6,-59,-62,-63,-61,6,6,6,6,-65,-60,-64,-66,-67,]),'LSBRACKET':([12,35,42,],[40,40,71,]),'DIV_OP':([4,7,8,12,15,24,25,27,31,35,36,37,45,46,66,67,69,70,72,74,76,77,78,79,80,81,82,91,92,111,118,127,],[-30,-28,-31,-23,-25,-27,-32,55,-29,-23,55,55,55,55,55,55,-20,55,55,-26,-35,55,55,55,-36,55,-37,-24,-19,55,55,55,]),'WHILE':([0,13,14,16,17,19,20,26,29,34,43,62,84,88,95,107,112,114,117,120,124,130,132,133,135,142,144,145,146,147,],[3,-5,3,-48,-4,3,-51,-49,-50,-6,3,3,3,3,3,-52,3,-59,-62,-63,-61,3,3,3,3,-65,-60,-64,-66,-67,]),'CONST':([12,],[39,]),'TRUE':([0,3,6,13,14,16,17,19,20,22,23,26,29,34,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,71,84,88,93,95,102,107,112,114,115,117,120,122,124,130,132,133,135,142,144,145,146,147,],[8,8,8,-5,8,-48,-4,8,-51,8,8,-49,-50,-6,8,8,8,8,8,-41,-45,8,-46,-47,8,8,8,8,-43,-42,8,-44,8,-40,8,8,8,8,8,8,8,-52,8,-59,8,-62,-63,8,-61,8,8,8,8,-65,-60,-64,-66,-67,]),'RPAREN':([4,7,8,15,24,25,31,35,41,45,63,68,69,70,74,76,77,78,79,80,81,82,85,87,91,92,104,109,118,],[-30,-28,-31,-25,-27,-32,-29,-23,69,74,86,92,-20,-21,-26,-35,-38,-39,-34,-36,-33,-37,98,-55,-24,-19,-22,-56,123,]),'CGE':([4,7,8,12,15,24,25,27,31,35,36,37,45,46,66,67,69,70,72,74,76,77,78,79,80,81,82,91,92,111,118,127,],[-30,-28,-31,-23,-25,-27,-32,51,-29,-23,51,51,51,51,51,51,-20,51,51,-26,-35,51,51,-34,-36,-33,-37,-24,-19,51,51,51,]),'COLON':([4,7,8,15,24,25,31,35,36,46,69,74,76,77,78,79,80,81,82,86,90,91,92,98,121,123,125,127,],[-30,-28,-31,-25,-27,-32,-29,-23,64,75,-20,-26,-35,-38,-39,-34,-36,-33,-37,99,103,-24,-19,108,126,128,129,131,]),'CEQ':([4,7,8,12,15,24,25,27,31,35,36,37,45,46,66,67,69,70,72,74,76,77,78,79,80,81,82,91,92,111,118,127,],[-30,-28,-31,-23,-25,-27,-32,57,-29,-23,57,57,57,57,57,57,-20,57,57,-26,-35,57,57,-34,-36,-33,-37,-24,-19,57,57,57,]),'ADD_OP':([4,7,8,12,15,24,25,27,31,35,36,37,45,46,66,67,69,70,72,74,76,77,78,79,80,81,82,91,92,111,118,127,],[-30,-28,-31,-23,-25,-27,-32,58,-29,-23,58,58,58,58,58,58,-20,58,58,-26,-35,58,58,-34,-36,-33,-37,-24,-19,58,58,58,]),'INTEGER':([0,3,6,13,14,16,17,19,20,22,23,26,29,34,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,71,84,88,93,95,102,107,112,114,115,117,120,122,124,130,132,133,135,142,144,145,146,147,],[7,7,7,-5,7,-48,-4,7,-51,7,7,-49,-50,-6,7,7,7,7,7,-41,-45,7,-46,-47,7,7,7,7,-43,-42,7,-44,7,-40,7,7,7,7,7,7,7,-52,7,-59,7,-62,-63,7,-61,7,7,7,7,-65,-60,-64,-66,-67,]),'IDENTIFIER':([0,1,3,6,9,13,14,16,17,19,20,22,23,26,29,34,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,71,84,88,93,95,100,102,107,112,114,115,117,120,122,124,130,132,133,135,142,144,145,146,147,],[12,33,35,35,38,-5,12,-48,-4,12,-51,35,35,-49,-50,-6,35,35,35,35,12,-41,-45,35,-46,-47,35,35,35,35,-43,-42,35,-44,35,-40,12,87,90,35,12,12,35,12,87,35,-52,12,-59,35,-62,-63,35,-61,12,12,12,12,-65,-60,-64,-66,-67,]),'CGT':([4,7,8,12,15,24,25,27,31,35,36,37,45,46,66,67,69,70,72,74,76,77,78,79,80,81,82,91,92,111,118,127,],[-30,-28,-31,-23,-25,-27,-32,50,-29,-23,50,50,50,50,50,50,-20,50,50,-26,-35,50,50,-34,-36,-33,-37,-24,-19,50,50,50,]),'$end':([11,13,16,17,19,20,26,29,34,44,73,107,114,117,120,124,142,144,145,146,147,],[0,-5,-48,-4,-1,-51,-49,-50,-6,-2,-3,-52,-59,-62,-63,-61,-65,-60,-64,-66,-67,]),'END_STATEMENT':([0,2,4,5,6,7,8,10,12,13,15,16,17,18,19,20,21,24,25,26,27,28,29,30,31,32,34,35,37,43,64,66,69,72,74,75,76,77,78,79,80,81,82,91,92,96,99,103,105,107,108,110,113,114,117,119,120,124,126,128,129,131,138,140,141,142,143,144,145,146,147,],[14,34,-30,-10,-12,-28,-31,-8,-23,-5,-25,-48,-4,-7,14,-51,-11,-27,-32,-49,-9,-14,-50,-15,-29,62,-6,-23,-13,14,88,-18,-20,-16,-26,95,-35,-38,-39,-34,-36,-33,-37,-24,-19,107,-54,112,-17,-52,-53,114,117,-59,-62,124,-63,-61,130,132,133,135,142,144,145,-65,146,-60,-64,-66,-67,]),'END':([13,16,17,20,26,29,34,83,84,97,101,106,107,114,116,117,120,124,134,136,137,139,142,144,145,146,147,],[-5,-48,-4,-51,-49,-50,-6,96,-57,-58,110,113,-52,-59,119,-62,-63,-61,138,140,141,143,-65,-60,-64,-66,-67,]),'STRING':([0,3,6,13,14,16,17,19,20,22,23,26,29,34,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,71,84,88,93,95,102,107,112,114,115,117,120,122,124,130,132,133,135,142,144,145,146,147,],[15,15,15,-5,15,-48,-4,15,-51,15,15,-49,-50,-6,15,15,15,15,15,-41,-45,15,-46,-47,15,15,15,15,-43,-42,15,-44,15,-40,15,15,15,15,15,15,15,-52,15,-59,15,-62,-63,15,-61,15,15,15,15,-65,-60,-64,-66,-67,]),'FOR':([0,13,14,16,17,19,20,26,29,34,43,62,84,88,95,107,112,114,117,120,124,130,132,133,135,142,144,145,146,147,],[9,-5,9,-48,-4,9,-51,-49,-50,-6,9,9,9,9,9,-52,9,-59,-62,-63,-61,9,9,9,9,-65,-60,-64,-66,-67,]),'CLE':([4,7,8,12,15,24,25,27,31,35,36,37,45,46,66,67,69,70,72,74,76,77,78,79,80,81,82,91,92,111,118,127,],[-30,-28,-31,-23,-25,-27,-32,48,-29,-23,48,48,48,48,48,48,-20,48,48,-26,-35,48,48,-34,-36,-33,-37,-24,-19,48,48,48,]),'ELSE':([117,120,146,147,],[121,125,-66,-67,]),'RANGE':([65,],[89,]),'CNE':([4,7,8,12,15,24,25,27,31,35,36,37,45,46,66,67,69,70,72,74,76,77,78,79,80,81,82,91,92,111,118,127,],[-30,-28,-31,-23,-25,-27,-32,56,-29,-23,56,56,56,56,56,56,-20,56,56,-26,-35,56,56,-34,-36,-33,-37,-24,-19,56,56,56,]),'LPAREN':([0,3,6,12,13,14,16,17,19,20,22,23,26,29,33,34,35,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,71,84,88,89,93,95,102,107,112,114,115,117,120,122,124,130,132,133,135,142,144,145,146,147,],[22,22,22,41,-5,22,-48,-4,22,-51,22,22,-49,-50,63,-6,41,22,22,22,22,22,-41,-45,22,-46,-47,22,22,22,22,-43,-42,22,-44,22,-40,22,22,22,22,102,22,22,22,-52,22,-59,22,-62,-63,22,-61,22,22,22,22,-65,-60,-64,-66,-67,]),'IN':([38,],[65,]),'CLT':([4,7,8,12,15,24,25,27,31,35,36,37,45,46,66,67,69,70,72,74,76,77,78,79,80,81,82,91,92,111,118,127,],[-30,-28,-31,-23,-25,-27,-32,59,-29,-23,59,59,59,59,59,59,-20,59,59,-26,-35,59,59,-34,-36,-33,-37,-24,-19,59,59,59,]),'IF':([0,13,14,16,17,19,20,26,29,34,43,62,84,88,95,107,112,114,117,120,124,130,132,133,135,142,144,145,146,147,],[23,-5,23,-48,-4,23,-51,-49,-50,-6,23,23,23,23,23,-52,23,-59,-62,-63,-61,23,23,23,23,-65,-60,-64,-66,-67,]),'AND':([4,7,8,12,15,24,25,27,31,35,36,37,45,46,66,67,69,70,72,74,76,77,78,79,80,81,82,91,92,111,118,127,],[-30,-28,-31,-23,-25,-27,-32,47,-29,-23,47,47,47,47,47,47,-20,47,47,-26,-35,47,47,-34,-36,-33,-37,-24,-19,47,47,47,]),'MUL_OP':([4,7,8,12,15,24,25,27,31,35,36,37,45,46,66,67,69,70,72,74,76,77,78,79,80,81,82,91,92,111,118,127,],[-30,-28,-31,-23,-25,-27,-32,49,-29,-23,49,49,49,49,49,49,-20,49,49,-26,-35,49,49,49,-36,49,-37,-24,-19,49,49,49,]),'FALSE':([0,3,6,13,14,16,17,19,20,22,23,26,29,34,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,71,84,88,93,95,102,107,112,114,115,117,120,122,124,130,132,133,135,142,144,145,146,147,],[25,25,25,-5,25,-48,-4,25,-51,25,25,-49,-50,-6,25,25,25,25,25,-41,-45,25,-46,-47,25,25,25,25,-43,-42,25,-44,25,-40,25,25,25,25,25,25,25,-52,25,-59,25,-62,-63,25,-61,25,25,25,25,-65,-60,-64,-66,-67,]),'DOUBLE':([0,3,6,13,14,16,17,19,20,22,23,26,29,34,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,71,84,88,93,95,102,107,112,114,115,117,120,122,124,130,132,133,135,142,144,145,146,147,],[31,31,31,-5,31,-48,-4,31,-51,31,31,-49,-50,-6,31,31,31,31,31,-41,-45,31,-46,-47,31,31,31,31,-43,-42,31,-44,31,-40,31,31,31,31,31,31,31,-52,31,-59,31,-62,-63,31,-61,31,31,31,31,-65,-60,-64,-66,-67,]),'SUB_OP':([4,7,8,12,15,24,25,27,31,35,36,37,45,46,66,67,69,70,72,74,76,77,78,79,80,81,82,91,92,111,118,127,],[-30,-28,-31,-23,-25,-27,-32,54,-29,-23,54,54,54,54,54,54,-20,54,54,-26,-35,54,54,-34,-36,-33,-37,-24,-19,54,54,54,]),'ASSIGN':([12,],[42,]),'BREAK':([0,13,14,16,17,19,20,26,29,34,43,62,84,88,95,107,112,114,117,120,124,130,132,133,135,142,144,145,146,147,],[28,-5,28,-48,-4,28,-51,-49,-50,-6,28,28,28,28,28,-52,28,-59,-62,-63,-61,28,28,28,28,-65,-60,-64,-66,-67,]),'RSBRACKET':([4,7,8,15,24,25,31,35,67,69,70,74,76,77,78,79,80,81,82,91,92,94,104,],[-30,-28,-31,-25,-27,-32,-29,-23,91,-20,-21,-26,-35,-38,-39,-34,-36,-33,-37,-24,-19,105,-22,]),'CONTINUE':([0,13,14,16,17,19,20,26,29,34,43,62,84,88,95,107,112,114,117,120,124,130,132,133,135,142,144,145,146,147,],[30,-5,30,-48,-4,30,-51,-49,-50,-6,30,30,30,30,30,-52,30,-59,-62,-63,-61,30,30,30,30,-65,-60,-64,-66,-67,]),'ELSEIF':([117,146,],[122,122,]),'COMMA':([4,7,8,15,24,25,31,35,69,70,74,76,77,78,79,80,81,82,87,91,92,111,],[-30,-28,-31,-25,-27,-32,-29,-23,-20,93,-26,-35,-38,-39,-34,-36,-33,-37,100,-24,-19,115,]),'MOD_OP':([4,7,8,12,15,24,25,27,31,35,36,37,45,46,66,67,69,70,72,74,76,77,78,79,80,81,82,91,92,111,118,127,],[-30,-28,-31,-23,-25,-27,-32,60,-29,-23,60,60,60,60,60,60,-20,60,60,-26,-35,60,60,60,-36,60,-37,-24,-19,60,60,60,]),'OR':([4,7,8,12,15,24,25,27,31,35,36,37,45,46,66,67,69,70,72,74,76,77,78,79,80,81,82,91,92,111,118,127,],[-30,-28,-31,-23,-25,-27,-32,61,-29,-23,61,61,61,61,61,61,-20,61,61,-26,-35,61,61,-34,-36,-33,-37,-24,-19,61,61,61,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'func_def_args':([63,100,],[85,109,]),'elseif_list':([117,146,],[120,147,]),'small_stmt':([0,14,19,43,62,84,88,95,112,130,132,133,135,],[2,2,2,2,2,2,2,2,2,2,2,2,2,]),'comb_op':([27,36,37,45,46,66,67,70,72,76,77,78,79,80,81,82,111,118,127,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'boolean':([0,3,6,14,19,22,23,39,40,41,42,43,49,52,53,54,55,58,60,62,71,84,88,93,95,102,112,115,122,130,132,133,135,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'return_stmt':([0,14,19,43,62,84,88,95,112,130,132,133,135,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'list_args':([41,71,93,],[68,94,104,]),'comp_op':([27,36,37,45,46,66,67,70,72,76,77,78,79,80,81,82,111,118,127,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'const_decl':([0,14,19,43,62,84,88,95,112,130,132,133,135,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'program':([0,19,43,],[11,44,73,]),'compound_stmt':([0,14,19,43,62,84,88,95,112,130,132,133,135,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'body':([62,84,88,95,112,130,132,133,135,],[83,97,101,106,116,134,136,137,139,]),'head':([1,],[32,]),'func_def':([0,14,19,43,62,84,88,95,112,130,132,133,135,],[16,16,16,16,16,16,16,16,16,16,16,16,16,]),'simple_stmt':([0,14,19,43,62,84,88,95,112,130,132,133,135,],[17,17,17,17,17,17,17,17,17,17,17,17,17,]),'assignment':([0,14,19,43,62,84,88,95,112,130,132,133,135,],[18,18,18,18,18,18,18,18,18,18,18,18,18,]),'stmt':([0,14,19,43,62,84,88,95,112,130,132,133,135,],[19,43,19,19,84,84,84,84,84,84,84,84,84,]),'for_stmt':([0,14,19,43,62,84,88,95,112,130,132,133,135,],[20,20,20,20,20,20,20,20,20,20,20,20,20,]),'loop_stmt':([0,14,19,43,62,84,88,95,112,130,132,133,135,],[21,21,21,21,21,21,21,21,21,21,21,21,21,]),'func_call':([0,3,6,14,19,22,23,39,40,41,42,43,49,52,53,54,55,58,60,62,71,84,88,93,95,102,112,115,122,130,132,133,135,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'if_stmt':([0,14,19,43,62,84,88,95,112,130,132,133,135,],[26,26,26,26,26,26,26,26,26,26,26,26,26,]),'expr':([0,3,6,14,19,22,23,39,40,41,42,43,49,52,53,54,55,58,60,62,71,84,88,93,95,102,112,115,122,130,132,133,135,],[27,36,37,27,27,45,46,66,67,70,72,27,76,77,78,79,80,81,82,27,70,27,27,70,27,111,27,118,127,27,27,27,27,]),'while_stmt':([0,14,19,43,62,84,88,95,112,130,132,133,135,],[29,29,29,29,29,29,29,29,29,29,29,29,29,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt','program',1,'p_program','./parser.py',17),
  ('program -> stmt program','program',2,'p_program','./parser.py',18),
  ('program -> END_STATEMENT stmt program','program',3,'p_program','./parser.py',19),
  ('stmt -> simple_stmt','stmt',1,'p_stmt_type','./parser.py',28),
  ('stmt -> compound_stmt','stmt',1,'p_stmt_type','./parser.py',29),
  ('simple_stmt -> small_stmt END_STATEMENT','simple_stmt',2,'p_simple_stmt','./parser.py',33),
  ('small_stmt -> assignment','small_stmt',1,'p_small_stmt','./parser.py',37),
  ('small_stmt -> const_decl','small_stmt',1,'p_small_stmt','./parser.py',38),
  ('small_stmt -> expr','small_stmt',1,'p_small_stmt','./parser.py',39),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','./parser.py',40),
  ('small_stmt -> loop_stmt','small_stmt',1,'p_small_stmt','./parser.py',41),
  ('return_stmt -> RETURN','return_stmt',1,'p_','./parser.py',45),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_','./parser.py',46),
  ('loop_stmt -> BREAK','loop_stmt',1,'p_break','./parser.py',53),
  ('loop_stmt -> CONTINUE','loop_stmt',1,'p_continue','./parser.py',57),
  ('assignment -> IDENTIFIER ASSIGN expr','assignment',3,'p_assign','./parser.py',61),
  ('assignment -> IDENTIFIER ASSIGN LSBRACKET list_args RSBRACKET','assignment',5,'p_assign','./parser.py',62),
  ('const_decl -> IDENTIFIER CONST expr','const_decl',3,'p_const','./parser.py',69),
  ('func_call -> IDENTIFIER LPAREN list_args RPAREN','func_call',4,'p_func_call','./parser.py',74),
  ('func_call -> IDENTIFIER LPAREN RPAREN','func_call',3,'p_func_call','./parser.py',75),
  ('list_args -> expr','list_args',1,'p_list_args','./parser.py',82),
  ('list_args -> expr COMMA list_args','list_args',3,'p_list_args','./parser.py',83),
  ('expr -> IDENTIFIER','expr',1,'p_expr_id','./parser.py',91),
  ('expr -> IDENTIFIER LSBRACKET expr RSBRACKET','expr',4,'p_expr_id','./parser.py',92),
  ('expr -> STRING','expr',1,'p_expr_string','./parser.py',99),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','./parser.py',103),
  ('expr -> func_call','expr',1,'p_expr','./parser.py',104),
  ('expr -> INTEGER','expr',1,'p_expr_num','./parser.py',111),
  ('expr -> DOUBLE','expr',1,'p_expr_num','./parser.py',112),
  ('expr -> boolean','expr',1,'p_expr_bool','./parser.py',116),
  ('boolean -> TRUE','boolean',1,'p_true','./parser.py',120),
  ('boolean -> FALSE','boolean',1,'p_false','./parser.py',124),
  ('expr -> expr ADD_OP expr','expr',3,'p_op','./parser.py',128),
  ('expr -> expr SUB_OP expr','expr',3,'p_op','./parser.py',129),
  ('expr -> expr MUL_OP expr','expr',3,'p_op','./parser.py',130),
  ('expr -> expr DIV_OP expr','expr',3,'p_op','./parser.py',131),
  ('expr -> expr MOD_OP expr','expr',3,'p_op','./parser.py',132),
  ('expr -> expr comb_op expr','expr',3,'p_op','./parser.py',133),
  ('expr -> expr comp_op expr','expr',3,'p_op','./parser.py',134),
  ('comb_op -> OR','comb_op',1,'p_comb_op','./parser.py',138),
  ('comb_op -> AND','comb_op',1,'p_comb_op','./parser.py',139),
  ('comp_op -> CEQ','comp_op',1,'p_comp_op','./parser.py',143),
  ('comp_op -> CNE','comp_op',1,'p_comp_op','./parser.py',144),
  ('comp_op -> CLT','comp_op',1,'p_comp_op','./parser.py',145),
  ('comp_op -> CLE','comp_op',1,'p_comp_op','./parser.py',146),
  ('comp_op -> CGT','comp_op',1,'p_comp_op','./parser.py',147),
  ('comp_op -> CGE','comp_op',1,'p_comp_op','./parser.py',148),
  ('compound_stmt -> func_def','compound_stmt',1,'p_compound_stmt','./parser.py',152),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','./parser.py',153),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','./parser.py',154),
  ('compound_stmt -> for_stmt','compound_stmt',1,'p_compound_stmt','./parser.py',155),
  ('func_def -> FUNCTION head END_STATEMENT body END END_STATEMENT','func_def',6,'p_func_def','./parser.py',159),
  ('head -> IDENTIFIER LPAREN func_def_args RPAREN COLON','head',5,'p_head','./parser.py',163),
  ('head -> IDENTIFIER LPAREN RPAREN COLON','head',4,'p_head','./parser.py',164),
  ('func_def_args -> IDENTIFIER','func_def_args',1,'p_func_def_args','./parser.py',171),
  ('func_def_args -> IDENTIFIER COMMA func_def_args','func_def_args',3,'p_func_def_args','./parser.py',172),
  ('body -> stmt','body',1,'p_body','./parser.py',179),
  ('body -> stmt body','body',2,'p_body','./parser.py',180),
  ('while_stmt -> WHILE expr COLON END_STATEMENT body END END_STATEMENT','while_stmt',7,'p_while','./parser.py',187),
  ('for_stmt -> FOR IDENTIFIER IN RANGE LPAREN expr COMMA expr RPAREN COLON END_STATEMENT body END END_STATEMENT','for_stmt',14,'p_for','./parser.py',192),
  ('for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT body END END_STATEMENT','for_stmt',9,'p_for','./parser.py',193),
  ('if_stmt -> IF expr COLON END_STATEMENT body END END_STATEMENT','if_stmt',7,'p_if','./parser.py',204),
  ('if_stmt -> IF expr COLON END_STATEMENT body END END_STATEMENT elseif_list','if_stmt',8,'p_if','./parser.py',205),
  ('if_stmt -> IF expr COLON END_STATEMENT body END END_STATEMENT elseif_list ELSE COLON END_STATEMENT body END END_STATEMENT','if_stmt',14,'p_if','./parser.py',206),
  ('if_stmt -> IF expr COLON END_STATEMENT body END END_STATEMENT ELSE COLON END_STATEMENT body END END_STATEMENT','if_stmt',13,'p_if','./parser.py',207),
  ('elseif_list -> ELSEIF expr COLON END_STATEMENT body END END_STATEMENT','elseif_list',7,'p_elseif','./parser.py',218),
  ('elseif_list -> ELSEIF expr COLON END_STATEMENT body END END_STATEMENT elseif_list','elseif_list',8,'p_elseif','./parser.py',219),
]
