
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xb0\xbc\xb9\xa6\xbaXA\x16E\xc6\x0f\xdc!\xa6\x1e\xb8'
    
_lr_action_items = {'END_STATEMENT':([1,4,5,7,11,14,17,20,22,24,27,29,30,31,32,35,36,37,40,41,51,52,70,73,74,79,80,84,85,89,90,91,92,93,97,107,109,116,122,126,132,133,],[25,-9,-11,-7,47,-6,-10,-8,-14,-15,-28,-34,-32,-27,-30,-29,-35,-33,-12,-13,-18,-19,94,-20,-22,-16,-17,104,-31,-38,-37,-39,-36,-40,-21,115,-55,-54,127,130,136,137,]),'RETURN':([0,10,12,13,15,16,21,23,25,47,82,94,99,104,113,115,118,125,127,130,135,136,137,138,142,],[5,-4,-49,-3,5,-52,-50,-51,-5,5,5,5,-53,5,-60,5,-68,-67,5,5,-70,5,5,-69,-66,]),'DIV_OP':([27,30,31,32,35,37,38,40,51,53,71,73,74,75,79,85,88,89,90,91,92,93,97,],[-28,-32,-27,-30,-29,-33,63,63,63,63,63,63,-22,63,63,-31,63,-38,63,-39,63,-40,-21,]),'ARRAY_CELL':([0,3,5,10,12,13,15,16,19,21,23,25,26,33,42,44,45,46,47,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,82,94,98,99,104,113,115,118,123,125,127,130,135,136,137,138,142,],[2,27,27,-4,-49,-3,2,-52,27,-50,-51,-5,27,27,27,27,27,27,2,-42,27,-41,-46,27,-48,27,27,27,-44,-43,27,-45,27,-47,2,2,27,-53,2,-60,2,-68,27,-67,2,2,-70,2,2,-69,-66,]),'WHILE':([0,10,12,13,15,16,21,23,25,47,82,94,99,104,113,115,118,125,127,130,135,136,137,138,142,],[3,-4,-49,-3,3,-52,-50,-51,-5,3,3,3,-53,3,-60,3,-68,-67,3,3,-70,3,3,-69,-66,]),'COLON':([27,28,29,30,31,32,34,35,36,37,39,50,74,85,86,87,88,89,90,91,92,93,96,97,101,110,128,129,],[-28,-65,-34,-32,-27,-30,-61,-29,-35,-33,70,84,-22,-31,-63,-62,-64,-38,-37,-39,-36,-40,107,-21,109,116,132,133,]),'CONST':([9,],[44,]),'TRUE':([3,5,19,26,33,45,46,55,56,57,98,123,],[29,29,29,29,29,29,29,-42,29,-41,29,29,]),'RPAREN':([27,28,29,30,31,32,34,35,36,37,45,53,54,71,74,75,76,77,78,83,85,86,87,88,89,90,91,92,93,97,102,103,108,117,124,],[-28,-65,-34,-32,-27,-30,-61,-29,-35,-33,74,85,86,85,-22,-25,-26,97,-23,101,-31,-63,-62,-64,-38,-37,-39,-36,-40,-21,110,-56,-24,-57,129,]),'CGE':([27,30,31,32,35,37,38,53,74,85,89,90,91,92,93,97,],[-28,-32,-27,-30,-29,-33,60,60,-22,-31,-38,-37,-39,-36,-40,-21,]),'COMMA':([27,29,30,31,32,35,36,37,74,75,76,78,85,89,90,91,92,93,97,103,114,],[-28,-34,-32,-27,-30,-29,-35,-33,-22,-25,-26,98,-31,-38,-37,-39,-36,-40,-21,111,119,]),'CEQ':([27,30,31,32,35,37,38,53,74,85,89,90,91,92,93,97,],[-28,-32,-27,-30,-29,-33,65,65,-22,-31,-38,-37,-39,-36,-40,-21,]),'ADD_OP':([27,30,31,32,35,37,38,40,51,53,71,73,74,75,79,85,88,89,90,91,92,93,97,],[-28,-32,-27,-30,-29,-33,66,66,66,66,66,66,-22,66,66,-31,66,-38,-37,-39,-36,-40,-21,]),'INTEGER':([3,5,19,26,33,42,44,45,46,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,98,106,119,123,],[30,30,30,30,30,30,30,30,30,-42,30,-41,-46,30,-48,30,30,30,-44,-43,30,-45,30,-47,30,114,124,30,]),'IDENTIFIER':([0,3,5,6,10,12,13,15,16,18,19,21,23,25,26,33,42,44,45,46,47,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,82,83,94,98,99,104,111,113,115,118,123,125,127,130,135,136,137,138,142,],[9,31,31,43,-4,-49,-3,9,-52,49,31,-50,-51,-5,31,31,31,31,31,31,9,-42,31,-41,-46,31,-48,31,31,31,-44,-43,31,-45,31,-47,96,9,103,9,31,-53,9,103,-60,9,-68,31,-67,9,9,-70,9,9,-69,-66,]),'ASSIGN':([2,9,],[26,46,]),'$end':([8,10,12,13,15,16,21,23,25,48,99,113,118,125,135,138,142,],[0,-4,-49,-3,-1,-52,-50,-51,-5,-2,-53,-60,-68,-67,-70,-69,-66,]),'FUNCTION':([0,10,12,13,15,16,21,23,25,47,82,94,99,104,113,115,118,125,127,130,135,136,137,138,142,],[18,-4,-49,-3,18,-52,-50,-51,-5,18,18,18,-53,18,-60,18,-68,-67,18,18,-70,18,18,-69,-66,]),'END':([10,12,13,16,21,23,25,81,82,99,100,105,112,113,118,120,125,131,134,135,138,139,140,142,],[-4,-49,-3,-52,-50,-51,-5,99,-58,-53,-59,113,118,-60,-68,125,-67,135,138,-70,-69,141,142,-66,]),'FOR':([0,10,12,13,15,16,21,23,25,47,82,94,99,104,113,115,118,125,127,130,135,136,137,138,142,],[6,-4,-49,-3,6,-52,-50,-51,-5,6,6,6,-53,6,-60,6,-68,-67,6,6,-70,6,6,-69,-66,]),'CLE':([27,30,31,32,35,37,38,53,74,85,89,90,91,92,93,97,],[-28,-32,-27,-30,-29,-33,58,58,-22,-31,-38,-37,-39,-36,-40,-21,]),'ELSE':([118,121,141,143,],[122,126,-71,-72,]),'RANGE':([72,],[95,]),'CNE':([27,30,31,32,35,37,38,53,74,85,89,90,91,92,93,97,],[-28,-32,-27,-30,-29,-33,64,64,-22,-31,-38,-37,-39,-36,-40,-21,]),'LPAREN':([3,5,9,19,26,31,33,42,44,45,46,49,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,95,98,123,],[33,42,45,33,42,45,33,42,42,42,42,83,-42,33,-41,-46,42,-48,42,42,42,-44,-43,42,-45,42,-47,106,42,33,]),'IN':([43,],[72,]),'CLT':([27,30,31,32,35,37,38,53,74,85,89,90,91,92,93,97,],[-28,-32,-27,-30,-29,-33,67,67,-22,-31,-38,-37,-39,-36,-40,-21,]),'IF':([0,10,12,13,15,16,21,23,25,47,82,94,99,104,113,115,118,125,127,130,135,136,137,138,142,],[19,-4,-49,-3,19,-52,-50,-51,-5,19,19,19,-53,19,-60,19,-68,-67,19,19,-70,19,19,-69,-66,]),'AND':([27,28,29,30,31,32,34,35,36,37,74,85,88,89,90,91,92,93,97,],[-28,-65,-34,-32,-27,-30,55,-29,-35,-33,-22,-31,-64,-38,-37,-39,-36,-40,-21,]),'MUL_OP':([27,30,31,32,35,37,38,40,51,53,71,73,74,75,79,85,88,89,90,91,92,93,97,],[-28,-32,-27,-30,-29,-33,61,61,61,61,61,61,-22,61,61,-31,61,-38,61,-39,61,-40,-21,]),'FALSE':([3,5,19,26,33,45,46,55,56,57,98,123,],[36,36,36,36,36,36,36,-42,36,-41,36,36,]),'DOUBLE':([3,5,19,26,33,42,44,45,46,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,98,123,],[37,37,37,37,37,37,37,37,37,-42,37,-41,-46,37,-48,37,37,37,-44,-43,37,-45,37,-47,37,37,]),'SUB_OP':([27,30,31,32,35,37,38,40,51,53,71,73,74,75,79,85,88,89,90,91,92,93,97,],[-28,-32,-27,-30,-29,-33,62,62,62,62,62,62,-22,62,62,-31,62,-38,-37,-39,-36,-40,-21,]),'CGT':([27,30,31,32,35,37,38,53,74,85,89,90,91,92,93,97,],[-28,-32,-27,-30,-29,-33,69,69,-22,-31,-38,-37,-39,-36,-40,-21,]),'BREAK':([0,10,12,13,15,16,21,23,25,47,82,94,99,104,113,115,118,125,127,130,135,136,137,138,142,],[22,-4,-49,-3,22,-52,-50,-51,-5,22,22,22,-53,22,-60,22,-68,-67,22,22,-70,22,22,-69,-66,]),'CONTINUE':([0,10,12,13,15,16,21,23,25,47,82,94,99,104,113,115,118,125,127,130,135,136,137,138,142,],[24,-4,-49,-3,24,-52,-50,-51,-5,24,24,24,-53,24,-60,24,-68,-67,24,24,-70,24,24,-69,-66,]),'ELSEIF':([118,141,],[123,123,]),'MOD_OP':([27,30,31,32,35,37,38,40,51,53,71,73,74,75,79,85,88,89,90,91,92,93,97,],[-28,-32,-27,-30,-29,-33,68,68,68,68,68,68,-22,68,68,-31,68,-38,68,-39,68,-40,-21,]),'OR':([27,28,29,30,31,32,34,35,36,37,74,85,88,89,90,91,92,93,97,],[-28,-65,-34,-32,-27,-30,57,-29,-35,-33,-22,-31,-64,-38,-37,-39,-36,-40,-21,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'elseif_list':([118,141,],[121,143,]),'small_stmt':([0,15,47,82,94,104,115,127,130,136,137,],[1,1,1,1,1,1,1,1,1,1,1,]),'comb_op':([34,],[56,]),'boolean':([3,5,19,26,33,45,46,56,98,123,],[28,41,28,52,28,76,80,28,76,28,]),'return_stmt':([0,15,47,82,94,104,115,127,130,136,137,],[4,4,4,4,4,4,4,4,4,4,4,]),'arg':([45,98,],[78,78,]),'comp_op':([38,53,],[59,59,]),'const_decl':([0,15,47,82,94,104,115,127,130,136,137,],[7,7,7,7,7,7,7,7,7,7,7,]),'program':([0,15,],[8,48,]),'p_func_def_args':([83,111,],[102,117,]),'compound_stmt':([0,15,47,82,94,104,115,127,130,136,137,],[10,10,10,10,10,10,10,10,10,10,10,]),'arithmetic':([3,5,19,26,33,42,44,45,46,56,59,61,62,63,66,68,98,123,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'body':([47,82,94,104,115,127,130,136,137,],[81,100,105,112,120,131,134,139,140,]),'head':([0,15,47,82,94,104,115,127,130,136,137,],[11,11,11,11,11,11,11,11,11,11,11,]),'func_def':([0,15,47,82,94,104,115,127,130,136,137,],[12,12,12,12,12,12,12,12,12,12,12,]),'simple_stmt':([0,15,47,82,94,104,115,127,130,136,137,],[13,13,13,13,13,13,13,13,13,13,13,]),'assignment':([0,15,47,82,94,104,115,127,130,136,137,],[14,14,14,14,14,14,14,14,14,14,14,]),'stmt':([0,15,47,82,94,104,115,127,130,136,137,],[15,15,82,82,82,82,82,82,82,82,82,]),'for_stmt':([0,15,47,82,94,104,115,127,130,136,137,],[16,16,16,16,16,16,16,16,16,16,16,]),'loop_stmt':([0,15,47,82,94,104,115,127,130,136,137,],[17,17,17,17,17,17,17,17,17,17,17,]),'condition':([3,19,33,56,123,],[34,34,34,34,34,]),'func_call':([0,3,5,15,19,26,33,42,44,45,46,47,56,59,61,62,63,66,68,82,94,98,104,115,123,127,130,136,137,],[20,35,35,20,35,35,35,35,35,35,35,20,35,35,35,35,35,35,35,20,20,35,20,20,35,20,20,20,20,]),'if_stmt':([0,15,47,82,94,104,115,127,130,136,137,],[21,21,21,21,21,21,21,21,21,21,21,]),'expr':([3,5,19,26,33,42,44,45,46,56,59,61,62,63,66,68,98,123,],[38,40,38,51,53,71,73,75,79,38,88,89,90,91,92,93,75,38,]),'while_stmt':([0,15,47,82,94,104,115,127,130,136,137,],[23,23,23,23,23,23,23,23,23,23,23,]),'cond_list':([3,19,33,56,123,],[39,50,54,87,128,]),'call_args':([45,98,],[77,108,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt','program',1,'p_program','.\\parser.py',16),
  ('program -> stmt program','program',2,'p_program','.\\parser.py',17),
  ('stmt -> simple_stmt','stmt',1,'p_stmt_type','.\\parser.py',24),
  ('stmt -> compound_stmt','stmt',1,'p_stmt_type','.\\parser.py',25),
  ('simple_stmt -> small_stmt END_STATEMENT','simple_stmt',2,'p_simple_stmt','.\\parser.py',29),
  ('small_stmt -> assignment','small_stmt',1,'p_small_stmt','.\\parser.py',33),
  ('small_stmt -> const_decl','small_stmt',1,'p_small_stmt','.\\parser.py',34),
  ('small_stmt -> func_call','small_stmt',1,'p_small_stmt','.\\parser.py',35),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','.\\parser.py',36),
  ('small_stmt -> loop_stmt','small_stmt',1,'p_small_stmt','.\\parser.py',37),
  ('return_stmt -> RETURN','return_stmt',1,'p_','.\\parser.py',41),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_','.\\parser.py',42),
  ('return_stmt -> RETURN boolean','return_stmt',2,'p_','.\\parser.py',43),
  ('loop_stmt -> BREAK','loop_stmt',1,'p_loop_stmt','.\\parser.py',50),
  ('loop_stmt -> CONTINUE','loop_stmt',1,'p_loop_stmt','.\\parser.py',51),
  ('assignment -> IDENTIFIER ASSIGN expr','assignment',3,'p_assign','.\\parser.py',55),
  ('assignment -> IDENTIFIER ASSIGN boolean','assignment',3,'p_assign','.\\parser.py',56),
  ('assignment -> ARRAY_CELL ASSIGN expr','assignment',3,'p_assign','.\\parser.py',57),
  ('assignment -> ARRAY_CELL ASSIGN boolean','assignment',3,'p_assign','.\\parser.py',58),
  ('const_decl -> IDENTIFIER CONST expr','const_decl',3,'p_const','.\\parser.py',62),
  ('func_call -> IDENTIFIER LPAREN call_args RPAREN','func_call',4,'p_func_call','.\\parser.py',66),
  ('func_call -> IDENTIFIER LPAREN RPAREN','func_call',3,'p_func_call','.\\parser.py',67),
  ('call_args -> arg','call_args',1,'p_call_args','.\\parser.py',74),
  ('call_args -> arg COMMA call_args','call_args',3,'p_call_args','.\\parser.py',75),
  ('arg -> expr','arg',1,'p_arg','.\\parser.py',82),
  ('arg -> boolean','arg',1,'p_arg','.\\parser.py',83),
  ('expr -> IDENTIFIER','expr',1,'p_expr_id','.\\parser.py',87),
  ('expr -> ARRAY_CELL','expr',1,'p_expr_id','.\\parser.py',88),
  ('expr -> func_call','expr',1,'p_expr','.\\parser.py',92),
  ('expr -> arithmetic','expr',1,'p_expr','.\\parser.py',93),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','.\\parser.py',94),
  ('expr -> INTEGER','expr',1,'p_expr_num','.\\parser.py',101),
  ('expr -> DOUBLE','expr',1,'p_expr_num','.\\parser.py',102),
  ('boolean -> TRUE','boolean',1,'p_bool','.\\parser.py',106),
  ('boolean -> FALSE','boolean',1,'p_bool','.\\parser.py',107),
  ('arithmetic -> expr ADD_OP expr','arithmetic',3,'p_arithmetic','.\\parser.py',111),
  ('arithmetic -> expr SUB_OP expr','arithmetic',3,'p_arithmetic','.\\parser.py',112),
  ('arithmetic -> expr MUL_OP expr','arithmetic',3,'p_arithmetic','.\\parser.py',113),
  ('arithmetic -> expr DIV_OP expr','arithmetic',3,'p_arithmetic','.\\parser.py',114),
  ('arithmetic -> expr MOD_OP expr','arithmetic',3,'p_arithmetic','.\\parser.py',115),
  ('comb_op -> OR','comb_op',1,'p_comb_op','.\\parser.py',121),
  ('comb_op -> AND','comb_op',1,'p_comb_op','.\\parser.py',122),
  ('comp_op -> CEQ','comp_op',1,'p_comp_op','.\\parser.py',126),
  ('comp_op -> CNE','comp_op',1,'p_comp_op','.\\parser.py',127),
  ('comp_op -> CLT','comp_op',1,'p_comp_op','.\\parser.py',128),
  ('comp_op -> CLE','comp_op',1,'p_comp_op','.\\parser.py',129),
  ('comp_op -> CGT','comp_op',1,'p_comp_op','.\\parser.py',130),
  ('comp_op -> CGE','comp_op',1,'p_comp_op','.\\parser.py',131),
  ('compound_stmt -> func_def','compound_stmt',1,'p_compound_stmt','.\\parser.py',135),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','.\\parser.py',136),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','.\\parser.py',137),
  ('compound_stmt -> for_stmt','compound_stmt',1,'p_compound_stmt','.\\parser.py',138),
  ('func_def -> head END_STATEMENT body END','func_def',4,'p_func_def','.\\parser.py',142),
  ('head -> FUNCTION IDENTIFIER LPAREN p_func_def_args RPAREN COLON','head',6,'p_head','.\\parser.py',146),
  ('head -> FUNCTION IDENTIFIER LPAREN RPAREN COLON','head',5,'p_head','.\\parser.py',147),
  ('p_func_def_args -> IDENTIFIER','p_func_def_args',1,'p_func_def_args','.\\parser.py',154),
  ('p_func_def_args -> IDENTIFIER COMMA p_func_def_args','p_func_def_args',3,'p_func_def_args','.\\parser.py',155),
  ('body -> stmt','body',1,'p_body','.\\parser.py',162),
  ('body -> stmt body','body',2,'p_body','.\\parser.py',163),
  ('while_stmt -> WHILE cond_list COLON END_STATEMENT body END','while_stmt',6,'p_while','.\\parser.py',170),
  ('cond_list -> condition','cond_list',1,'p_cond_list','.\\parser.py',174),
  ('cond_list -> condition comb_op cond_list','cond_list',3,'p_cond_list','.\\parser.py',175),
  ('cond_list -> LPAREN cond_list RPAREN','cond_list',3,'p_cond_list_paren','.\\parser.py',182),
  ('condition -> expr comp_op expr','condition',3,'p_cond','.\\parser.py',186),
  ('condition -> boolean','condition',1,'p_cond','.\\parser.py',187),
  ('for_stmt -> FOR IDENTIFIER IN RANGE LPAREN INTEGER COMMA INTEGER RPAREN COLON END_STATEMENT body END','for_stmt',13,'p_for','.\\parser.py',194),
  ('for_stmt -> FOR IDENTIFIER IN IDENTIFIER COLON END_STATEMENT body END','for_stmt',8,'p_for','.\\parser.py',195),
  ('if_stmt -> IF cond_list COLON END_STATEMENT body END','if_stmt',6,'p_if','.\\parser.py',206),
  ('if_stmt -> IF cond_list COLON END_STATEMENT body END elseif_list ELSE END_STATEMENT body END','if_stmt',11,'p_if','.\\parser.py',207),
  ('if_stmt -> IF cond_list COLON END_STATEMENT body END ELSE END_STATEMENT body END','if_stmt',10,'p_if','.\\parser.py',208),
  ('elseif_list -> ELSEIF cond_list COLON END_STATEMENT body END','elseif_list',6,'p_elseif','.\\parser.py',217),
  ('elseif_list -> ELSEIF cond_list COLON END_STATEMENT body END elseif_list','elseif_list',7,'p_elseif','.\\parser.py',218),
]
